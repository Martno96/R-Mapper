{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport constants from '../constants';\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: {},\n  characters: [{\n    id: \"bhjabsdjbdjas\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"sakbkabkdbksb\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"vqweqwcxsadas\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: [{\n    source: \"bhjabsdjbdjas\",\n    target: \"sakbkabkdbksb\",\n    summary: \"lorem ipsum dolar sit amet?\",\n    details: \"when the cow became the sole distrubutor of pain, no one complained, at first...\",\n    category: constants[0]\n  }, {\n    source: \"vqweqwcxsadas\",\n    target: \"sakbkabkdbksb\",\n    summary: \"lorem IPSUUUUMMMM dolar sit amet!!!\",\n    details: \"when the cow became the sole distrubutor of pain, no one complained, at first...\",\n    category: constants[2]\n  }]\n};\nconst game = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    setUsername: (store, action) => {\n      localStorage.setItem('username', JSON.stringify(action.payload));\n      store.username = action.payload;\n    }\n  }\n});\nexport const advance = input => {\n  let isStart = input.type ? false : true;\n  let endpoint = \"\";\n  let postBody = {};\n  return (dispatch, getState) => {\n    const state = getState();\n\n    if (isStart) {\n      endpoint = \"start\";\n      postBody = JSON.stringify({\n        username: input\n      });\n    } else {\n      endpoint = \"action\";\n      postBody = JSON.stringify({\n        username: state.game.username,\n        type: input.type,\n        direction: input.direction\n      });\n      dispatch(game.actions.logAction(JSON.parse(postBody)));\n    }\n\n    dispatch(game.actions.setLoadProgress(33));\n    fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: postBody\n    }).then(res => {\n      dispatch(game.actions.setLoadProgress(55));\n      return res.json();\n    }).then(update => {\n      dispatch(game.actions.setLoadProgress(77));\n      return dispatch(game.actions.setGameState(update));\n    }).catch(error => dispatch(game.actions.setError(error.message))).finally(() => dispatch(game.actions.setLoadProgress(100)));\n  };\n};\nexport default game;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/src/reducers/cast.js"],"names":["createSlice","constants","initialItems","localStorage","getItem","JSON","parse","graph","characters","id","name","bio","bonds","source","target","summary","details","category","game","initialState","reducers","setUsername","store","action","setItem","stringify","payload","username","advance","input","isStart","type","endpoint","postBody","dispatch","getState","state","direction","actions","logAction","setLoadProgress","fetch","method","headers","body","then","res","json","update","setGameState","catch","error","setError","message","finally"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nimport constants from '../constants'\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: {},\r\n  characters: [\r\n    {\r\n      id: \"bhjabsdjbdjas\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"sakbkabkdbksb\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"vqweqwcxsadas\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n    {\r\n      source: \"bhjabsdjbdjas\",\r\n      target: \"sakbkabkdbksb\",\r\n      summary: \"lorem ipsum dolar sit amet?\",\r\n      details: \"when the cow became the sole distrubutor of pain, no one complained, at first...\",\r\n      category: constants[0]\r\n    },\r\n    {\r\n      source: \"vqweqwcxsadas\",\r\n      target: \"sakbkabkdbksb\",\r\n      summary: \"lorem IPSUUUUMMMM dolar sit amet!!!\",\r\n      details: \"when the cow became the sole distrubutor of pain, no one complained, at first...\",\r\n      category: constants[2]\r\n    }\r\n  ]\r\n}\r\n\r\nconst game = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    setUsername: (store, action) => {\r\n      localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.username = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const advance = (input) => {\r\n  let isStart = input.type ? false : true\r\n  let endpoint = \"\"\r\n  let postBody = {}\r\n\r\n  return (dispatch, getState) => {\r\n    const state = getState()\r\n    if (isStart) {\r\n      endpoint = \"start\"\r\n      postBody = JSON.stringify({\r\n        username: input\r\n      })\r\n    } else {\r\n      endpoint = \"action\"\r\n      postBody = JSON.stringify({\r\n        username: state.game.username,\r\n        type: input.type,\r\n        direction: input.direction\r\n      })\r\n      dispatch(game.actions.logAction(JSON.parse(postBody)))\r\n    }\r\n    dispatch(game.actions.setLoadProgress(33))\r\n    fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: postBody\r\n    })\r\n      .then(res => {\r\n        dispatch(game.actions.setLoadProgress(55))\r\n        return res.json()\r\n      })\r\n      .then(update => {\r\n        dispatch(game.actions.setLoadProgress(77))\r\n        return dispatch(game.actions.setGameState(update))\r\n      })\r\n      .catch(error => dispatch(game.actions.setError(error.message)))\r\n      .finally(() => dispatch(game.actions.setLoadProgress(100))) \r\n    }\r\n}\r\n\r\nexport default game"]},"metadata":{},"sourceType":"module"}