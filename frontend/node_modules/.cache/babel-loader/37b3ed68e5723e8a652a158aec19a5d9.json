{"ast":null,"code":"import { Line, Point } from '../g/index.mjs';\nimport { isPercentage } from '../util/index.mjs';\n\nfunction connectionRatio(view, _magnet, _refPoint, opt) {\n  var ratio = 'ratio' in opt ? opt.ratio : 0.5;\n  return view.getPointAtRatio(ratio);\n}\n\nfunction connectionLength(view, _magnet, _refPoint, opt) {\n  var length = 'length' in opt ? opt.length : 20;\n  return view.getPointAtLength(length);\n}\n\nfunction _connectionPerpendicular(view, _magnet, refPoint, opt) {\n  var OFFSET = 1e6;\n  var path = view.getConnection();\n  var segmentSubdivisions = view.getConnectionSubdivisions();\n  var verticalLine = new Line(refPoint.clone().offset(0, OFFSET), refPoint.clone().offset(0, -OFFSET));\n  var horizontalLine = new Line(refPoint.clone().offset(OFFSET, 0), refPoint.clone().offset(-OFFSET, 0));\n  var verticalIntersections = verticalLine.intersect(path, {\n    segmentSubdivisions: segmentSubdivisions\n  });\n  var horizontalIntersections = horizontalLine.intersect(path, {\n    segmentSubdivisions: segmentSubdivisions\n  });\n  var intersections = [];\n  if (verticalIntersections) Array.prototype.push.apply(intersections, verticalIntersections);\n  if (horizontalIntersections) Array.prototype.push.apply(intersections, horizontalIntersections);\n  if (intersections.length > 0) return refPoint.chooseClosest(intersections);\n\n  if ('fallbackAt' in opt) {\n    return getPointAtLink(view, opt.fallbackAt);\n  }\n\n  return connectionClosest(view, _magnet, refPoint, opt);\n}\n\nfunction _connectionClosest(view, _magnet, refPoint, _opt) {\n  var closestPoint = view.getClosestPoint(refPoint);\n  if (!closestPoint) return new Point();\n  return closestPoint;\n}\n\nexport function resolveRef(fn) {\n  return function (view, magnet, ref, opt) {\n    if (ref instanceof Element) {\n      var refView = this.paper.findView(ref);\n      var refPoint;\n\n      if (refView) {\n        if (refView.isNodeConnection(ref)) {\n          var distance = 'fixedAt' in opt ? opt.fixedAt : '50%';\n          refPoint = getPointAtLink(refView, distance);\n        } else {\n          refPoint = refView.getNodeBBox(ref).center();\n        }\n      } else {\n        // Something went wrong\n        refPoint = new Point();\n      }\n\n      return fn.call(this, view, magnet, refPoint, opt);\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nfunction getPointAtLink(view, value) {\n  var parsedValue = parseFloat(value);\n\n  if (isPercentage(value)) {\n    return view.getPointAtRatio(parsedValue / 100);\n  } else {\n    return view.getPointAtLength(parsedValue);\n  }\n} // joint.linkAnchors\n\n\nexport { connectionRatio, connectionLength };\nexport const connectionPerpendicular = resolveRef(_connectionPerpendicular);\nexport const connectionClosest = resolveRef(_connectionClosest);","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/node_modules/jointjs/src/linkAnchors/index.mjs"],"names":["Line","Point","isPercentage","connectionRatio","view","_magnet","_refPoint","opt","ratio","getPointAtRatio","connectionLength","length","getPointAtLength","_connectionPerpendicular","refPoint","OFFSET","path","getConnection","segmentSubdivisions","getConnectionSubdivisions","verticalLine","clone","offset","horizontalLine","verticalIntersections","intersect","horizontalIntersections","intersections","Array","prototype","push","apply","chooseClosest","getPointAtLink","fallbackAt","connectionClosest","_connectionClosest","_opt","closestPoint","getClosestPoint","resolveRef","fn","magnet","ref","Element","refView","paper","findView","isNodeConnection","distance","fixedAt","getNodeBBox","center","call","arguments","value","parsedValue","parseFloat","connectionPerpendicular"],"mappings":"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","sourcesContent":["import { Line, Point } from '../g/index.mjs';\nimport { isPercentage } from '../util/index.mjs';\n\nfunction connectionRatio(view, _magnet, _refPoint, opt) {\n\n    var ratio = ('ratio' in opt) ? opt.ratio : 0.5;\n    return view.getPointAtRatio(ratio);\n}\n\nfunction connectionLength(view, _magnet, _refPoint, opt) {\n\n    var length = ('length' in opt) ? opt.length : 20;\n    return view.getPointAtLength(length);\n}\n\nfunction _connectionPerpendicular(view, _magnet, refPoint, opt) {\n\n    var OFFSET = 1e6;\n    var path = view.getConnection();\n    var segmentSubdivisions = view.getConnectionSubdivisions();\n    var verticalLine = new Line(refPoint.clone().offset(0, OFFSET), refPoint.clone().offset(0, -OFFSET));\n    var horizontalLine = new Line(refPoint.clone().offset(OFFSET, 0), refPoint.clone().offset(-OFFSET, 0));\n    var verticalIntersections = verticalLine.intersect(path, { segmentSubdivisions: segmentSubdivisions });\n    var horizontalIntersections = horizontalLine.intersect(path, { segmentSubdivisions: segmentSubdivisions });\n    var intersections = [];\n    if (verticalIntersections) Array.prototype.push.apply(intersections, verticalIntersections);\n    if (horizontalIntersections) Array.prototype.push.apply(intersections, horizontalIntersections);\n    if (intersections.length > 0) return refPoint.chooseClosest(intersections);\n    if ('fallbackAt' in opt) {\n        return getPointAtLink(view, opt.fallbackAt);\n    }\n    return connectionClosest(view, _magnet, refPoint, opt);\n}\n\nfunction _connectionClosest(view, _magnet, refPoint, _opt) {\n\n    var closestPoint = view.getClosestPoint(refPoint);\n    if (!closestPoint) return new Point();\n    return closestPoint;\n}\n\nexport function resolveRef(fn) {\n    return function(view, magnet, ref, opt) {\n        if (ref instanceof Element) {\n            var refView = this.paper.findView(ref);\n            var refPoint;\n            if (refView) {\n                if (refView.isNodeConnection(ref)) {\n                    var distance = ('fixedAt' in opt) ? opt.fixedAt : '50%';\n                    refPoint = getPointAtLink(refView, distance);\n                } else {\n                    refPoint = refView.getNodeBBox(ref).center();\n                }\n            } else {\n                // Something went wrong\n                refPoint = new Point();\n            }\n            return fn.call(this, view, magnet, refPoint, opt);\n        }\n        return fn.apply(this, arguments);\n    };\n}\n\nfunction getPointAtLink(view, value) {\n    var parsedValue = parseFloat(value);\n    if (isPercentage(value)) {\n        return view.getPointAtRatio(parsedValue / 100);\n    } else {\n        return view.getPointAtLength(parsedValue);\n    }\n}\n\n// joint.linkAnchors\nexport { connectionRatio, connectionLength };\nexport const connectionPerpendicular = resolveRef(_connectionPerpendicular);\nexport const connectionClosest = resolveRef(_connectionClosest);\n"]},"metadata":{},"sourceType":"module"}