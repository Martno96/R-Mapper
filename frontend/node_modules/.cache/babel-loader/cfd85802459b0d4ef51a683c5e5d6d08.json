{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport * as joint from 'jointjs';\nimport { shapes, dia } from 'jointjs';\nimport * as standard from 'jointjs/src/shapes/standard.mjs';\nimport { bondCategories } from '../constants'; // window.joint = joint\n// graph: () => {\n//   let graph = new joint.dia.Graph\n//   graph.toJSON()\n//   return graph\n// },\n// console.log(joint.shapes)\n\nlet initGraph = new joint.dia.Graph({}, {\n  cellNamespace: joint.shapes\n}); // let rectio = new joint.shapes.standard.Rectangle()\n// rectio.position(150, 50)\n// rectio.resize(100, 40)\n// rectio.attr({\n//   body: {\n//     fill: 'green'\n//   },\n//   label: {\n//     text: 'bob',\n//     fill: 'white'\n//   }\n// })\n// // console.log(rectio)\n// rectio.addTo(initGraph)\n\nconsole.log(\"--- Initialized graph in redux store! ---\");\nlet jsonGraph = initGraph.toJSON(initGraph); // console.log(jsonGraph)\n// console.log(JSON.stringify(jsonGraph))\n// const parsy = JSON.stringify(jsonGraph)\n// console.log(JSON.parse(parsy))\n\nconsole.log(nanoid());\nconsole.log(nanoid());\nconsole.log(nanoid());\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: JSON.stringify(jsonGraph),\n  characters: [{\n    id: \"oy4jF4qTIzpHvEWS6xbk4\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"_Cdw9IYAXc-41miSlO5Xr\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"PUX_muVoY4tHA2Dy-0gOX\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: [{\n    id: nanoid(),\n    category: \"Familial Bonds\",\n    source: \"Plonky\",\n    subtype: \"has kids with\",\n    target: \"Smirgus\",\n    summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\n  }],\n  first: 0\n};\nexport const cast = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    addCharacter: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      store.characters = [...store.characters, {\n        id: nanoid(),\n        name: action.payload.name,\n        bio: action.payload.bio\n      }];\n    },\n    addBond: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      //validate that values are okay\n      if (typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.source === 'string' && action.payload.source !== '' && typeof action.payload.subtype === 'string' && action.payload.subtype !== '' && typeof action.payload.target === 'string' && action.payload.target !== '' && typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.details === 'string' && action.payload.details !== '') {\n        store.bonds = [...store.bonds, {\n          id: nanoid(),\n          category: action.payload.category,\n          source: action.payload.source,\n          subtype: action.payload.subtype,\n          target: action.payload.target,\n          summary: action.payload.details\n        }];\n      } else {\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\");\n        console.log(action.payload.category);\n        console.log(action.payload.source);\n        console.log(action.payload.subtype);\n        console.log(action.payload.target);\n        console.log(action.payload.details);\n      }\n    },\n    loadGraph: (store, action) => {},\n    saveGraph: (store, action) => {},\n    drawMap: (store, action) => {\n      console.log(\"--- drawMap reducer called! ---\");\n      const elementPositionsToRetainV2 = action.payload.model.getElements().map(element => {\n        return element.get('position');\n      });\n      console.log(\"elementPositionsToRetainV2\");\n      console.log(elementPositionsToRetainV2);\n      console.log(\"paper model\");\n      console.log(action.payload.model.toJSON()); //NOTE: the goal for this here array SHOULD BE to get the NEW coordinates for each CHARACTER\n      //in the character ARRAY! :D (wait but what about Bonds???? they will have positons too right?)\n\n      console.log(\"getElements()\");\n      console.log(action.payload.model.getElements());\n      const elementPositionsToRetain = action.payload.model.getElements().map(element => {\n        if (element.attributes.type === \"standard.Ellipse\") {\n          return {\n            type: \"character\",\n            name: element.attributes.attrs.label.text,\n            position: element.getBBox().center()\n          };\n        } else if (element.attributes.type === \"standard.Rectangle\") {\n          return {\n            type: \"bond details\",\n            position: element.getBBox().center()\n          };\n        } else {\n          return {};\n        }\n      }); // const elementPositionsToRetain = action.payload.model.toJSON().cells.map(cell => {\n      //   if (cell.type === \"standard.Rectangle\") {\n      //     return { type: \"character\", name: cell.attrs.label.text, position: cell.getBBox().center() }\n      //   } else if (cell.type === \"standard.Ellipse\") {\n      //     return { type: \"bond details\", position: cell.getBBox().center() }\n      //   } else {\n      //     return {}\n      //   }\n      // })\n\n      console.log(\"positions to retain array:\");\n      console.log(elementPositionsToRetain); //ISSUE(?): using the characters array as a forEach below is problematic because\n      //the character array won't map 1-to-1 with the cells array in the graph, since cells \n      //A) include Links too and B) also may not be in the same order as the characters \n      //in the characters array\n      //No, wait... if I simply itterate through the characters array and at each character\n      //find the Element in the stored graph with the same label as the character name, then\n      //I can at the same time\n      //Potential fixes:\n      //> itterate using the STORED GRAPH cells array instead, but check if it is an Element or a Link,\n      // then accordingly do what? If it is an Element it must be a character, so\n      // let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\n      // updatedGraph.fromJSON(JSON.parse(store.graph)) //get existing graph from store\n      // updatedGraph.clear()\n      // console.log(\"Unpacked store graph:\")\n      // console.log(updatedGraph)\n      //draw Characters\n\n      store.characters.forEach((character, index) => {\n        let positionX, positionY;\n\n        if (elementPositionsToRetain.find(element => element.name === character.name) !== undefined) {\n          //element is already in graph since previously\n          console.log(\"found element\");\n          positionX = elementPositionsToRetain.find(element => element.name === character.name).position.x;\n          positionY = elementPositionsToRetain.find(element => element.name === character.name).position.y;\n        } else {\n          //character is new and should be added to graph\n          console.log(\"new element\");\n          positionX = index * 40;\n          positionY = index * 40;\n          let rect = new joint.shapes.standard.Ellipse();\n          rect.position(positionX, positionY); //instead read positions from corresponding graph in payload (model)\n\n          rect.resize(100, 40);\n          rect.attr({\n            body: {\n              fill: 'grey',\n              refRx: '60%',\n              refRy: '100%'\n            },\n            label: {\n              text: character.name,\n              fill: 'white',\n              fontSize: 18\n            }\n          });\n          rect.addTo(action.payload.model);\n        }\n\n        console.log(`x: ${positionX}`);\n        console.log(`y: ${positionY}`);\n      }); //draw Bonds\n\n      const linkLabelMarkup = [{\n        tagName: 'rect',\n        selector: 'body'\n      }, {\n        tagName: 'text',\n        selector: 'label'\n      }];\n      const linkPathMarkup = [{\n        tagName: 'path',\n        selector: 'line'\n      }];\n      store.bonds.forEach((bond, index) => {\n        const sourceElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.source);\n        const targetElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.target);\n        let link = new joint.shapes.standard.Link({\n          markup: linkPathMarkup,\n          attrs: {\n            line: {\n              fill: 'none',\n              stroke: '#808080',\n              strokeWidth: 2\n            }\n          }\n        }); // link.opacity()\n\n        link.source(sourceElement, {\n          connectionPoint: {\n            name: 'boundary',\n            args: {\n              offset: 10,\n              stroke: true\n            }\n          }\n        });\n        link.target(targetElement, {\n          connectionPoint: {\n            name: 'boundary',\n            args: {\n              offset: 10,\n              stroke: true\n            }\n          }\n        });\n        link.router('normal');\n        link.appendLabel({\n          markup: linkLabelMarkup,\n          attrs: {\n            label: {\n              text: bond.subtype,\n              fill: '#000000',\n              fontSize: 16,\n              textAnchor: 'middle',\n              yAlignment: 'middle',\n              pointerEvents: 'none'\n            },\n            body: {\n              ref: 'label',\n              refX: '0%',\n              x: 50,\n              // additional x offset\n              refY: '0%',\n              y: 50,\n              // additional y offset\n              refWidth: '150%',\n              refHeight: '200%',\n              fill: '#ffffff',\n              opacity: '100%',\n              stroke: '#c3c3c3',\n              strokeWidth: 2 // refRx: '75%',\n              // refRy: '220%',\n              // refCx: 0,\n              // refCy: 0\n\n            }\n          } // bondSubtype: {\n          //   text: bond.subtype,\n          //   fill: '#000000',\n          //   fontSize: 14,\n          //   textAnchor: 'middle',\n          //   yAlignment: 'middle',\n          //   pointerEvents: 'none'\n          // },\n          // bondNodeBody: {\n          //   fill: '#ffffff',\n          //   stroke: '#000000',\n          //   strokeWidth: 1\n          // }\n\n        });\n        link.addTo(action.payload.model);\n      });\n      console.log(action.payload.model.toJSON());\n      console.log(\"--- Stored graph in redux store! ---\");\n      store.graph = JSON.stringify(action.payload.model.toJSON()); //update store\n    },\n    clearFirst: (store, action) => {\n      store.first++;\n    }\n  }\n}); // drawCharacters: (store, action) => {\n//   console.log(\"draw character\")\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\n//   // console.log(JSON.parse(store.graph))\n//   updatedGraph.fromJSON(JSON.parse(store.graph)) //get existing graph from store\n//  // console.log(updatedGraph)\n//   store.characters.forEach((character, index) => {\n//     let rect = new joint.shapes.standard.Rectangle();\n//     rect.position(150+index*10, 50+index*10);\n//     rect.resize(100, 40);\n//     rect.attr({\n//       body: {\n//         fill: 'green'\n//       },\n//       label: {\n//         text: character.name,\n//         fill: 'white'\n//       }\n//     });\n//    // console.log(rect)\n//     rect.addTo(updatedGraph)\n//    // console.log(`added ${character.name} to graph!`)\n//   })\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\n// },\n// drawBonds: (store, action) => {\n//   console.log(\"is running? Uwu\")\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\n//   updatedGraph.fromJSON(store.graph) //get existing graph from store\n//   const characterElements = updatedGraph.getElements()\n//   // const markup = [\n//   //   {\n//   //     tagName: 'bond-node-body',\n//   //     selector: 'body'\n//   //   }, {\n//   //     tagName: 'bond-summary-text',\n//   //     selector: 'label'\n//   //   }\n//   // ]\n//   store.bonds.forEach((bond, index) => {\n//     const sourceElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.source)\n//     const targetElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.target)\n//    // console.log(sourceElement)\n//    // console.log(targetElement)\n//     //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\n//     // const sourceElement = store.characters.find(character => character.id === bond.source)\n//     // const targetElement = store.characters.find(character => character.id === bond.target)\n//     //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\n//     //search among character Elements in graph using the label name of bond.source etc.\n//     let link = new joint.shapes.standard.Link();\n//     link.source(sourceElement);\n//     link.target(targetElement);\n//     link.appendLabel({\n//       attrs: {\n//         text: {\n//           text: bond.subtype\n//         }\n//       }\n//     })\n//     link.addTo(updatedGraph)\n//   })\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\n// },\n// drawTest: (store, action) => {\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\n//   updatedGraph.fromJSON(store.graph) //get existing graph from store\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\n// },\n// console.log(\"updatedGraph.getElements():\")\n// console.log(updatedGraph.getElements())\n// console.log(\"Bond details:\")\n// console.log(bond.details)\n// console.log(\"Bond sourceElement:\")\n// console.log(sourceElement)\n// console.log(\"Bond targetElement:\")\n// console.log(targetElement)\n\nexport const saveChanges = input => {// let isStart = input.type ? false : true\n  // let endpoint = \"\"\n  // let postBody = {}\n  // return (dispatch, getState) => {\n  //   const state = getState()\n  //   if (isStart) {\n  //     endpoint = \"start\"\n  //     postBody = JSON.stringify({\n  //       username: input\n  //     })\n  //   } else {\n  //     endpoint = \"action\"\n  //     postBody = JSON.stringify({\n  //       username: state.game.username,\n  //       type: input.type,\n  //       direction: input.direction\n  //     })\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\n  //   }\n  //   dispatch(game.actions.setLoadProgress(33))\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       'Content-Type': 'application/json;charset=utf-8'\n  //     },\n  //     body: postBody\n  //   })\n  //     .then(res => {\n  //       dispatch(game.actions.setLoadProgress(55))\n  //       return res.json()\n  //     })\n  //     .then(update => {\n  //       dispatch(game.actions.setLoadProgress(77))\n  //       return dispatch(game.actions.setGameState(update))\n  //     })\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \n  //   }\n};\nexport default cast;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/reducers/cast.js"],"names":["createSlice","nanoid","joint","shapes","dia","standard","bondCategories","initGraph","Graph","cellNamespace","console","log","jsonGraph","toJSON","initialItems","localStorage","getItem","JSON","parse","graph","stringify","characters","id","name","bio","bonds","category","source","subtype","target","summary","first","cast","initialState","reducers","addCharacter","store","action","payload","addBond","details","error","loadGraph","saveGraph","drawMap","elementPositionsToRetainV2","model","getElements","map","element","get","elementPositionsToRetain","attributes","type","attrs","label","text","position","getBBox","center","forEach","character","index","positionX","positionY","find","undefined","x","y","rect","Ellipse","resize","attr","body","fill","refRx","refRy","fontSize","addTo","linkLabelMarkup","tagName","selector","linkPathMarkup","bond","sourceElement","targetElement","link","Link","markup","line","stroke","strokeWidth","connectionPoint","args","offset","router","appendLabel","textAnchor","yAlignment","pointerEvents","ref","refX","refY","refWidth","refHeight","opacity","clearFirst","saveChanges","input"],"mappings":"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CG,SAAL,CAAeiB,MAAM,CAACC,OAAP,CAAeQ,KAAf,CAAqBjC,MAArB,EAAf,CAAd,CA9L0B,CA8LkC;AAC7D,KA3OO;AA4OR6F,IAAAA,UAAU,EAAE,CAACtE,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,KAAN;AACD;AA9OO;AAHqB,CAAF,CAAxB,C,CAqPP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM4E,WAAW,GAAIC,KAAD,IAAW,CACpC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAxCM;AA0CP,eAAe5E,IAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { nanoid } from 'nanoid'\r\nimport * as joint from 'jointjs'\r\nimport { shapes, dia } from 'jointjs'\r\nimport * as standard from 'jointjs/src/shapes/standard.mjs'\r\n\r\n\r\nimport { bondCategories } from '../constants'\r\n\r\n// window.joint = joint\r\n// graph: () => {\r\n//   let graph = new joint.dia.Graph\r\n//   graph.toJSON()\r\n//   return graph\r\n// },\r\n// console.log(joint.shapes)\r\nlet initGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes })\r\n\r\n// let rectio = new joint.shapes.standard.Rectangle()\r\n// rectio.position(150, 50)\r\n// rectio.resize(100, 40)\r\n// rectio.attr({\r\n//   body: {\r\n//     fill: 'green'\r\n//   },\r\n//   label: {\r\n//     text: 'bob',\r\n//     fill: 'white'\r\n//   }\r\n// })\r\n// // console.log(rectio)\r\n// rectio.addTo(initGraph)\r\n\r\nconsole.log(\"--- Initialized graph in redux store! ---\")\r\nlet jsonGraph = initGraph.toJSON(initGraph)\r\n// console.log(jsonGraph)\r\n// console.log(JSON.stringify(jsonGraph))\r\n// const parsy = JSON.stringify(jsonGraph)\r\n// console.log(JSON.parse(parsy))\r\nconsole.log(nanoid())\r\nconsole.log(nanoid())\r\nconsole.log(nanoid())\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: JSON.stringify(jsonGraph),\r\n  characters: [\r\n    {\r\n      id: \"oy4jF4qTIzpHvEWS6xbk4\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"_Cdw9IYAXc-41miSlO5Xr\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"PUX_muVoY4tHA2Dy-0gOX\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n    {\r\n      id: nanoid(),\r\n      category: \"Familial Bonds\",\r\n      source: \"Plonky\",\r\n      subtype: \"has kids with\",\r\n      target: \"Smirgus\",\r\n      summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\r\n    }\r\n  ],\r\n  first: 0\r\n}\r\n\r\nexport const cast = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    addCharacter: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.characters = [...store.characters, {\r\n        id: nanoid(),\r\n        name: action.payload.name,\r\n        bio: action.payload.bio\r\n      }]\r\n    },\r\n    addBond: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      \r\n      //validate that values are okay\r\n      if (\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.source === 'string' && action.payload.source !== '' &&\r\n        typeof action.payload.subtype === 'string' && action.payload.subtype !== '' &&\r\n        typeof action.payload.target === 'string' && action.payload.target !== '' &&\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.details === 'string' && action.payload.details !== ''\r\n      ) {\r\n        store.bonds = [...store.bonds, {\r\n          id: nanoid(),\r\n          category: action.payload.category,\r\n          source: action.payload.source,\r\n          subtype: action.payload.subtype,\r\n          target: action.payload.target,\r\n          summary: action.payload.details\r\n        }]\r\n      } else {\r\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\")\r\n        console.log(action.payload.category)\r\n        console.log(action.payload.source)\r\n        console.log(action.payload.subtype)\r\n        console.log(action.payload.target)\r\n        console.log(action.payload.details)\r\n      }\r\n    },\r\n    loadGraph: (store, action) => {\r\n\r\n    },\r\n    saveGraph: (store, action) => {\r\n\r\n    },\r\n    drawMap: (store, action) => {\r\n      console.log(\"--- drawMap reducer called! ---\")\r\n\r\n      const elementPositionsToRetainV2 = action.payload.model.getElements().map(element => {\r\n        return element.get('position')\r\n      })\r\n\r\n      console.log(\"elementPositionsToRetainV2\")\r\n      console.log(elementPositionsToRetainV2)\r\n\r\n      console.log(\"paper model\")\r\n      console.log(action.payload.model.toJSON())\r\n\r\n      //NOTE: the goal for this here array SHOULD BE to get the NEW coordinates for each CHARACTER\r\n      //in the character ARRAY! :D (wait but what about Bonds???? they will have positons too right?)\r\n      console.log(\"getElements()\")\r\n      console.log(action.payload.model.getElements())\r\n      \r\n      const elementPositionsToRetain = action.payload.model.getElements().map(element => {\r\n        if (element.attributes.type === \"standard.Ellipse\") {\r\n          return { type: \"character\", name: element.attributes.attrs.label.text, position: element.getBBox().center() }\r\n        } else if (element.attributes.type === \"standard.Rectangle\") {\r\n          return { type: \"bond details\", position: element.getBBox().center() }\r\n        } else {\r\n          return {}\r\n        }\r\n      })\r\n\r\n      // const elementPositionsToRetain = action.payload.model.toJSON().cells.map(cell => {\r\n      //   if (cell.type === \"standard.Rectangle\") {\r\n      //     return { type: \"character\", name: cell.attrs.label.text, position: cell.getBBox().center() }\r\n      //   } else if (cell.type === \"standard.Ellipse\") {\r\n      //     return { type: \"bond details\", position: cell.getBBox().center() }\r\n      //   } else {\r\n      //     return {}\r\n      //   }\r\n      // })\r\n      console.log(\"positions to retain array:\")\r\n      console.log(elementPositionsToRetain)\r\n\r\n          //ISSUE(?): using the characters array as a forEach below is problematic because\r\n          //the character array won't map 1-to-1 with the cells array in the graph, since cells \r\n          //A) include Links too and B) also may not be in the same order as the characters \r\n          //in the characters array\r\n          //No, wait... if I simply itterate through the characters array and at each character\r\n          //find the Element in the stored graph with the same label as the character name, then\r\n          //I can at the same time\r\n          //Potential fixes:\r\n          //> itterate using the STORED GRAPH cells array instead, but check if it is an Element or a Link,\r\n          // then accordingly do what? If it is an Element it must be a character, so\r\n\r\n      // let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\r\n      // updatedGraph.fromJSON(JSON.parse(store.graph)) //get existing graph from store\r\n      // updatedGraph.clear()\r\n      // console.log(\"Unpacked store graph:\")\r\n      // console.log(updatedGraph)\r\n\r\n      //draw Characters\r\n      store.characters.forEach((character, index) => {\r\n        let positionX, positionY\r\n        if (elementPositionsToRetain.find(element => element.name === character.name) !== undefined) {\r\n          //element is already in graph since previously\r\n          console.log(\"found element\")\r\n          positionX = elementPositionsToRetain.find(element => element.name === character.name).position.x\r\n          positionY = elementPositionsToRetain.find(element => element.name === character.name).position.y\r\n        } else {\r\n          //character is new and should be added to graph\r\n          console.log(\"new element\")\r\n          positionX = index*40\r\n          positionY = index*40\r\n          let rect = new joint.shapes.standard.Ellipse();\r\n          rect.position(positionX, positionY); //instead read positions from corresponding graph in payload (model)\r\n          rect.resize(100, 40);\r\n          rect.attr({\r\n            body: {\r\n              fill: 'grey',\r\n              refRx: '60%',\r\n              refRy: '100%'\r\n            },\r\n            label: {\r\n              text: character.name,\r\n              fill: 'white',\r\n              fontSize: 18\r\n            }\r\n          });\r\n        rect.addTo(action.payload.model)\r\n        }\r\n        console.log(`x: ${positionX}`)\r\n        console.log(`y: ${positionY}`)        \r\n      })\r\n\r\n      //draw Bonds\r\n      const linkLabelMarkup = [\r\n        {\r\n          tagName: 'rect',\r\n          selector: 'body'\r\n        }, {\r\n          tagName: 'text',\r\n          selector: 'label'\r\n        }\r\n      ]\r\n\r\n      const linkPathMarkup = [\r\n        {\r\n          tagName: 'path',\r\n          selector: 'line'\r\n        }\r\n      ]\r\n\r\n      store.bonds.forEach((bond, index) => {\r\n        const sourceElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.source)\r\n        const targetElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.target)\r\n        let link = new joint.shapes.standard.Link({\r\n          markup: linkPathMarkup,\r\n          attrs: {\r\n            line: {\r\n              fill: 'none',\r\n              stroke: '#808080',\r\n              strokeWidth: 2\r\n            }\r\n          }\r\n        });\r\n        // link.opacity()\r\n        link.source(sourceElement, {\r\n          connectionPoint: {\r\n            name: 'boundary',\r\n            args: {\r\n                offset: 10,\r\n                stroke: true\r\n            }\r\n          }\r\n        })\r\n        link.target(targetElement, {\r\n          connectionPoint: {\r\n            name: 'boundary',\r\n            args: {\r\n                offset: 10,\r\n                stroke: true\r\n            }\r\n          }\r\n        })\r\n        link.router('normal')\r\n        link.appendLabel({\r\n          markup: linkLabelMarkup,\r\n          attrs: {\r\n            label: {\r\n              text: bond.subtype,\r\n              fill: '#000000',\r\n              fontSize: 16,\r\n              textAnchor: 'middle',\r\n              yAlignment: 'middle',\r\n              pointerEvents: 'none'\r\n            },\r\n            body: {\r\n              ref: 'label',\r\n              refX: '0%',\r\n              x: 50, // additional x offset\r\n              refY: '0%',\r\n              y: 50, // additional y offset\r\n              refWidth: '150%',\r\n              refHeight: '200%',\r\n              fill: '#ffffff',\r\n              opacity: '100%',\r\n              stroke: '#c3c3c3',\r\n              strokeWidth: 2\r\n              // refRx: '75%',\r\n              // refRy: '220%',\r\n              // refCx: 0,\r\n              // refCy: 0\r\n            }\r\n          }\r\n          // bondSubtype: {\r\n          //   text: bond.subtype,\r\n          //   fill: '#000000',\r\n          //   fontSize: 14,\r\n          //   textAnchor: 'middle',\r\n          //   yAlignment: 'middle',\r\n          //   pointerEvents: 'none'\r\n          // },\r\n          // bondNodeBody: {\r\n\r\n          //   fill: '#ffffff',\r\n          //   stroke: '#000000',\r\n          //   strokeWidth: 1\r\n          // }\r\n        })\r\n        link.addTo(action.payload.model)\r\n      })\r\n      console.log(action.payload.model.toJSON())\r\n      console.log(\"--- Stored graph in redux store! ---\")\r\n      store.graph = JSON.stringify(action.payload.model.toJSON()) //update store\r\n    },\r\n    clearFirst: (store, action) => {\r\n      store.first++\r\n    }\r\n  }\r\n})\r\n\r\n// drawCharacters: (store, action) => {\r\n//   console.log(\"draw character\")\r\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\r\n//   // console.log(JSON.parse(store.graph))\r\n\r\n//   updatedGraph.fromJSON(JSON.parse(store.graph)) //get existing graph from store\r\n//  // console.log(updatedGraph)\r\n//   store.characters.forEach((character, index) => {\r\n//     let rect = new joint.shapes.standard.Rectangle();\r\n//     rect.position(150+index*10, 50+index*10);\r\n//     rect.resize(100, 40);\r\n//     rect.attr({\r\n//       body: {\r\n//         fill: 'green'\r\n//       },\r\n//       label: {\r\n//         text: character.name,\r\n//         fill: 'white'\r\n//       }\r\n//     });\r\n//    // console.log(rect)\r\n//     rect.addTo(updatedGraph)\r\n//    // console.log(`added ${character.name} to graph!`)\r\n//   })\r\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\r\n// },\r\n// drawBonds: (store, action) => {\r\n//   console.log(\"is running? Uwu\")\r\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\r\n//   updatedGraph.fromJSON(store.graph) //get existing graph from store\r\n//   const characterElements = updatedGraph.getElements()\r\n\r\n//   // const markup = [\r\n//   //   {\r\n//   //     tagName: 'bond-node-body',\r\n//   //     selector: 'body'\r\n//   //   }, {\r\n//   //     tagName: 'bond-summary-text',\r\n//   //     selector: 'label'\r\n//   //   }\r\n//   // ]\r\n\r\n//   store.bonds.forEach((bond, index) => {\r\n//     const sourceElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.source)\r\n//     const targetElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.target)\r\n//    // console.log(sourceElement)\r\n//    // console.log(targetElement)\r\n//     //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\r\n//     // const sourceElement = store.characters.find(character => character.id === bond.source)\r\n//     // const targetElement = store.characters.find(character => character.id === bond.target)\r\n\r\n//     //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\r\n//     //search among character Elements in graph using the label name of bond.source etc.\r\n\r\n//     let link = new joint.shapes.standard.Link();\r\n//     link.source(sourceElement);\r\n//     link.target(targetElement);\r\n//     link.appendLabel({\r\n//       attrs: {\r\n//         text: {\r\n//           text: bond.subtype\r\n//         }\r\n//       }\r\n//     })\r\n//     link.addTo(updatedGraph)\r\n//   })\r\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\r\n// },\r\n// drawTest: (store, action) => {\r\n//   let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes }) //init new graph instance\r\n//   updatedGraph.fromJSON(store.graph) //get existing graph from store\r\n  \r\n//   store.graph = JSON.stringify(updatedGraph.toJSON()) //update store\r\n// },\r\n\r\n\r\n// console.log(\"updatedGraph.getElements():\")\r\n// console.log(updatedGraph.getElements())\r\n// console.log(\"Bond details:\")\r\n// console.log(bond.details)\r\n// console.log(\"Bond sourceElement:\")\r\n// console.log(sourceElement)\r\n// console.log(\"Bond targetElement:\")\r\n// console.log(targetElement)\r\n\r\nexport const saveChanges = (input) => {\r\n  // let isStart = input.type ? false : true\r\n  // let endpoint = \"\"\r\n  // let postBody = {}\r\n\r\n  // return (dispatch, getState) => {\r\n  //   const state = getState()\r\n  //   if (isStart) {\r\n  //     endpoint = \"start\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: input\r\n  //     })\r\n  //   } else {\r\n  //     endpoint = \"action\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: state.game.username,\r\n  //       type: input.type,\r\n  //       direction: input.direction\r\n  //     })\r\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\r\n  //   }\r\n  //   dispatch(game.actions.setLoadProgress(33))\r\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: postBody\r\n  //   })\r\n  //     .then(res => {\r\n  //       dispatch(game.actions.setLoadProgress(55))\r\n  //       return res.json()\r\n  //     })\r\n  //     .then(update => {\r\n  //       dispatch(game.actions.setLoadProgress(77))\r\n  //       return dispatch(game.actions.setGameState(update))\r\n  //     })\r\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\r\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \r\n  //   }\r\n}\r\n\r\nexport default cast"]},"metadata":{},"sourceType":"module"}