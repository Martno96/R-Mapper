{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\martn\\\\Documents\\\\New Documents 2019\\\\Technigo codin\\\\storymapper spreadsheet\\\\my-app\\\\src\\\\components\\\\CharacterNameAutoComplete.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport NewCharacterForm from './NewCharacterForm';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport const CharacterNameAutoComplete = ({\n  label,\n  value,\n  onChange\n}) => {\n  _s();\n\n  // const [value, setValue] = React.useState(null);\n  const characters = useSelector(store => store.cast.characters);\n  const [open, toggleOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: ''\n    });\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: ''\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10)\n    });\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          // timeout to avoid instant validation of the dialog's form.\n          setTimeout(() => {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue,\n              year: ''\n            });\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true);\n          setDialogValue({\n            title: newValue.inputValue,\n            year: ''\n          });\n        } else {\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      id: \"free-solo-dialog-demo\",\n      options: characters,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n\n        return option.title;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: option => option.title,\n      style: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Free solo dialog\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewCharacterForm, {\n      open: open,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CharacterNameAutoComplete, \"Lb8lFSS/l5NaZfol1Y2ttHbkcNM=\", false, function () {\n  return [useSelector];\n});\n\n_c = CharacterNameAutoComplete;\nexport default CharacterNameAutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharacterNameAutoComplete\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/src/components/CharacterNameAutoComplete.js"],"names":["React","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Autocomplete","createFilterOptions","NewCharacterForm","useSelector","filter","CharacterNameAutoComplete","label","value","onChange","characters","store","cast","open","toggleOpen","useState","handleClose","setDialogValue","title","year","dialogValue","handleSubmit","event","preventDefault","setValue","parseInt","newValue","setTimeout","inputValue","options","params","filtered","push","option","width"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport NewCharacterForm from './NewCharacterForm';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport const CharacterNameAutoComplete = ({ label, value, onChange }) => {\r\n  // const [value, setValue] = React.useState(null);\r\n  const characters = useSelector(store => store.cast.characters)\r\n  const [open, toggleOpen] = React.useState(false);\r\n\r\n  const handleClose = () => {\r\n    setDialogValue({\r\n      title: '',\r\n      year: '',\r\n    });\r\n\r\n    toggleOpen(false);\r\n  };\r\n\r\n  const [dialogValue, setDialogValue] = React.useState({\r\n    title: '',\r\n    year: '',\r\n  });\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValue({\r\n      title: dialogValue.title,\r\n      year: parseInt(dialogValue.year, 10),\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          if (typeof newValue === 'string') {\r\n            // timeout to avoid instant validation of the dialog's form.\r\n            setTimeout(() => {\r\n              toggleOpen(true);\r\n              setDialogValue({\r\n                title: newValue,\r\n                year: '',\r\n              });\r\n            });\r\n          } else if (newValue && newValue.inputValue) {\r\n            toggleOpen(true);\r\n            setDialogValue({\r\n              title: newValue.inputValue,\r\n              year: '',\r\n            });\r\n          } else {\r\n            setValue(newValue);\r\n          }\r\n        }}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n\r\n          if (params.inputValue !== '') {\r\n            filtered.push({\r\n              inputValue: params.inputValue,\r\n              title: `Add \"${params.inputValue}\"`,\r\n            });\r\n          }\r\n\r\n          return filtered;\r\n        }}\r\n        id=\"free-solo-dialog-demo\"\r\n        options={characters}\r\n        getOptionLabel={(option) => {\r\n          // e.g value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          return option.title;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        renderOption={(option) => option.title}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Free solo dialog\" variant=\"outlined\" />\r\n        )}\r\n      />\r\n      <NewCharacterForm \r\n        open={open} handleClose={handleClose}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CharacterNameAutoComplete"]},"metadata":{},"sourceType":"module"}