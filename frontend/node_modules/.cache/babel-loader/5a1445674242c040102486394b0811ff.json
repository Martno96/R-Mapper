{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport * as joint from 'jointjs';\nlet initGraph = new joint.dia.Graph({}, {\n  cellNamespace: joint.shapes\n});\nlet jsonGraph = initGraph.toJSON(initGraph);\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: JSON.stringify(jsonGraph),\n  characters: [{\n    id: \"oy4jF4qTIzpHvEWS6xbk4\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"_Cdw9IYAXc-41miSlO5Xr\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"PUX_muVoY4tHA2Dy-0gOX\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: [{\n    id: nanoid(),\n    category: \"Social conflicts\",\n    source: \"Plonky\",\n    subtype: \"wants to be respected by\",\n    target: \"Smirgus\",\n    summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: nanoid(),\n    category: \"Official Bonds\",\n    source: \"Smirgus\",\n    subtype: \"polices\",\n    target: \"Virp\",\n    summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: nanoid(),\n    category: \"Social conflicts\",\n    source: \"Virp\",\n    subtype: \"seeks approval from\",\n    target: \"Plonky\",\n    summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\n  }],\n  first: 0\n};\nexport const cast = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    addCharacter: (store, action) => {\n      store.characters = [...store.characters, {\n        id: nanoid(),\n        name: action.payload.name,\n        bio: action.payload.bio\n      }];\n    },\n    removeCharacter: (store, action) => {\n      const bondsWithoutRemovedCharacter = store.bonds.map(bond => {\n        if (bond.source === action.payload.name) {\n          return Object.assign({}, bond, {\n            source: \"???\"\n          });\n        } else if (bond.target === action.payload.name) {\n          return Object.assign({}, bond, {\n            target: \"???\"\n          });\n        } else {\n          return bond;\n        }\n      });\n      store.bonds = [...bondsWithoutRemovedCharacter];\n      const charactersWithoutRemovedCharacter = store.characters.filter(character => character.name !== action.payload.name);\n      store.characters = [...charactersWithoutRemovedCharacter];\n    },\n    addBond: (store, action) => {\n      //validation of input\n      if (typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.source === 'string' && action.payload.source !== '' && typeof action.payload.subtype === 'string' && action.payload.subtype !== '' && typeof action.payload.target === 'string' && action.payload.target !== '' && typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.details === 'string' && action.payload.details !== '') {\n        store.bonds = [...store.bonds, {\n          id: nanoid(),\n          category: action.payload.category,\n          source: action.payload.source,\n          subtype: action.payload.subtype,\n          target: action.payload.target,\n          summary: action.payload.details\n        }];\n      } else {\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\");\n        console.log(action.payload.category);\n        console.log(action.payload.source);\n        console.log(action.payload.subtype);\n        console.log(action.payload.target);\n        console.log(action.payload.details);\n      }\n    },\n    drawMap: (store, action) => {\n      //log the current positions (now redundant, but can't risk refactoring last minute!)\n      // const elementPositionsToRetain = action.payload.model.getElements().map(element => {\n      //   if (element.attributes.type === \"standard.Ellipse\") {\n      //     return { type: \"character\", name: element.attributes.attrs.label.text, position: element.getBBox().center() }\n      //   } else if (element.attributes.type === \"standard.Rectangle\") {\n      //     return { type: \"bond details\", position: element.getBBox().center() }\n      //   } else {\n      //     return {}\n      //   }\n      // })\n      //remove unwanted Characters from graph\n      action.payload.model.toJSON().cells.forEach(characterElement => {\n        if (store.characters.find(character => character.name === characterElement.attributes.attrs.label.text) === undefined) {\n          characterElement.remove();\n        }\n      });\n      console.log(action.payload.model.toJSON()); //draw Characters\n\n      store.characters.forEach((character, index) => {\n        let positionX, positionY; //if (elementPositionsToRetain.find(element => element.name === character.name) !== undefined) {\n\n        if (action.payload.model.getElements().find(element => element.name === character.name) !== undefined) {//(now redundant, but can't risk refactoring last minute!)\n          //element is already in graph since previously\n          // positionX = elementPositionsToRetain.find(element => element.name === character.name).position.x\n          // positionY = elementPositionsToRetain.find(element => element.name === character.name).position.y\n        } else {\n          //character is new and should be added to graph\n          let positionX = index * 100;\n          let positionY = index * 100;\n          let characterElement = new joint.shapes.standard.Ellipse();\n          characterElement.position(positionX, positionY);\n          characterElement.resize(100, 40);\n          characterElement.attr({\n            body: {\n              fill: '#3f51b5',\n              refRx: '60%',\n              refRy: '100%',\n              cursor: 'default',\n              visibility: 'visible'\n            },\n            label: {\n              text: character.name,\n              fill: 'white',\n              fontSize: 16,\n              cursor: 'default',\n              pointerEvents: 'none',\n              visibility: 'visible'\n            }\n          });\n          characterElement.addTo(action.payload.model);\n        }\n\n        console.log(`x: ${positionX}`);\n        console.log(`y: ${positionY}`);\n      });\n      const linkLabelMarkup = [{\n        tagName: 'ellipse',\n        selector: 'body'\n      }, {\n        tagName: 'text',\n        selector: 'label'\n      }, {\n        tagName: 'rect',\n        selector: 'button'\n      }, {\n        tagName: 'text',\n        selector: 'buttonLabel'\n      }];\n      const linkPathMarkup = [{\n        tagName: 'path',\n        selector: 'line'\n      }];\n      store.bonds.forEach((bond, index) => {\n        const sourceElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.source);\n        const targetElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.target);\n\n        if (sourceElement !== undefined && targetElement !== undefined) {\n          let bondLink = new joint.shapes.standard.Link({\n            markup: linkPathMarkup,\n            attrs: {\n              line: {\n                fill: 'none',\n                stroke: '#808080',\n                strokeWidth: 2,\n                cursor: 'default'\n              }\n            }\n          });\n          bondLink.source(sourceElement, {\n            connectionPoint: {\n              name: 'boundary',\n              args: {\n                offset: 10,\n                stroke: true\n              }\n            }\n          });\n          bondLink.target(targetElement, {\n            connectionPoint: {\n              name: 'boundary',\n              args: {\n                offset: 10,\n                stroke: true\n              }\n            }\n          });\n          bondLink.router('normal');\n          bondLink.appendLabel({\n            markup: linkLabelMarkup,\n            attrs: {\n              body: {\n                ref: 'label',\n                refX: '50%',\n                refY: '50%',\n                fill: '#ffffff',\n                opacity: '100%',\n                stroke: '#c3c3c3',\n                strokeWidth: 2,\n                cursor: 'pointer',\n                refRx: '75%',\n                refRy: '130%',\n                refCx: 0,\n                refCy: 0\n              },\n              label: {\n                text: joint.util.breakText(bond.subtype, {\n                  width: 100,\n                  height: 100\n                }, {\n                  'font-size': 16\n                }),\n                fill: '#000000',\n                fontSize: 16,\n                textAnchor: 'middle',\n                yAlignment: 'middle',\n                pointerEvents: 'none',\n                cursor: 'pointer'\n              },\n              button: {\n                cursor: 'pointer',\n                ref: 'buttonLabel',\n                refWidth: '150%',\n                refHeight: '150%',\n                refX: '-25%',\n                refY: '-25%'\n              },\n              buttonLabel: {\n                pointerEvents: 'none',\n                refX: '100%',\n                refY: 0,\n                textAnchor: 'middle',\n                textVerticalAnchor: 'middle'\n              }\n            }\n          });\n          bondLink.addTo(action.payload.model);\n        }\n      });\n      store.graph = JSON.stringify(action.payload.model.toJSON());\n    },\n    clearFirst: (store, action) => {\n      store.first++;\n    }\n  }\n});\nexport default cast;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/reducers/cast.js"],"names":["createSlice","nanoid","joint","initGraph","dia","Graph","cellNamespace","shapes","jsonGraph","toJSON","initialItems","localStorage","getItem","JSON","parse","graph","stringify","characters","id","name","bio","bonds","category","source","subtype","target","summary","first","cast","initialState","reducers","addCharacter","store","action","payload","removeCharacter","bondsWithoutRemovedCharacter","map","bond","Object","assign","charactersWithoutRemovedCharacter","filter","character","addBond","details","console","error","log","drawMap","model","cells","forEach","characterElement","find","attributes","attrs","label","text","undefined","remove","index","positionX","positionY","getElements","element","standard","Ellipse","position","resize","attr","body","fill","refRx","refRy","cursor","visibility","fontSize","pointerEvents","addTo","linkLabelMarkup","tagName","selector","linkPathMarkup","sourceElement","targetElement","bondLink","Link","markup","line","stroke","strokeWidth","connectionPoint","args","offset","router","appendLabel","ref","refX","refY","opacity","refCx","refCy","util","breakText","width","height","textAnchor","yAlignment","button","refWidth","refHeight","buttonLabel","textVerticalAnchor","clearFirst"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { nanoid } from 'nanoid'\r\nimport * as joint from 'jointjs'\r\n\r\nlet initGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes })\r\nlet jsonGraph = initGraph.toJSON(initGraph)\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: JSON.stringify(jsonGraph),\r\n  characters: [\r\n    {\r\n      id: \"oy4jF4qTIzpHvEWS6xbk4\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"_Cdw9IYAXc-41miSlO5Xr\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"PUX_muVoY4tHA2Dy-0gOX\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n    {\r\n      id: nanoid(),\r\n      category: \"Social conflicts\",\r\n      source: \"Plonky\",\r\n      subtype: \"wants to be respected by\",\r\n      target: \"Smirgus\",\r\n      summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      category: \"Official Bonds\",\r\n      source: \"Smirgus\",\r\n      subtype: \"polices\",\r\n      target: \"Virp\",\r\n      summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      category: \"Social conflicts\",\r\n      source: \"Virp\",\r\n      subtype: \"seeks approval from\",\r\n      target: \"Plonky\",\r\n      summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\r\n    }\r\n  ],\r\n  first: 0\r\n}\r\n\r\nexport const cast = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    addCharacter: (store, action) => {\r\n      store.characters = [...store.characters, {\r\n        id: nanoid(),\r\n        name: action.payload.name,\r\n        bio: action.payload.bio\r\n      }]\r\n    },\r\n    removeCharacter: (store, action) => {\r\n      const bondsWithoutRemovedCharacter = store.bonds.map(bond => {\r\n        if (bond.source === action.payload.name) {\r\n          return Object.assign({}, bond, {source: \"???\"})\r\n        } else if (bond.target === action.payload.name) {\r\n          return Object.assign({}, bond, {target: \"???\"})\r\n        } else {\r\n          return bond\r\n        }\r\n      })\r\n      store.bonds = [...bondsWithoutRemovedCharacter]\r\n      const charactersWithoutRemovedCharacter = store.characters.filter(character => character.name !== action.payload.name)\r\n      store.characters = [...charactersWithoutRemovedCharacter]\r\n    },\r\n    addBond: (store, action) => {\r\n      //validation of input\r\n      if (\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.source === 'string' && action.payload.source !== '' &&\r\n        typeof action.payload.subtype === 'string' && action.payload.subtype !== '' &&\r\n        typeof action.payload.target === 'string' && action.payload.target !== '' &&\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.details === 'string' && action.payload.details !== ''\r\n      ) {\r\n        store.bonds = [...store.bonds, {\r\n          id: nanoid(),\r\n          category: action.payload.category,\r\n          source: action.payload.source,\r\n          subtype: action.payload.subtype,\r\n          target: action.payload.target,\r\n          summary: action.payload.details\r\n        }]\r\n      } else {\r\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\")\r\n        console.log(action.payload.category)\r\n        console.log(action.payload.source)\r\n        console.log(action.payload.subtype)\r\n        console.log(action.payload.target)\r\n        console.log(action.payload.details)\r\n      }\r\n    },\r\n    drawMap: (store, action) => {\r\n      \r\n      //log the current positions (now redundant, but can't risk refactoring last minute!)\r\n      // const elementPositionsToRetain = action.payload.model.getElements().map(element => {\r\n      //   if (element.attributes.type === \"standard.Ellipse\") {\r\n      //     return { type: \"character\", name: element.attributes.attrs.label.text, position: element.getBBox().center() }\r\n      //   } else if (element.attributes.type === \"standard.Rectangle\") {\r\n      //     return { type: \"bond details\", position: element.getBBox().center() }\r\n      //   } else {\r\n      //     return {}\r\n      //   }\r\n      // })\r\n\r\n      //remove unwanted Characters from graph\r\n      action.payload.model.toJSON().cells.forEach(characterElement => {\r\n        if (store.characters.find(character => character.name === characterElement.attributes.attrs.label.text) === undefined) {\r\n          characterElement.remove()\r\n        }\r\n      })\r\n\r\n      console.log(action.payload.model.toJSON())\r\n\r\n      //draw Characters\r\n      store.characters.forEach((character, index) => {\r\n        let positionX, positionY\r\n        //if (elementPositionsToRetain.find(element => element.name === character.name) !== undefined) {\r\n        if (action.payload.model.getElements().find(element => element.name === character.name) !== undefined) {\r\n          //(now redundant, but can't risk refactoring last minute!)\r\n          //element is already in graph since previously\r\n          // positionX = elementPositionsToRetain.find(element => element.name === character.name).position.x\r\n          // positionY = elementPositionsToRetain.find(element => element.name === character.name).position.y\r\n        } else {\r\n          //character is new and should be added to graph\r\n          let positionX = index*100\r\n          let positionY = index*100\r\n          let characterElement = new joint.shapes.standard.Ellipse()\r\n          characterElement.position(positionX, positionY)\r\n          characterElement.resize(100, 40)\r\n          characterElement.attr({\r\n            body: {\r\n              fill: '#3f51b5',\r\n              refRx: '60%',\r\n              refRy: '100%',\r\n              cursor: 'default',\r\n              visibility: 'visible'\r\n            },\r\n            label: {\r\n              text: character.name,\r\n              fill: 'white',\r\n              fontSize: 16,\r\n              cursor: 'default',\r\n              pointerEvents: 'none',\r\n              visibility: 'visible',\r\n            }\r\n            \r\n          });\r\n          characterElement.addTo(action.payload.model)\r\n        }\r\n        console.log(`x: ${positionX}`)\r\n        console.log(`y: ${positionY}`)        \r\n      })\r\n\r\n      const linkLabelMarkup = [\r\n        {\r\n          tagName: 'ellipse',\r\n          selector: 'body'\r\n        }, {\r\n          tagName: 'text',\r\n          selector: 'label'\r\n        }, {\r\n          tagName: 'rect',\r\n          selector: 'button'\r\n        }, {\r\n          tagName: 'text',\r\n          selector: 'buttonLabel'\r\n        }\r\n      ]\r\n\r\n      const linkPathMarkup = [\r\n        {\r\n          tagName: 'path',\r\n          selector: 'line'\r\n        }\r\n      ]\r\n\r\n      store.bonds.forEach((bond, index) => {\r\n        const sourceElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.source)\r\n        const targetElement = action.payload.model.getElements().find(element => element.attributes.attrs.label.text === bond.target)\r\n        if (sourceElement !== undefined && targetElement !== undefined) {\r\n          let bondLink = new joint.shapes.standard.Link({\r\n            markup: linkPathMarkup,\r\n            attrs: {\r\n              line: {\r\n                fill: 'none',\r\n                stroke: '#808080',\r\n                strokeWidth: 2,\r\n                cursor: 'default'\r\n              }\r\n            }\r\n          });\r\n          bondLink.source(sourceElement, {\r\n            connectionPoint: {\r\n              name: 'boundary',\r\n              args: {\r\n                  offset: 10,\r\n                  stroke: true\r\n              }\r\n            }\r\n          })\r\n          bondLink.target(targetElement, {\r\n            connectionPoint: {\r\n              name: 'boundary',\r\n              args: {\r\n                  offset: 10,\r\n                  stroke: true\r\n              }\r\n            }\r\n          })\r\n          bondLink.router('normal')\r\n          bondLink.appendLabel({    \r\n            markup: linkLabelMarkup,\r\n            attrs: {\r\n              body: {\r\n                ref: 'label',\r\n                refX: '50%',\r\n                refY: '50%',\r\n                fill: '#ffffff',\r\n                opacity: '100%',\r\n                stroke: '#c3c3c3',\r\n                strokeWidth: 2,\r\n                cursor: 'pointer',\r\n                refRx: '75%',\r\n                refRy: '130%',\r\n                refCx: 0,\r\n                refCy: 0\r\n              },\r\n              label: {\r\n                text: joint.util.breakText(bond.subtype, { width: 100, height: 100 }, { 'font-size': 16 }),\r\n                fill: '#000000',\r\n                fontSize: 16,\r\n                textAnchor: 'middle',\r\n                yAlignment: 'middle',\r\n                pointerEvents: 'none',\r\n                cursor: 'pointer'\r\n              },\r\n              button: {\r\n                cursor: 'pointer',\r\n                ref: 'buttonLabel',\r\n                refWidth: '150%',\r\n                refHeight: '150%',\r\n                refX: '-25%',\r\n                refY: '-25%'\r\n              },\r\n              buttonLabel: {\r\n                pointerEvents: 'none',\r\n                refX: '100%',\r\n                refY: 0,\r\n                textAnchor: 'middle',\r\n                textVerticalAnchor: 'middle'\r\n              }\r\n            }\r\n          })\r\n          bondLink.addTo(action.payload.model)\r\n        }\r\n      })\r\n      store.graph = JSON.stringify(action.payload.model.toJSON())\r\n    },\r\n    clearFirst: (store, action) => {\r\n      store.first++\r\n    }\r\n  }\r\n})\r\n\r\nexport default cast"]},"metadata":{},"sourceType":"module"}