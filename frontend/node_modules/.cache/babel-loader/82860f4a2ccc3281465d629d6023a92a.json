{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\martn\\\\Documents\\\\New Documents 2019\\\\Technigo codin\\\\storymapper spreadsheet\\\\my-app\\\\src\\\\components\\\\CharacterNameAutoComplete.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport NewCharacterForm from './NewCharacterForm';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport const CharacterNameAutoComplete = ({\n  label,\n  value,\n  onChange\n}) => {\n  _s();\n\n  // const [value, setValue] = React.useState(null);\n  const characterNames = useSelector(store => store.cast.characters).map(character => character.name);\n  const [open, toggleOpen] = useState(false);\n  const [newCharacterName, setNewCharacterName] = useState(false);\n  console.log(characterNames);\n\n  const handleClose = () => {\n    // setDialogValue({\n    //   title: '',\n    //   year: '',\n    // });\n    toggleOpen(false);\n  }; // const handleClickOpen = () => {\n  //   toggleOpen(true);\n  // };\n  // const [dialogValue, setDialogValue] = React.useState({\n  //   title: '',\n  //   year: '',\n  // });\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   setValue({\n  //     title: dialogValue.title,\n  //     year: parseInt(dialogValue.year, 10),\n  //   });\n  //   handleClose();\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          // timeout to avoid instant validation of the dialog's form.\n          setTimeout(() => {\n            toggleOpen(true); // setDialogValue({\n            //   title: newValue,\n            //   year: '',\n            // });\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true); // setDialogValue({\n          //   title: newValue.inputValue,\n          //   year: '',\n          // });\n        } else {\n          setNewCharacterName(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      id: \"free-solo-dialog-demo\",\n      options: characterNames,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n\n        return option.title;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true // renderOption={(option) => option.title}\n      ,\n      style: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Free solo dialog\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewCharacterForm, {\n      open: open,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CharacterNameAutoComplete, \"rPY5o7fV/wTTC+xb2n0QQaXChCU=\", false, function () {\n  return [useSelector];\n});\n\n_c = CharacterNameAutoComplete;\nexport default CharacterNameAutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharacterNameAutoComplete\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/src/components/CharacterNameAutoComplete.js"],"names":["React","useState","TextField","Autocomplete","createFilterOptions","NewCharacterForm","useSelector","filter","CharacterNameAutoComplete","label","value","onChange","characterNames","store","cast","characters","map","character","name","open","toggleOpen","newCharacterName","setNewCharacterName","console","log","handleClose","event","newValue","setTimeout","inputValue","options","params","filtered","push","title","option","width"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\r\nimport React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport NewCharacterForm from './NewCharacterForm';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport const CharacterNameAutoComplete = ({ label, value, onChange }) => {\r\n  // const [value, setValue] = React.useState(null);\r\n  \r\n  const characterNames = useSelector(store => store.cast.characters).map(character => character.name)\r\n  const [open, toggleOpen] = useState(false)\r\n  const [newCharacterName, setNewCharacterName] = useState(false)\r\n\r\n  console.log(characterNames)\r\n\r\n  const handleClose = () => {\r\n    // setDialogValue({\r\n    //   title: '',\r\n    //   year: '',\r\n    // });\r\n\r\n    toggleOpen(false);\r\n  };\r\n\r\n  // const handleClickOpen = () => {\r\n  //   toggleOpen(true);\r\n  // };\r\n\r\n  // const [dialogValue, setDialogValue] = React.useState({\r\n  //   title: '',\r\n  //   year: '',\r\n  // });\r\n\r\n  // const handleSubmit = (event) => {\r\n  //   event.preventDefault();\r\n  //   setValue({\r\n  //     title: dialogValue.title,\r\n  //     year: parseInt(dialogValue.year, 10),\r\n  //   });\r\n\r\n  //   handleClose();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          if (typeof newValue === 'string') {\r\n            // timeout to avoid instant validation of the dialog's form.\r\n            setTimeout(() => {\r\n              toggleOpen(true);\r\n              // setDialogValue({\r\n              //   title: newValue,\r\n              //   year: '',\r\n              // });\r\n            });\r\n          } else if (newValue && newValue.inputValue) {\r\n            toggleOpen(true);\r\n            // setDialogValue({\r\n            //   title: newValue.inputValue,\r\n            //   year: '',\r\n            // });\r\n          } else {\r\n            setNewCharacterName(newValue);\r\n          }\r\n        }}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n\r\n          if (params.inputValue !== '') {\r\n            filtered.push({\r\n              inputValue: params.inputValue,\r\n              title: `Add \"${params.inputValue}\"`,\r\n            });\r\n          }\r\n\r\n          return filtered;\r\n        }}\r\n        id=\"free-solo-dialog-demo\"\r\n        options={characterNames}\r\n        getOptionLabel={(option) => {\r\n          // e.g value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          return option.title;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        // renderOption={(option) => option.title}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Free solo dialog\" variant=\"outlined\" />\r\n        )}\r\n      />\r\n      <NewCharacterForm \r\n        open={open} handleClose={handleClose}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CharacterNameAutoComplete"]},"metadata":{},"sourceType":"module"}