{"ast":null,"code":"import { Element } from '../dia/Element.mjs';\nimport { ElementView } from '../dia/ElementView.mjs';\nimport { omit, assign, sanitizeHTML, merge, has, breakText, setByPath } from '../util/index.mjs';\nimport { env } from '../env/index.mjs';\nexport const Generic = Element.define('basic.Generic', {\n  attrs: {\n    '.': {\n      fill: '#ffffff',\n      stroke: 'none'\n    }\n  }\n});\nexport const Rect = Generic.define('basic.Rect', {\n  attrs: {\n    'rect': {\n      fill: '#ffffff',\n      stroke: '#000000',\n      width: 100,\n      height: 60\n    },\n    'text': {\n      fill: '#000000',\n      text: '',\n      'font-size': 14,\n      'ref-x': .5,\n      'ref-y': .5,\n      'text-anchor': 'middle',\n      'y-alignment': 'middle',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><rect/></g><text/></g>'\n});\nexport const TextView = ElementView.extend({\n  presentationAttributes: ElementView.addPresentationAttributes({\n    // The element view is not automatically re-scaled to fit the model size\n    // when the attribute 'attrs' is changed.\n    attrs: ['SCALE']\n  }),\n  confirmUpdate: function () {\n    var flags = ElementView.prototype.confirmUpdate.apply(this, arguments);\n\n    if (this.hasFlag(flags, 'SCALE')) {\n      this.resize();\n      flags = this.removeFlag(flags, 'SCALE');\n    }\n\n    return flags;\n  }\n});\nexport const Text = Generic.define('basic.Text', {\n  attrs: {\n    'text': {\n      'font-size': 18,\n      fill: '#000000'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><text/></g></g>'\n});\nexport const Circle = Generic.define('basic.Circle', {\n  size: {\n    width: 60,\n    height: 60\n  },\n  attrs: {\n    'circle': {\n      fill: '#ffffff',\n      stroke: '#000000',\n      r: 30,\n      cx: 30,\n      cy: 30\n    },\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref-x': .5,\n      'ref-y': .5,\n      'y-alignment': 'middle',\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle/></g><text/></g>'\n});\nexport const Ellipse = Generic.define('basic.Ellipse', {\n  size: {\n    width: 60,\n    height: 40\n  },\n  attrs: {\n    'ellipse': {\n      fill: '#ffffff',\n      stroke: '#000000',\n      rx: 30,\n      ry: 20,\n      cx: 30,\n      cy: 20\n    },\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref-x': .5,\n      'ref-y': .5,\n      'y-alignment': 'middle',\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><ellipse/></g><text/></g>'\n});\nexport const Polygon = Generic.define('basic.Polygon', {\n  size: {\n    width: 60,\n    height: 40\n  },\n  attrs: {\n    'polygon': {\n      fill: '#ffffff',\n      stroke: '#000000'\n    },\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref-x': .5,\n      'ref-dy': 20,\n      'y-alignment': 'middle',\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><polygon/></g><text/></g>'\n});\nexport const Polyline = Generic.define('basic.Polyline', {\n  size: {\n    width: 60,\n    height: 40\n  },\n  attrs: {\n    'polyline': {\n      fill: '#ffffff',\n      stroke: '#000000'\n    },\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref-x': .5,\n      'ref-dy': 20,\n      'y-alignment': 'middle',\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><polyline/></g><text/></g>'\n});\nexport const Image = Generic.define('basic.Image', {\n  attrs: {\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref-x': .5,\n      'ref-dy': 20,\n      'y-alignment': 'middle',\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><image/></g><text/></g>'\n});\nexport const Path = Generic.define('basic.Path', {\n  size: {\n    width: 60,\n    height: 60\n  },\n  attrs: {\n    'path': {\n      fill: '#ffffff',\n      stroke: '#000000'\n    },\n    'text': {\n      'font-size': 14,\n      text: '',\n      'text-anchor': 'middle',\n      'ref': 'path',\n      'ref-x': .5,\n      'ref-dy': 10,\n      fill: '#000000',\n      'font-family': 'Arial, helvetica, sans-serif'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><path/></g><text/></g>'\n});\nexport const Rhombus = Path.define('basic.Rhombus', {\n  attrs: {\n    'path': {\n      d: 'M 30 0 L 60 30 30 60 0 30 z'\n    },\n    'text': {\n      'ref-y': .5,\n      'ref-dy': null,\n      'y-alignment': 'middle'\n    }\n  }\n});\nconst svgForeignObjectSupported = env.test('svgforeignobject');\nexport const TextBlock = Generic.define('basic.TextBlock', {\n  // see joint.css for more element styles\n  attrs: {\n    rect: {\n      fill: '#ffffff',\n      stroke: '#000000',\n      width: 80,\n      height: 100\n    },\n    text: {\n      fill: '#000000',\n      'font-size': 14,\n      'font-family': 'Arial, helvetica, sans-serif'\n    },\n    '.content': {\n      text: '',\n      'ref-x': .5,\n      'ref-y': .5,\n      'y-alignment': 'middle',\n      'x-alignment': 'middle'\n    }\n  },\n  content: ''\n}, {\n  markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', svgForeignObjectSupported ? '<foreignObject class=\"fobj\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"content\"/></body></foreignObject>' : '<text class=\"content\"/>', '</g>'].join(''),\n  initialize: function () {\n    this.listenTo(this, 'change:size', this.updateSize);\n    this.listenTo(this, 'change:content', this.updateContent);\n    this.updateSize(this, this.get('size'));\n    this.updateContent(this, this.get('content'));\n    Generic.prototype.initialize.apply(this, arguments);\n  },\n  updateSize: function (cell, size) {\n    // Selector `foreignObject' doesn't work across all browsers, we're using class selector instead.\n    // We have to clone size as we don't want attributes.div.style to be same object as attributes.size.\n    this.attr({\n      '.fobj': assign({}, size),\n      div: {\n        style: assign({}, size)\n      }\n    });\n  },\n  updateContent: function (cell, content) {\n    if (svgForeignObjectSupported) {\n      // Content element is a <div> element.\n      this.attr({\n        '.content': {\n          html: sanitizeHTML(content)\n        }\n      });\n    } else {\n      // Content element is a <text> element.\n      // SVG elements don't have innerHTML attribute.\n      this.attr({\n        '.content': {\n          text: content\n        }\n      });\n    }\n  },\n  // Here for backwards compatibility:\n  setForeignObjectSize: function () {\n    this.updateSize.apply(this, arguments);\n  },\n  // Here for backwards compatibility:\n  setDivContent: function () {\n    this.updateContent.apply(this, arguments);\n  }\n}); // TextBlockView implements the fallback for IE when no foreignObject exists and\n// the text needs to be manually broken.\n\nexport const TextBlockView = ElementView.extend({\n  presentationAttributes: svgForeignObjectSupported ? ElementView.prototype.presentationAttributes : ElementView.addPresentationAttributes({\n    content: ['CONTENT'],\n    size: ['CONTENT']\n  }),\n  initFlag: ['RENDER', 'CONTENT'],\n  confirmUpdate: function () {\n    var flags = ElementView.prototype.confirmUpdate.apply(this, arguments);\n\n    if (this.hasFlag(flags, 'CONTENT')) {\n      this.updateContent(this.model);\n      flags = this.removeFlag(flags, 'CONTENT');\n    }\n\n    return flags;\n  },\n  update: function (_, renderingOnlyAttrs) {\n    var model = this.model;\n\n    if (!svgForeignObjectSupported) {\n      // Update everything but the content first.\n      var noTextAttrs = omit(renderingOnlyAttrs || model.get('attrs'), '.content');\n      ElementView.prototype.update.call(this, model, noTextAttrs);\n\n      if (!renderingOnlyAttrs || has(renderingOnlyAttrs, '.content')) {\n        // Update the content itself.\n        this.updateContent(model, renderingOnlyAttrs);\n      }\n    } else {\n      ElementView.prototype.update.call(this, model, renderingOnlyAttrs);\n    }\n  },\n  updateContent: function (cell, renderingOnlyAttrs) {\n    // Create copy of the text attributes\n    var textAttrs = merge({}, (renderingOnlyAttrs || cell.get('attrs'))['.content']);\n    textAttrs = omit(textAttrs, 'text'); // Break the content to fit the element size taking into account the attributes\n    // set on the model.\n\n    var text = breakText(cell.get('content'), cell.get('size'), textAttrs, {\n      // measuring sandbox svg document\n      svgDocument: this.paper.svg\n    }); // Create a new attrs with same structure as the model attrs { text: { *textAttributes* }}\n\n    var attrs = setByPath({}, '.content', textAttrs, '/'); // Replace text attribute with the one we just processed.\n\n    attrs['.content'].text = text; // Update the view using renderingOnlyAttributes parameter.\n\n    ElementView.prototype.update.call(this, cell, attrs);\n  }\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/node_modules/jointjs/src/shapes/basic.mjs"],"names":["Element","ElementView","omit","assign","sanitizeHTML","merge","has","breakText","setByPath","env","Generic","define","attrs","fill","stroke","Rect","width","height","text","markup","TextView","extend","presentationAttributes","addPresentationAttributes","confirmUpdate","flags","prototype","apply","arguments","hasFlag","resize","removeFlag","Text","Circle","size","r","cx","cy","Ellipse","rx","ry","Polygon","Polyline","Image","Path","Rhombus","d","svgForeignObjectSupported","test","TextBlock","rect","content","join","initialize","listenTo","updateSize","updateContent","get","cell","attr","div","style","html","setForeignObjectSize","setDivContent","TextBlockView","initFlag","model","update","_","renderingOnlyAttrs","noTextAttrs","call","textAttrs","svgDocument","paper","svg"],"mappings":"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","sourcesContent":["import { Element } from '../dia/Element.mjs';\nimport { ElementView } from '../dia/ElementView.mjs';\nimport { omit, assign, sanitizeHTML, merge, has, breakText, setByPath } from '../util/index.mjs';\nimport { env } from '../env/index.mjs';\n\nexport const Generic = Element.define('basic.Generic', {\n    attrs: {\n        '.': { fill: '#ffffff', stroke: 'none' }\n    }\n});\n\nexport const Rect = Generic.define('basic.Rect', {\n    attrs: {\n        'rect': {\n            fill: '#ffffff',\n            stroke: '#000000',\n            width: 100,\n            height: 60\n        },\n        'text': {\n            fill: '#000000',\n            text: '',\n            'font-size': 14,\n            'ref-x': .5,\n            'ref-y': .5,\n            'text-anchor': 'middle',\n            'y-alignment': 'middle',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><rect/></g><text/></g>'\n});\n\nexport const TextView = ElementView.extend({\n\n    presentationAttributes: ElementView.addPresentationAttributes({\n        // The element view is not automatically re-scaled to fit the model size\n        // when the attribute 'attrs' is changed.\n        attrs: ['SCALE']\n    }),\n\n    confirmUpdate: function() {\n        var flags = ElementView.prototype.confirmUpdate.apply(this, arguments);\n        if (this.hasFlag(flags, 'SCALE')) {\n            this.resize();\n            flags = this.removeFlag(flags, 'SCALE');\n        }\n        return flags;\n    }\n});\n\nexport const Text = Generic.define('basic.Text', {\n    attrs: {\n        'text': {\n            'font-size': 18,\n            fill: '#000000'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><text/></g></g>',\n});\n\nexport const Circle = Generic.define('basic.Circle', {\n    size: { width: 60, height: 60 },\n    attrs: {\n        'circle': {\n            fill: '#ffffff',\n            stroke: '#000000',\n            r: 30,\n            cx: 30,\n            cy: 30\n        },\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref-x': .5,\n            'ref-y': .5,\n            'y-alignment': 'middle',\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle/></g><text/></g>',\n});\n\nexport const Ellipse = Generic.define('basic.Ellipse', {\n    size: { width: 60, height: 40 },\n    attrs: {\n        'ellipse': {\n            fill: '#ffffff',\n            stroke: '#000000',\n            rx: 30,\n            ry: 20,\n            cx: 30,\n            cy: 20\n        },\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref-x': .5,\n            'ref-y': .5,\n            'y-alignment': 'middle',\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><ellipse/></g><text/></g>',\n});\n\nexport const Polygon = Generic.define('basic.Polygon', {\n    size: { width: 60, height: 40 },\n    attrs: {\n        'polygon': {\n            fill: '#ffffff',\n            stroke: '#000000'\n        },\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref-x': .5,\n            'ref-dy': 20,\n            'y-alignment': 'middle',\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><polygon/></g><text/></g>',\n});\n\nexport const Polyline = Generic.define('basic.Polyline', {\n    size: { width: 60, height: 40 },\n    attrs: {\n        'polyline': {\n            fill: '#ffffff',\n            stroke: '#000000'\n        },\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref-x': .5,\n            'ref-dy': 20,\n            'y-alignment': 'middle',\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><polyline/></g><text/></g>',\n});\n\nexport const Image = Generic.define('basic.Image', {\n    attrs: {\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref-x': .5,\n            'ref-dy': 20,\n            'y-alignment': 'middle',\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><image/></g><text/></g>',\n});\n\nexport const Path = Generic.define('basic.Path', {\n    size: { width: 60, height: 60 },\n    attrs: {\n        'path': {\n            fill: '#ffffff',\n            stroke: '#000000'\n        },\n        'text': {\n            'font-size': 14,\n            text: '',\n            'text-anchor': 'middle',\n            'ref': 'path',\n            'ref-x': .5,\n            'ref-dy': 10,\n            fill: '#000000',\n            'font-family': 'Arial, helvetica, sans-serif'\n        }\n    }\n\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><path/></g><text/></g>',\n});\n\nexport const Rhombus = Path.define('basic.Rhombus', {\n    attrs: {\n        'path': {\n            d: 'M 30 0 L 60 30 30 60 0 30 z'\n        },\n        'text': {\n            'ref-y': .5,\n            'ref-dy': null,\n            'y-alignment': 'middle'\n        }\n    }\n});\n\nconst svgForeignObjectSupported = env.test('svgforeignobject');\n\nexport const TextBlock = Generic.define('basic.TextBlock', {\n    // see joint.css for more element styles\n    attrs: {\n        rect: {\n            fill: '#ffffff',\n            stroke: '#000000',\n            width: 80,\n            height: 100\n        },\n        text: {\n            fill: '#000000',\n            'font-size': 14,\n            'font-family': 'Arial, helvetica, sans-serif'\n        },\n        '.content': {\n            text: '',\n            'ref-x': .5,\n            'ref-y': .5,\n            'y-alignment': 'middle',\n            'x-alignment': 'middle'\n        }\n    },\n\n    content: ''\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\"><rect/></g>',\n        svgForeignObjectSupported\n            ? '<foreignObject class=\"fobj\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"content\"/></body></foreignObject>'\n            : '<text class=\"content\"/>',\n        '</g>'\n    ].join(''),\n\n    initialize: function() {\n\n        this.listenTo(this, 'change:size', this.updateSize);\n        this.listenTo(this, 'change:content', this.updateContent);\n        this.updateSize(this, this.get('size'));\n        this.updateContent(this, this.get('content'));\n        Generic.prototype.initialize.apply(this, arguments);\n    },\n\n    updateSize: function(cell, size) {\n\n        // Selector `foreignObject' doesn't work across all browsers, we're using class selector instead.\n        // We have to clone size as we don't want attributes.div.style to be same object as attributes.size.\n        this.attr({\n            '.fobj': assign({}, size),\n            div: {\n                style: assign({}, size)\n            }\n        });\n    },\n\n    updateContent: function(cell, content) {\n\n        if (svgForeignObjectSupported) {\n\n            // Content element is a <div> element.\n            this.attr({\n                '.content': {\n                    html: sanitizeHTML(content)\n                }\n            });\n\n        } else {\n\n            // Content element is a <text> element.\n            // SVG elements don't have innerHTML attribute.\n            this.attr({\n                '.content': {\n                    text: content\n                }\n            });\n        }\n    },\n\n    // Here for backwards compatibility:\n    setForeignObjectSize: function() {\n\n        this.updateSize.apply(this, arguments);\n    },\n\n    // Here for backwards compatibility:\n    setDivContent: function() {\n\n        this.updateContent.apply(this, arguments);\n    }\n});\n\n// TextBlockView implements the fallback for IE when no foreignObject exists and\n// the text needs to be manually broken.\nexport const TextBlockView = ElementView.extend({\n\n    presentationAttributes: svgForeignObjectSupported\n        ? ElementView.prototype.presentationAttributes\n        : ElementView.addPresentationAttributes({\n            content: ['CONTENT'],\n            size: ['CONTENT']\n        }),\n\n    initFlag: ['RENDER', 'CONTENT'],\n\n    confirmUpdate: function() {\n        var flags = ElementView.prototype.confirmUpdate.apply(this, arguments);\n        if (this.hasFlag(flags, 'CONTENT')) {\n            this.updateContent(this.model);\n            flags = this.removeFlag(flags, 'CONTENT');\n        }\n        return flags;\n    },\n\n    update: function(_, renderingOnlyAttrs) {\n\n        var model = this.model;\n\n        if (!svgForeignObjectSupported) {\n\n            // Update everything but the content first.\n            var noTextAttrs = omit(renderingOnlyAttrs || model.get('attrs'), '.content');\n            ElementView.prototype.update.call(this, model, noTextAttrs);\n\n            if (!renderingOnlyAttrs || has(renderingOnlyAttrs, '.content')) {\n                // Update the content itself.\n                this.updateContent(model, renderingOnlyAttrs);\n            }\n\n        } else {\n\n            ElementView.prototype.update.call(this, model, renderingOnlyAttrs);\n        }\n    },\n\n    updateContent: function(cell, renderingOnlyAttrs) {\n\n        // Create copy of the text attributes\n        var textAttrs = merge({}, (renderingOnlyAttrs || cell.get('attrs'))['.content']);\n\n        textAttrs = omit(textAttrs, 'text');\n\n        // Break the content to fit the element size taking into account the attributes\n        // set on the model.\n        var text = breakText(cell.get('content'), cell.get('size'), textAttrs, {\n            // measuring sandbox svg document\n            svgDocument: this.paper.svg\n        });\n\n        // Create a new attrs with same structure as the model attrs { text: { *textAttributes* }}\n        var attrs = setByPath({}, '.content', textAttrs, '/');\n\n        // Replace text attribute with the one we just processed.\n        attrs['.content'].text = text;\n\n        // Update the view using renderingOnlyAttributes parameter.\n        ElementView.prototype.update.call(this, cell, attrs);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}