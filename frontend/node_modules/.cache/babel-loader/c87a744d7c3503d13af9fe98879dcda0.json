{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport * as joint from 'jointjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shapes, dia } from 'jointjs';\nimport * as standard from 'jointjs/src/shapes/standard.mjs';\nimport Button from './Button';\nimport DrawCharacters from './DrawCharacters';\nimport DrawBonds from './DrawBonds';\nimport Test from './Test';\nimport cast from '../reducers/cast'; // window.joint = joint\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  let graph = useSelector(store => store.cast.graph);\n  const characters = useSelector(store => store.cast.characters);\n  const bonds = useSelector(store => store.cast.bonds);\n  const dispatch = useDispatch();\n  let updatedGraph = new joint.dia.Graph({}, {\n    cellNamespace: joint.shapes\n  });\n  let paper = new joint.dia.Paper({\n    el: document.getElementById('myholder'),\n    model: updatedGraph,\n    cellViewNamespace: joint.shapes,\n    width: 800,\n    height: 500,\n    gridSize: 1\n  });\n  console.log(\"moved!\");\n  updatedGraph.fromJSON(JSON.parse(graph));\n  paper.on('change: position', function (element) {\n    console.log(`${element.id}:${element.id}`);\n  }); // console.log(\"paper model\")\n  // console.log(paper.model)\n\n  useEffect(() => {\n    // console.log(paper.dumpViews())\n    // paper.setDimensions(25)\n    dispatch(cast.actions.drawMap({\n      model: paper.model\n    }));\n  }, [characters, bonds]); //   var graph0 = new joint.dia.Graph({}, { cellNamespace: shapes });\n  //   graph0.set('graphCustomProperty', true);\n  //   graph0.set('graphExportTime', Date.now());\n  //   var jsonObject = graph0.toJSON();\n  //   // transmission of `jsonObject` across network etc.\n  //   var graph2 = new joint.dia.Graph({}, { cellNamespace: shapes }); // new empty graph\n  //   graph2.fromJSON(jsonObject);\n  //   graph2.get('graphCustomProperty'); // true\n  //   graph2.get('graphExportTime'); // e.g. 627247800000\n  //   var graph1 = new joint.dia.Graph({}, { cellNamespace: shapes });\n  //   let rectio = new joint.shapes.standard.Rectangle()\n  //   rectio.position(150, 50)\n  //   rectio.resize(100, 40)\n  //   rectio.attr({\n  //     body: {\n  //       fill: 'green'\n  //     },\n  //     label: {\n  //       text: 'Richard Feynman',\n  //       fill: 'white'\n  //     }\n  //   })\n  //   console.log(rectio)\n  //   rectio.addTo(graph1)\n  //   // transmission of `jsonString` across network etc.\n  //   var graph3 = new joint.dia.Graph({}, { cellNamespace: shapes }); // new empty graph\n  //   graph3.fromJSON({\n  //     cells: [{\n  //         id: 1,\n  //         type: 'Circle',\n  //         position: {\n  //           x: 100,\n  //           y: 100\n  //         },\n  //         size: {\n  //           width: 100,\n  //           height: 100\n  //         }\n  //     }]\n  // });\n  //   let paper = new joint.dia.Paper({\n  //     el: document.getElementById('myholder'),\n  //     model: graph3,\n  //     cellViewNamespace: shapes,\n  //     width: 800,\n  //     height: 500, \n  //     gridSize: 1\n  //   })\n  // let smog = new joint.dia.Graph({}, { cellNameSpace: shapes })\n  // const cells = JSON.stringify(smog.toJSON());\n  // smog.clear();\n  // console.log(JSON.parse(cells))\n  // smog.fromJSON(JSON.parse(cells));\n  // console.log(joint.shapes)\n  //   let graph = useSelector(store => store.cast.graph)\n  //   let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes.standard.Rectangle.})\n  //   let rectio = new joint.shapes.standard.Rectangle()\n  //   rectio.position(150, 50)\n  //   rectio.resize(100, 40)\n  //   rectio.attr({\n  //     body: {\n  //       fill: 'green'\n  //     },\n  //     label: {\n  //       text: 'Richard Feynman',\n  //       fill: 'white'\n  //     }\n  //   })\n  //   console.log(rectio)\n  //   rectio.addTo(updatedGraph)\n  //   let superUpdatedGraph = new joint.dia.Graph({}, { cellNameSpace: shapes })\n  //   console.log(updatedGraph.toJSON())\n  //   superUpdatedGraph.clear()\n  //   superUpdatedGraph.fromJSON(JSON.stringify(updatedGraph.toJSON()))\n  //superUpdatedGraph.fromJSON(updatedGraph.toJSON()) //this is where it GO WRONG: ERROR: dia.ElementView: markup required\n  // console.log(JSON.parse(graph))\n  // updatedGraph.fromJSON(JSON.parse(graph))\n  // let graph = new joint.dia.Graph\n  //creating a new paper should only happen when a new one is needed. But where is a currently running paper stored?\n  //in the 'myholder' html element?? papers cannot be serialized, so they need to be kept somewhere which isn't redux store.\n  //But where? Where is it currently???\n  //How I think it has worked so far:\n  //> The Paper has been recreated from scratch on each render using the new graph as model. HOWEVER, this stops working\n  //with serialized graphs. SO, I need to start freezing a PERSISTING paper instead. This Paper needs to be stored somewhere.\n  //where does Priyansh store his Paper?\n  // let paper = new joint.dia.Paper({\n  //   el: document.getElementById('myholder'),\n  //   model: superUpdatedGraph,\n  //   cellViewNamespace: shapes,\n  //   width: 800,\n  //   height: 500, \n  //   gridSize: 1\n  // })\n  // const [value, setValue] = useState('')\n  // const onValueChange = (event) => {\n  //   setValue(event.target.value)\n  // }\n  // const onClick = (event) => {\n  //   event.preventDefault()\n  //   let rect = new joint.shapes.standard.Rectangle();\n  //   rect.position(150, 50);\n  //   rect.resize(100, 40);\n  //   rect.attr({\n  //     body: {\n  //       fill: 'green'\n  //     },\n  //     label: {\n  //       text: value,\n  //       fill: 'white'\n  //     }\n  //   });\n  //   rect.addTo(graph);\n  //   setValue('')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Container, \"ErCFPliX0iB2kemISyZ44MIXYzw=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/components/Container.js"],"names":["React","useState","useEffect","joint","useSelector","useDispatch","shapes","dia","standard","Button","DrawCharacters","DrawBonds","Test","cast","Container","graph","store","characters","bonds","dispatch","updatedGraph","Graph","cellNamespace","paper","Paper","el","document","getElementById","model","cellViewNamespace","width","height","gridSize","console","log","fromJSON","JSON","parse","on","element","id","actions","drawMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,SAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,iCAA1B;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEtB,MAAIC,KAAK,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACH,IAAN,CAAWE,KAArB,CAAvB;AACA,QAAME,UAAU,GAAGb,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACH,IAAN,CAAWI,UAArB,CAA9B;AACA,QAAMC,KAAK,GAAGd,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACH,IAAN,CAAWK,KAArB,CAAzB;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAIe,YAAY,GAAG,IAAIjB,KAAK,CAACI,GAAN,CAAUc,KAAd,CAAoB,EAApB,EAAwB;AAAEC,IAAAA,aAAa,EAAEnB,KAAK,CAACG;AAAvB,GAAxB,CAAnB;AAEA,MAAIiB,KAAK,GAAG,IAAIpB,KAAK,CAACI,GAAN,CAAUiB,KAAd,CAAoB;AAC9BC,IAAAA,EAAE,EAAEC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAD0B;AAE9BC,IAAAA,KAAK,EAAER,YAFuB;AAG9BS,IAAAA,iBAAiB,EAAE1B,KAAK,CAACG,MAHK;AAI9BwB,IAAAA,KAAK,EAAE,GAJuB;AAK9BC,IAAAA,MAAM,EAAE,GALsB;AAM9BC,IAAAA,QAAQ,EAAE;AANoB,GAApB,CAAZ;AASAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEAd,EAAAA,YAAY,CAACe,QAAb,CAAsBC,IAAI,CAACC,KAAL,CAAWtB,KAAX,CAAtB;AAEAQ,EAAAA,KAAK,CAACe,EAAN,CAAS,kBAAT,EAA6B,UAASC,OAAT,EAAiB;AAC5CN,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEK,OAAO,CAACC,EAAG,IAAGD,OAAO,CAACC,EAAG,EAAxC;AACD,GAFD,EAtBsB,CA0BtB;AACA;;AAEAtC,EAAAA,SAAS,CAAE,MAAM;AACf;AACA;AACAiB,IAAAA,QAAQ,CAACN,IAAI,CAAC4B,OAAL,CAAaC,OAAb,CAAqB;AAAEd,MAAAA,KAAK,EAAEL,KAAK,CAACK;AAAf,KAArB,CAAD,CAAR;AACD,GAJQ,EAIN,CAACX,UAAD,EAAaC,KAAb,CAJM,CAAT,CA7BsB,CAqCxsBACE,qCADF;AAMD,CAzLD;;GAAMJ,S;UAEQV,W,EACOA,W,EACLA,W,EACGC,W;;;KALbS,S;AA2LN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport * as joint from 'jointjs'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { shapes, dia } from 'jointjs'\r\nimport * as standard from 'jointjs/src/shapes/standard.mjs'\r\n\r\n\r\nimport Button from './Button'\r\nimport DrawCharacters from './DrawCharacters'\r\nimport DrawBonds from './DrawBonds'\r\nimport Test from './Test'\r\n\r\nimport cast from '../reducers/cast'\r\n\r\n// window.joint = joint\r\n\r\nconst Container = () => {\r\n\r\n  let graph = useSelector(store => store.cast.graph)\r\n  const characters = useSelector(store => store.cast.characters)\r\n  const bonds = useSelector(store => store.cast.bonds)\r\n  const dispatch = useDispatch()\r\n\r\n  let updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes })\r\n\r\n  let paper = new joint.dia.Paper({\r\n    el: document.getElementById('myholder'),\r\n    model: updatedGraph,\r\n    cellViewNamespace: joint.shapes,\r\n    width: 800,\r\n    height: 500, \r\n    gridSize: 1\r\n  })\r\n\r\n  console.log(\"moved!\")\r\n\r\n  updatedGraph.fromJSON(JSON.parse(graph))\r\n  \r\n  paper.on('change: position', function(element){\r\n    console.log(`${element.id}:${element.id}`)\r\n  })\r\n\r\n  // console.log(\"paper model\")\r\n  // console.log(paper.model)\r\n\r\n  useEffect (() => {\r\n    // console.log(paper.dumpViews())\r\n    // paper.setDimensions(25)\r\n    dispatch(cast.actions.drawMap({ model: paper.model }))\r\n  }, [characters, bonds])\r\n  \r\n  \r\n\r\n//   var graph0 = new joint.dia.Graph({}, { cellNamespace: shapes });\r\n//   graph0.set('graphCustomProperty', true);\r\n//   graph0.set('graphExportTime', Date.now());\r\n//   var jsonObject = graph0.toJSON();\r\n  \r\n//   // transmission of `jsonObject` across network etc.\r\n  \r\n//   var graph2 = new joint.dia.Graph({}, { cellNamespace: shapes }); // new empty graph\r\n//   graph2.fromJSON(jsonObject);\r\n//   graph2.get('graphCustomProperty'); // true\r\n//   graph2.get('graphExportTime'); // e.g. 627247800000\r\n\r\n//   var graph1 = new joint.dia.Graph({}, { cellNamespace: shapes });\r\n\r\n//   let rectio = new joint.shapes.standard.Rectangle()\r\n//   rectio.position(150, 50)\r\n//   rectio.resize(100, 40)\r\n//   rectio.attr({\r\n//     body: {\r\n//       fill: 'green'\r\n//     },\r\n//     label: {\r\n//       text: 'Richard Feynman',\r\n//       fill: 'white'\r\n//     }\r\n//   })\r\n//   console.log(rectio)\r\n//   rectio.addTo(graph1)\r\n\r\n//   // transmission of `jsonString` across network etc.\r\n\r\n//   var graph3 = new joint.dia.Graph({}, { cellNamespace: shapes }); // new empty graph\r\n//   graph3.fromJSON({\r\n//     cells: [{\r\n//         id: 1,\r\n//         type: 'Circle',\r\n//         position: {\r\n//           x: 100,\r\n//           y: 100\r\n//         },\r\n//         size: {\r\n//           width: 100,\r\n//           height: 100\r\n//         }\r\n//     }]\r\n// });\r\n\r\n//   let paper = new joint.dia.Paper({\r\n//     el: document.getElementById('myholder'),\r\n//     model: graph3,\r\n//     cellViewNamespace: shapes,\r\n//     width: 800,\r\n//     height: 500, \r\n//     gridSize: 1\r\n//   })\r\n\r\n\r\n// let smog = new joint.dia.Graph({}, { cellNameSpace: shapes })\r\n// const cells = JSON.stringify(smog.toJSON());\r\n// smog.clear();\r\n// console.log(JSON.parse(cells))\r\n// smog.fromJSON(JSON.parse(cells));\r\n\r\n\r\n\r\n\r\n// console.log(joint.shapes)\r\n\r\n//   let graph = useSelector(store => store.cast.graph)\r\n//   let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes.standard.Rectangle.})\r\n//   let rectio = new joint.shapes.standard.Rectangle()\r\n//   rectio.position(150, 50)\r\n//   rectio.resize(100, 40)\r\n//   rectio.attr({\r\n//     body: {\r\n//       fill: 'green'\r\n//     },\r\n//     label: {\r\n//       text: 'Richard Feynman',\r\n//       fill: 'white'\r\n//     }\r\n//   })\r\n//   console.log(rectio)\r\n//   rectio.addTo(updatedGraph)\r\n  \r\n//   let superUpdatedGraph = new joint.dia.Graph({}, { cellNameSpace: shapes })\r\n//   console.log(updatedGraph.toJSON())\r\n//   superUpdatedGraph.clear()\r\n//   superUpdatedGraph.fromJSON(JSON.stringify(updatedGraph.toJSON()))\r\n\r\n\r\n\r\n\r\n  //superUpdatedGraph.fromJSON(updatedGraph.toJSON()) //this is where it GO WRONG: ERROR: dia.ElementView: markup required\r\n  // console.log(JSON.parse(graph))\r\n  \r\n  // updatedGraph.fromJSON(JSON.parse(graph))\r\n\r\n\r\n  // let graph = new joint.dia.Graph\r\n\r\n  //creating a new paper should only happen when a new one is needed. But where is a currently running paper stored?\r\n  //in the 'myholder' html element?? papers cannot be serialized, so they need to be kept somewhere which isn't redux store.\r\n  //But where? Where is it currently???\r\n  //How I think it has worked so far:\r\n  //> The Paper has been recreated from scratch on each render using the new graph as model. HOWEVER, this stops working\r\n  //with serialized graphs. SO, I need to start freezing a PERSISTING paper instead. This Paper needs to be stored somewhere.\r\n  //where does Priyansh store his Paper?\r\n\r\n  // let paper = new joint.dia.Paper({\r\n  //   el: document.getElementById('myholder'),\r\n  //   model: superUpdatedGraph,\r\n  //   cellViewNamespace: shapes,\r\n  //   width: 800,\r\n  //   height: 500, \r\n  //   gridSize: 1\r\n  // })\r\n\r\n  // const [value, setValue] = useState('')\r\n\r\n  // const onValueChange = (event) => {\r\n  //   setValue(event.target.value)\r\n  // }\r\n\r\n  // const onClick = (event) => {\r\n  //   event.preventDefault()\r\n  //   let rect = new joint.shapes.standard.Rectangle();\r\n  //   rect.position(150, 50);\r\n  //   rect.resize(100, 40);\r\n  //   rect.attr({\r\n  //     body: {\r\n  //       fill: 'green'\r\n  //     },\r\n  //     label: {\r\n  //       text: value,\r\n  //       fill: 'white'\r\n  //     }\r\n  //   });\r\n  //   rect.addTo(graph);\r\n  //   setValue('')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {/* <DrawCharacters />\r\n      <DrawBonds /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Container"]},"metadata":{},"sourceType":"module"}