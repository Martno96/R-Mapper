{"ast":null,"code":"import * as g from '../g/index.mjs';\nimport V from '../V/index.mjs';\nimport * as util from '../util/index.mjs';\nimport * as connectionStrategies from '../connectionStrategies/index.mjs';\nimport * as mvc from '../mvc/index.mjs';\nimport { ToolView } from '../dia/ToolView.mjs';\n\nfunction getAnchor(coords, view, magnet) {\n  // take advantage of an existing logic inside of the\n  // pin relative connection strategy\n  var end = connectionStrategies.pinRelative.call(this.paper, {}, view, magnet, coords, this.model);\n  return end.anchor;\n}\n\nfunction snapAnchor(coords, view, magnet, type, relatedView, toolView) {\n  var snapRadius = toolView.options.snapRadius;\n  var isSource = type === 'source';\n  var refIndex = isSource ? 0 : -1;\n  var ref = this.model.vertex(refIndex) || this.getEndAnchor(isSource ? 'target' : 'source');\n\n  if (ref) {\n    if (Math.abs(ref.x - coords.x) < snapRadius) coords.x = ref.x;\n    if (Math.abs(ref.y - coords.y) < snapRadius) coords.y = ref.y;\n  }\n\n  return coords;\n}\n\nfunction getViewBBox(view, useModelGeometry) {\n  const {\n    model\n  } = view;\n  if (useModelGeometry) return model.getBBox();\n  return model.isLink() ? view.getConnection().bbox() : view.getNodeUnrotatedBBox(view.el);\n} // Vertex Handles\n\n\nvar VertexHandle = mvc.View.extend({\n  tagName: 'circle',\n  svgElement: true,\n  className: 'marker-vertex',\n  events: {\n    mousedown: 'onPointerDown',\n    touchstart: 'onPointerDown',\n    dblclick: 'onDoubleClick'\n  },\n  documentEvents: {\n    mousemove: 'onPointerMove',\n    touchmove: 'onPointerMove',\n    mouseup: 'onPointerUp',\n    touchend: 'onPointerUp',\n    touchcancel: 'onPointerUp'\n  },\n  attributes: {\n    'r': 6,\n    'fill': '#33334F',\n    'stroke': '#FFFFFF',\n    'stroke-width': 2,\n    'cursor': 'move'\n  },\n  position: function (x, y) {\n    this.vel.attr({\n      cx: x,\n      cy: y\n    });\n  },\n  onPointerDown: function (evt) {\n    if (this.options.guard(evt)) return;\n    evt.stopPropagation();\n    evt.preventDefault();\n    this.options.paper.undelegateEvents();\n    this.delegateDocumentEvents(null, evt.data);\n    this.trigger('will-change', this, evt);\n  },\n  onPointerMove: function (evt) {\n    this.trigger('changing', this, evt);\n  },\n  onDoubleClick: function (evt) {\n    this.trigger('remove', this, evt);\n  },\n  onPointerUp: function (evt) {\n    this.trigger('changed', this, evt);\n    this.undelegateDocumentEvents();\n    this.options.paper.delegateEvents();\n  }\n});\nvar Vertices = ToolView.extend({\n  name: 'vertices',\n  options: {\n    handleClass: VertexHandle,\n    snapRadius: 20,\n    redundancyRemoval: true,\n    vertexAdding: true,\n    stopPropagation: true\n  },\n  children: [{\n    tagName: 'path',\n    selector: 'connection',\n    className: 'joint-vertices-path',\n    attributes: {\n      'fill': 'none',\n      'stroke': 'transparent',\n      'stroke-width': 10,\n      'cursor': 'cell'\n    }\n  }],\n  handles: null,\n  events: {\n    'mousedown .joint-vertices-path': 'onPathPointerDown',\n    'touchstart .joint-vertices-path': 'onPathPointerDown'\n  },\n  onRender: function () {\n    if (this.options.vertexAdding) {\n      this.renderChildren();\n      this.updatePath();\n    }\n\n    this.resetHandles();\n    this.renderHandles();\n    return this;\n  },\n  update: function () {\n    var relatedView = this.relatedView;\n    var vertices = relatedView.model.vertices();\n\n    if (vertices.length === this.handles.length) {\n      this.updateHandles();\n    } else {\n      this.resetHandles();\n      this.renderHandles();\n    }\n\n    if (this.options.vertexAdding) {\n      this.updatePath();\n    }\n\n    return this;\n  },\n  resetHandles: function () {\n    var handles = this.handles;\n    this.handles = [];\n    this.stopListening();\n    if (!Array.isArray(handles)) return;\n\n    for (var i = 0, n = handles.length; i < n; i++) {\n      handles[i].remove();\n    }\n  },\n  renderHandles: function () {\n    var relatedView = this.relatedView;\n    var vertices = relatedView.model.vertices();\n\n    for (var i = 0, n = vertices.length; i < n; i++) {\n      var vertex = vertices[i];\n      var handle = new this.options.handleClass({\n        index: i,\n        paper: this.paper,\n        guard: evt => this.guard(evt)\n      });\n      handle.render();\n      handle.position(vertex.x, vertex.y);\n      this.simulateRelatedView(handle.el);\n      handle.vel.appendTo(this.el);\n      this.handles.push(handle);\n      this.startHandleListening(handle);\n    }\n  },\n  updateHandles: function () {\n    var relatedView = this.relatedView;\n    var vertices = relatedView.model.vertices();\n\n    for (var i = 0, n = vertices.length; i < n; i++) {\n      var vertex = vertices[i];\n      var handle = this.handles[i];\n      if (!handle) return;\n      handle.position(vertex.x, vertex.y);\n    }\n  },\n  updatePath: function () {\n    var connection = this.childNodes.connection;\n    if (connection) connection.setAttribute('d', this.relatedView.getSerializedConnection());\n  },\n  startHandleListening: function (handle) {\n    var relatedView = this.relatedView;\n\n    if (relatedView.can('vertexMove')) {\n      this.listenTo(handle, 'will-change', this.onHandleWillChange);\n      this.listenTo(handle, 'changing', this.onHandleChanging);\n      this.listenTo(handle, 'changed', this.onHandleChanged);\n    }\n\n    if (relatedView.can('vertexRemove')) {\n      this.listenTo(handle, 'remove', this.onHandleRemove);\n    }\n  },\n  getNeighborPoints: function (index) {\n    var linkView = this.relatedView;\n    var vertices = linkView.model.vertices();\n    var prev = index > 0 ? vertices[index - 1] : linkView.sourceAnchor;\n    var next = index < vertices.length - 1 ? vertices[index + 1] : linkView.targetAnchor;\n    return {\n      prev: new g.Point(prev),\n      next: new g.Point(next)\n    };\n  },\n  onHandleWillChange: function (_handle, evt) {\n    this.focus();\n    const {\n      relatedView,\n      options\n    } = this;\n    relatedView.model.startBatch('vertex-move', {\n      ui: true,\n      tool: this.cid\n    });\n    if (!options.stopPropagation) relatedView.notifyPointerdown(...relatedView.paper.getPointerArgs(evt));\n  },\n  onHandleChanging: function (handle, evt) {\n    const {\n      options,\n      relatedView: linkView\n    } = this;\n    var index = handle.options.index;\n    var [normalizedEvent, x, y] = linkView.paper.getPointerArgs(evt);\n    var vertex = {\n      x,\n      y\n    };\n    this.snapVertex(vertex, index);\n    linkView.model.vertex(index, vertex, {\n      ui: true,\n      tool: this.cid\n    });\n    handle.position(vertex.x, vertex.y);\n    if (!options.stopPropagation) linkView.notifyPointermove(normalizedEvent, x, y);\n  },\n  onHandleChanged: function (_handle, evt) {\n    const {\n      options,\n      relatedView: linkView\n    } = this;\n    if (options.vertexAdding) this.updatePath();\n    if (!options.redundancyRemoval) return;\n    var verticesRemoved = linkView.removeRedundantLinearVertices({\n      ui: true,\n      tool: this.cid\n    });\n    if (verticesRemoved) this.render();\n    this.blur();\n    linkView.model.stopBatch('vertex-move', {\n      ui: true,\n      tool: this.cid\n    });\n\n    if (this.eventData(evt).vertexAdded) {\n      linkView.model.stopBatch('vertex-add', {\n        ui: true,\n        tool: this.cid\n      });\n    }\n\n    var [normalizedEvt, x, y] = linkView.paper.getPointerArgs(evt);\n    if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvt, x, y);\n    linkView.checkMouseleave(normalizedEvt);\n  },\n  snapVertex: function (vertex, index) {\n    var snapRadius = this.options.snapRadius;\n\n    if (snapRadius > 0) {\n      var neighbors = this.getNeighborPoints(index);\n      var prev = neighbors.prev;\n      var next = neighbors.next;\n\n      if (Math.abs(vertex.x - prev.x) < snapRadius) {\n        vertex.x = prev.x;\n      } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n        vertex.x = next.x;\n      }\n\n      if (Math.abs(vertex.y - prev.y) < snapRadius) {\n        vertex.y = neighbors.prev.y;\n      } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n        vertex.y = next.y;\n      }\n    }\n  },\n  onHandleRemove: function (handle, evt) {\n    var index = handle.options.index;\n    var linkView = this.relatedView;\n    linkView.model.removeVertex(index, {\n      ui: true\n    });\n    if (this.options.vertexAdding) this.updatePath();\n    linkView.checkMouseleave(util.normalizeEvent(evt));\n  },\n  onPathPointerDown: function (evt) {\n    if (this.guard(evt)) return;\n    evt.stopPropagation();\n    evt.preventDefault();\n    var normalizedEvent = util.normalizeEvent(evt);\n    var vertex = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY).toJSON();\n    var relatedView = this.relatedView;\n    relatedView.model.startBatch('vertex-add', {\n      ui: true,\n      tool: this.cid\n    });\n    var index = relatedView.getVertexIndex(vertex.x, vertex.y);\n    this.snapVertex(vertex, index);\n    relatedView.model.insertVertex(index, vertex, {\n      ui: true,\n      tool: this.cid\n    });\n    this.render();\n    var handle = this.handles[index];\n    this.eventData(normalizedEvent, {\n      vertexAdded: true\n    });\n    handle.onPointerDown(normalizedEvent);\n  },\n  onRemove: function () {\n    this.resetHandles();\n  }\n}, {\n  VertexHandle: VertexHandle // keep as class property\n\n});\nvar SegmentHandle = mvc.View.extend({\n  tagName: 'g',\n  svgElement: true,\n  className: 'marker-segment',\n  events: {\n    mousedown: 'onPointerDown',\n    touchstart: 'onPointerDown'\n  },\n  documentEvents: {\n    mousemove: 'onPointerMove',\n    touchmove: 'onPointerMove',\n    mouseup: 'onPointerUp',\n    touchend: 'onPointerUp',\n    touchcancel: 'onPointerUp'\n  },\n  children: [{\n    tagName: 'line',\n    selector: 'line',\n    attributes: {\n      'stroke': '#33334F',\n      'stroke-width': 2,\n      'fill': 'none',\n      'pointer-events': 'none'\n    }\n  }, {\n    tagName: 'rect',\n    selector: 'handle',\n    attributes: {\n      'width': 20,\n      'height': 8,\n      'x': -10,\n      'y': -4,\n      'rx': 4,\n      'ry': 4,\n      'fill': '#33334F',\n      'stroke': '#FFFFFF',\n      'stroke-width': 2\n    }\n  }],\n  onRender: function () {\n    this.renderChildren();\n  },\n  position: function (x, y, angle, view) {\n    var matrix = V.createSVGMatrix().translate(x, y).rotate(angle);\n    var handle = this.childNodes.handle;\n    handle.setAttribute('transform', V.matrixToTransformString(matrix));\n    handle.setAttribute('cursor', angle % 180 === 0 ? 'row-resize' : 'col-resize');\n    var viewPoint = view.getClosestPoint(new g.Point(x, y));\n    var line = this.childNodes.line;\n    line.setAttribute('x1', x);\n    line.setAttribute('y1', y);\n    line.setAttribute('x2', viewPoint.x);\n    line.setAttribute('y2', viewPoint.y);\n  },\n  onPointerDown: function (evt) {\n    if (this.options.guard(evt)) return;\n    this.trigger('change:start', this, evt);\n    evt.stopPropagation();\n    evt.preventDefault();\n    this.options.paper.undelegateEvents();\n    this.delegateDocumentEvents(null, evt.data);\n  },\n  onPointerMove: function (evt) {\n    this.trigger('changing', this, evt);\n  },\n  onPointerUp: function (evt) {\n    this.undelegateDocumentEvents();\n    this.options.paper.delegateEvents();\n    this.trigger('change:end', this, evt);\n  },\n  show: function () {\n    this.el.style.display = '';\n  },\n  hide: function () {\n    this.el.style.display = 'none';\n  }\n});\nvar Segments = ToolView.extend({\n  name: 'segments',\n  precision: .5,\n  options: {\n    handleClass: SegmentHandle,\n    segmentLengthThreshold: 40,\n    redundancyRemoval: true,\n    anchor: getAnchor,\n    snapRadius: 10,\n    snapHandle: true,\n    stopPropagation: true\n  },\n  handles: null,\n  onRender: function () {\n    this.resetHandles();\n    var relatedView = this.relatedView;\n    var vertices = relatedView.model.vertices();\n    vertices.unshift(relatedView.sourcePoint);\n    vertices.push(relatedView.targetPoint);\n\n    for (var i = 0, n = vertices.length; i < n - 1; i++) {\n      var vertex = vertices[i];\n      var nextVertex = vertices[i + 1];\n      var handle = this.renderHandle(vertex, nextVertex);\n      this.simulateRelatedView(handle.el);\n      this.handles.push(handle);\n      handle.options.index = i;\n    }\n\n    return this;\n  },\n  renderHandle: function (vertex, nextVertex) {\n    var handle = new this.options.handleClass({\n      paper: this.paper,\n      guard: evt => this.guard(evt)\n    });\n    handle.render();\n    this.updateHandle(handle, vertex, nextVertex);\n    handle.vel.appendTo(this.el);\n    this.startHandleListening(handle);\n    return handle;\n  },\n  update: function () {\n    this.render();\n    return this;\n  },\n  startHandleListening: function (handle) {\n    this.listenTo(handle, 'change:start', this.onHandleChangeStart);\n    this.listenTo(handle, 'changing', this.onHandleChanging);\n    this.listenTo(handle, 'change:end', this.onHandleChangeEnd);\n  },\n  resetHandles: function () {\n    var handles = this.handles;\n    this.handles = [];\n    this.stopListening();\n    if (!Array.isArray(handles)) return;\n\n    for (var i = 0, n = handles.length; i < n; i++) {\n      handles[i].remove();\n    }\n  },\n  shiftHandleIndexes: function (value) {\n    var handles = this.handles;\n\n    for (var i = 0, n = handles.length; i < n; i++) handles[i].options.index += value;\n  },\n  resetAnchor: function (type, anchor) {\n    var relatedModel = this.relatedView.model;\n\n    if (anchor) {\n      relatedModel.prop([type, 'anchor'], anchor, {\n        rewrite: true,\n        ui: true,\n        tool: this.cid\n      });\n    } else {\n      relatedModel.removeProp([type, 'anchor'], {\n        ui: true,\n        tool: this.cid\n      });\n    }\n  },\n  snapHandle: function (handle, position, data) {\n    var index = handle.options.index;\n    var linkView = this.relatedView;\n    var link = linkView.model;\n    var vertices = link.vertices();\n    var axis = handle.options.axis;\n    var prev = vertices[index - 2] || data.sourceAnchor;\n    var next = vertices[index + 1] || data.targetAnchor;\n    var snapRadius = this.options.snapRadius;\n\n    if (Math.abs(position[axis] - prev[axis]) < snapRadius) {\n      position[axis] = prev[axis];\n    } else if (Math.abs(position[axis] - next[axis]) < snapRadius) {\n      position[axis] = next[axis];\n    }\n\n    return position;\n  },\n  onHandleChanging: function (handle, evt) {\n    const {\n      options\n    } = this;\n    var data = this.eventData(evt);\n    var relatedView = this.relatedView;\n    var paper = relatedView.paper;\n    var index = handle.options.index - 1;\n    var normalizedEvent = util.normalizeEvent(evt);\n    var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    var position = this.snapHandle(handle, coords.clone(), data);\n    var axis = handle.options.axis;\n    var offset = this.options.snapHandle ? 0 : coords[axis] - position[axis];\n    var link = relatedView.model;\n    var vertices = util.cloneDeep(link.vertices());\n    var vertex = vertices[index];\n    var nextVertex = vertices[index + 1];\n    var anchorFn = this.options.anchor;\n    if (typeof anchorFn !== 'function') anchorFn = null; // First Segment\n\n    var sourceView = relatedView.sourceView;\n    var sourceBBox = relatedView.sourceBBox;\n    var changeSourceAnchor = false;\n    var deleteSourceAnchor = false;\n\n    if (!vertex) {\n      vertex = relatedView.sourceAnchor.toJSON();\n      vertex[axis] = position[axis];\n\n      if (sourceBBox.containsPoint(vertex)) {\n        vertex[axis] = position[axis];\n        changeSourceAnchor = true;\n      } else {\n        // we left the area of the source magnet for the first time\n        vertices.unshift(vertex);\n        this.shiftHandleIndexes(1);\n        deleteSourceAnchor = true;\n      }\n    } else if (index === 0) {\n      if (sourceBBox.containsPoint(vertex)) {\n        vertices.shift();\n        this.shiftHandleIndexes(-1);\n        changeSourceAnchor = true;\n      } else {\n        vertex[axis] = position[axis];\n        deleteSourceAnchor = true;\n      }\n    } else {\n      vertex[axis] = position[axis];\n    }\n\n    if (anchorFn && sourceView) {\n      if (changeSourceAnchor) {\n        var sourceAnchorPosition = data.sourceAnchor.clone();\n        sourceAnchorPosition[axis] = position[axis];\n        var sourceAnchor = anchorFn.call(relatedView, sourceAnchorPosition, sourceView, relatedView.sourceMagnet || sourceView.el, 'source', relatedView);\n        this.resetAnchor('source', sourceAnchor);\n      }\n\n      if (deleteSourceAnchor) {\n        this.resetAnchor('source', data.sourceAnchorDef);\n      }\n    } // Last segment\n\n\n    var targetView = relatedView.targetView;\n    var targetBBox = relatedView.targetBBox;\n    var changeTargetAnchor = false;\n    var deleteTargetAnchor = false;\n\n    if (!nextVertex) {\n      nextVertex = relatedView.targetAnchor.toJSON();\n      nextVertex[axis] = position[axis];\n\n      if (targetBBox.containsPoint(nextVertex)) {\n        changeTargetAnchor = true;\n      } else {\n        // we left the area of the target magnet for the first time\n        vertices.push(nextVertex);\n        deleteTargetAnchor = true;\n      }\n    } else if (index === vertices.length - 2) {\n      if (targetBBox.containsPoint(nextVertex)) {\n        vertices.pop();\n        changeTargetAnchor = true;\n      } else {\n        nextVertex[axis] = position[axis];\n        deleteTargetAnchor = true;\n      }\n    } else {\n      nextVertex[axis] = position[axis];\n    }\n\n    if (anchorFn && targetView) {\n      if (changeTargetAnchor) {\n        var targetAnchorPosition = data.targetAnchor.clone();\n        targetAnchorPosition[axis] = position[axis];\n        var targetAnchor = anchorFn.call(relatedView, targetAnchorPosition, targetView, relatedView.targetMagnet || targetView.el, 'target', relatedView);\n        this.resetAnchor('target', targetAnchor);\n      }\n\n      if (deleteTargetAnchor) {\n        this.resetAnchor('target', data.targetAnchorDef);\n      }\n    }\n\n    link.vertices(vertices, {\n      ui: true,\n      tool: this.cid\n    });\n    this.updateHandle(handle, vertex, nextVertex, offset);\n    if (!options.stopPropagation) relatedView.notifyPointermove(normalizedEvent, coords.x, coords.y);\n  },\n  onHandleChangeStart: function (handle, evt) {\n    const {\n      options,\n      handles,\n      relatedView: linkView\n    } = this;\n    const {\n      model,\n      paper\n    } = linkView;\n    var index = handle.options.index;\n    if (!Array.isArray(handles)) return;\n\n    for (var i = 0, n = handles.length; i < n; i++) {\n      if (i !== index) handles[i].hide();\n    }\n\n    this.focus();\n    this.eventData(evt, {\n      sourceAnchor: linkView.sourceAnchor.clone(),\n      targetAnchor: linkView.targetAnchor.clone(),\n      sourceAnchorDef: util.clone(model.prop(['source', 'anchor'])),\n      targetAnchorDef: util.clone(model.prop(['target', 'anchor']))\n    });\n    model.startBatch('segment-move', {\n      ui: true,\n      tool: this.cid\n    });\n    if (!options.stopPropagation) linkView.notifyPointerdown(...paper.getPointerArgs(evt));\n  },\n  onHandleChangeEnd: function (_handle, evt) {\n    const {\n      options,\n      relatedView: linkView\n    } = this;\n    const {\n      paper,\n      model\n    } = linkView;\n\n    if (options.redundancyRemoval) {\n      linkView.removeRedundantLinearVertices({\n        ui: true,\n        tool: this.cid\n      });\n    }\n\n    const normalizedEvent = util.normalizeEvent(evt);\n    const coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    this.render();\n    this.blur();\n    model.stopBatch('segment-move', {\n      ui: true,\n      tool: this.cid\n    });\n    if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvent, coords.x, coords.y);\n    linkView.checkMouseleave(normalizedEvent);\n  },\n  updateHandle: function (handle, vertex, nextVertex, offset) {\n    var vertical = Math.abs(vertex.x - nextVertex.x) < this.precision;\n    var horizontal = Math.abs(vertex.y - nextVertex.y) < this.precision;\n\n    if (vertical || horizontal) {\n      var segmentLine = new g.Line(vertex, nextVertex);\n      var length = segmentLine.length();\n\n      if (length < this.options.segmentLengthThreshold) {\n        handle.hide();\n      } else {\n        var position = segmentLine.midpoint();\n        var axis = vertical ? 'x' : 'y';\n        position[axis] += offset || 0;\n        var angle = segmentLine.vector().vectorAngle(new g.Point(1, 0));\n        handle.position(position.x, position.y, angle, this.relatedView);\n        handle.show();\n        handle.options.axis = axis;\n      }\n    } else {\n      handle.hide();\n    }\n  },\n  onRemove: function () {\n    this.resetHandles();\n  }\n}, {\n  SegmentHandle: SegmentHandle // keep as class property\n\n}); // End Markers\n\nvar Arrowhead = ToolView.extend({\n  tagName: 'path',\n  xAxisVector: new g.Point(1, 0),\n  events: {\n    mousedown: 'onPointerDown',\n    touchstart: 'onPointerDown'\n  },\n  documentEvents: {\n    mousemove: 'onPointerMove',\n    touchmove: 'onPointerMove',\n    mouseup: 'onPointerUp',\n    touchend: 'onPointerUp',\n    touchcancel: 'onPointerUp'\n  },\n  onRender: function () {\n    this.update();\n  },\n  update: function () {\n    var ratio = this.ratio;\n    var view = this.relatedView;\n    var tangent = view.getTangentAtRatio(ratio);\n    var position, angle;\n\n    if (tangent) {\n      position = tangent.start;\n      angle = tangent.vector().vectorAngle(this.xAxisVector) || 0;\n    } else {\n      position = view.getPointAtRatio(ratio);\n      angle = 0;\n    }\n\n    if (!position) return this;\n    var matrix = V.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n    this.vel.transform(matrix, {\n      absolute: true\n    });\n    return this;\n  },\n  onPointerDown: function (evt) {\n    if (this.guard(evt)) return;\n    evt.stopPropagation();\n    evt.preventDefault();\n    var relatedView = this.relatedView;\n    relatedView.model.startBatch('arrowhead-move', {\n      ui: true,\n      tool: this.cid\n    });\n\n    if (relatedView.can('arrowheadMove')) {\n      relatedView.startArrowheadMove(this.arrowheadType);\n      this.delegateDocumentEvents();\n      relatedView.paper.undelegateEvents();\n    }\n\n    this.focus();\n    this.el.style.pointerEvents = 'none';\n  },\n  onPointerMove: function (evt) {\n    var normalizedEvent = util.normalizeEvent(evt);\n    var coords = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    this.relatedView.pointermove(normalizedEvent, coords.x, coords.y);\n  },\n  onPointerUp: function (evt) {\n    this.undelegateDocumentEvents();\n    var relatedView = this.relatedView;\n    var paper = relatedView.paper;\n    var normalizedEvent = util.normalizeEvent(evt);\n    var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    relatedView.pointerup(normalizedEvent, coords.x, coords.y);\n    paper.delegateEvents();\n    this.blur();\n    this.el.style.pointerEvents = '';\n    relatedView.model.stopBatch('arrowhead-move', {\n      ui: true,\n      tool: this.cid\n    });\n  }\n});\nvar TargetArrowhead = Arrowhead.extend({\n  name: 'target-arrowhead',\n  ratio: 1,\n  arrowheadType: 'target',\n  attributes: {\n    'd': 'M -10 -8 10 0 -10 8 Z',\n    'fill': '#33334F',\n    'stroke': '#FFFFFF',\n    'stroke-width': 2,\n    'cursor': 'move',\n    'class': 'target-arrowhead'\n  }\n});\nvar SourceArrowhead = Arrowhead.extend({\n  name: 'source-arrowhead',\n  ratio: 0,\n  arrowheadType: 'source',\n  attributes: {\n    'd': 'M 10 -8 -10 0 10 8 Z',\n    'fill': '#33334F',\n    'stroke': '#FFFFFF',\n    'stroke-width': 2,\n    'cursor': 'move',\n    'class': 'source-arrowhead'\n  }\n});\nvar Button = ToolView.extend({\n  name: 'button',\n  events: {\n    'mousedown': 'onPointerDown',\n    'touchstart': 'onPointerDown'\n  },\n  options: {\n    distance: 0,\n    offset: 0,\n    rotate: false\n  },\n  onRender: function () {\n    this.renderChildren(this.options.markup);\n    this.update();\n  },\n  update: function () {\n    this.position();\n    return this;\n  },\n  position: function () {\n    const {\n      relatedView: view,\n      vel\n    } = this;\n    const matrix = view.model.isLink() ? this.getLinkMatrix() : this.getElementMatrix();\n    vel.transform(matrix, {\n      absolute: true\n    });\n  },\n\n  getElementMatrix() {\n    const {\n      relatedView: view,\n      options\n    } = this;\n    let {\n      x = 0,\n      y = 0,\n      offset = {},\n      useModelGeometry,\n      rotate\n    } = options;\n    let bbox = getViewBBox(view, useModelGeometry);\n    const angle = view.model.angle();\n    if (!rotate) bbox = bbox.bbox(angle);\n    const {\n      x: offsetX = 0,\n      y: offsetY = 0\n    } = offset;\n\n    if (util.isPercentage(x)) {\n      x = parseFloat(x) / 100 * bbox.width;\n    }\n\n    if (util.isPercentage(y)) {\n      y = parseFloat(y) / 100 * bbox.height;\n    }\n\n    let matrix = V.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n    if (rotate) matrix = matrix.rotate(angle);\n    matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n    return matrix;\n  },\n\n  getLinkMatrix() {\n    const {\n      relatedView: view,\n      options\n    } = this;\n    const {\n      offset = 0,\n      distance = 0,\n      rotate\n    } = options;\n    let tangent, position, angle;\n\n    if (util.isPercentage(distance)) {\n      tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n    } else {\n      tangent = view.getTangentAtLength(distance);\n    }\n\n    if (tangent) {\n      position = tangent.start;\n      angle = tangent.vector().vectorAngle(new g.Point(1, 0)) || 0;\n    } else {\n      position = view.getConnection().start;\n      angle = 0;\n    }\n\n    let matrix = V.createSVGMatrix().translate(position.x, position.y).rotate(angle).translate(0, offset);\n    if (!rotate) matrix = matrix.rotate(-angle);\n    return matrix;\n  },\n\n  onPointerDown: function (evt) {\n    if (this.guard(evt)) return;\n    evt.stopPropagation();\n    evt.preventDefault();\n    var actionFn = this.options.action;\n\n    if (typeof actionFn === 'function') {\n      actionFn.call(this.relatedView, evt, this.relatedView, this);\n    }\n  }\n});\nvar Remove = Button.extend({\n  children: [{\n    tagName: 'circle',\n    selector: 'button',\n    attributes: {\n      'r': 7,\n      'fill': '#FF1D00',\n      'cursor': 'pointer'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'icon',\n    attributes: {\n      'd': 'M -3 -3 3 3 M -3 3 3 -3',\n      'fill': 'none',\n      'stroke': '#FFFFFF',\n      'stroke-width': 2,\n      'pointer-events': 'none'\n    }\n  }],\n  options: {\n    distance: 60,\n    offset: 0,\n    action: function (evt, view, tool) {\n      view.model.remove({\n        ui: true,\n        tool: tool.cid\n      });\n    }\n  }\n});\nvar Boundary = ToolView.extend({\n  name: 'boundary',\n  tagName: 'rect',\n  options: {\n    padding: 10,\n    useModelGeometry: false\n  },\n  attributes: {\n    'fill': 'none',\n    'stroke': '#33334F',\n    'stroke-width': .5,\n    'stroke-dasharray': '5, 5',\n    'pointer-events': 'none'\n  },\n  onRender: function () {\n    this.update();\n  },\n  update: function () {\n    const {\n      relatedView: view,\n      options,\n      vel\n    } = this;\n    const {\n      useModelGeometry,\n      rotate\n    } = options;\n    const padding = util.normalizeSides(options.padding);\n    let bbox = getViewBBox(view, useModelGeometry).moveAndExpand({\n      x: -padding.left,\n      y: -padding.top,\n      width: padding.left + padding.right,\n      height: padding.top + padding.bottom\n    });\n    var model = view.model;\n\n    if (model.isElement()) {\n      var angle = model.angle();\n\n      if (angle) {\n        if (rotate) {\n          var origin = model.getBBox().center();\n          vel.rotate(angle, origin.x, origin.y, {\n            absolute: true\n          });\n        } else {\n          bbox = bbox.bbox(angle);\n        }\n      }\n    }\n\n    vel.attr(bbox.toJSON());\n    return this;\n  }\n});\nvar Anchor = ToolView.extend({\n  tagName: 'g',\n  type: null,\n  children: [{\n    tagName: 'circle',\n    selector: 'anchor',\n    attributes: {\n      'cursor': 'pointer'\n    }\n  }, {\n    tagName: 'rect',\n    selector: 'area',\n    attributes: {\n      'pointer-events': 'none',\n      'fill': 'none',\n      'stroke': '#33334F',\n      'stroke-dasharray': '2,4',\n      'rx': 5,\n      'ry': 5\n    }\n  }],\n  events: {\n    mousedown: 'onPointerDown',\n    touchstart: 'onPointerDown',\n    dblclick: 'onPointerDblClick'\n  },\n  documentEvents: {\n    mousemove: 'onPointerMove',\n    touchmove: 'onPointerMove',\n    mouseup: 'onPointerUp',\n    touchend: 'onPointerUp',\n    touchcancel: 'onPointerUp'\n  },\n  options: {\n    snap: snapAnchor,\n    anchor: getAnchor,\n    resetAnchor: true,\n    customAnchorAttributes: {\n      'stroke-width': 4,\n      'stroke': '#33334F',\n      'fill': '#FFFFFF',\n      'r': 5\n    },\n    defaultAnchorAttributes: {\n      'stroke-width': 2,\n      'stroke': '#FFFFFF',\n      'fill': '#33334F',\n      'r': 6\n    },\n    areaPadding: 6,\n    snapRadius: 10,\n    restrictArea: true,\n    redundancyRemoval: true\n  },\n  onRender: function () {\n    this.renderChildren();\n    this.toggleArea(false);\n    this.update();\n  },\n  update: function () {\n    var type = this.type;\n    var relatedView = this.relatedView;\n    var view = relatedView.getEndView(type);\n\n    if (view) {\n      this.updateAnchor();\n      this.updateArea();\n      this.el.style.display = '';\n    } else {\n      this.el.style.display = 'none';\n    }\n\n    return this;\n  },\n  updateAnchor: function () {\n    var childNodes = this.childNodes;\n    if (!childNodes) return;\n    var anchorNode = childNodes.anchor;\n    if (!anchorNode) return;\n    var relatedView = this.relatedView;\n    var type = this.type;\n    var position = relatedView.getEndAnchor(type);\n    var options = this.options;\n    var customAnchor = relatedView.model.prop([type, 'anchor']);\n    anchorNode.setAttribute('transform', 'translate(' + position.x + ',' + position.y + ')');\n    var anchorAttributes = customAnchor ? options.customAnchorAttributes : options.defaultAnchorAttributes;\n\n    for (var attrName in anchorAttributes) {\n      anchorNode.setAttribute(attrName, anchorAttributes[attrName]);\n    }\n  },\n  updateArea: function () {\n    var childNodes = this.childNodes;\n    if (!childNodes) return;\n    var areaNode = childNodes.area;\n    if (!areaNode) return;\n    var relatedView = this.relatedView;\n    var type = this.type;\n    var view = relatedView.getEndView(type);\n    var model = view.model;\n    var magnet = relatedView.getEndMagnet(type);\n    var padding = this.options.areaPadding;\n    if (!isFinite(padding)) padding = 0;\n    var bbox, angle, center;\n\n    if (view.isNodeConnection(magnet)) {\n      bbox = view.getBBox();\n      angle = 0;\n      center = bbox.center();\n    } else {\n      bbox = view.getNodeUnrotatedBBox(magnet);\n      angle = model.angle();\n      center = bbox.center();\n      if (angle) center.rotate(model.getBBox().center(), -angle); // TODO: get the link's magnet rotation into account\n    }\n\n    bbox.inflate(padding);\n    areaNode.setAttribute('x', -bbox.width / 2);\n    areaNode.setAttribute('y', -bbox.height / 2);\n    areaNode.setAttribute('width', bbox.width);\n    areaNode.setAttribute('height', bbox.height);\n    areaNode.setAttribute('transform', 'translate(' + center.x + ',' + center.y + ') rotate(' + angle + ')');\n  },\n  toggleArea: function (visible) {\n    this.childNodes.area.style.display = visible ? '' : 'none';\n  },\n  onPointerDown: function (evt) {\n    if (this.guard(evt)) return;\n    evt.stopPropagation();\n    evt.preventDefault();\n    this.paper.undelegateEvents();\n    this.delegateDocumentEvents();\n    this.focus();\n    this.toggleArea(this.options.restrictArea);\n    this.relatedView.model.startBatch('anchor-move', {\n      ui: true,\n      tool: this.cid\n    });\n  },\n  resetAnchor: function (anchor) {\n    var type = this.type;\n    var relatedModel = this.relatedView.model;\n\n    if (anchor) {\n      relatedModel.prop([type, 'anchor'], anchor, {\n        rewrite: true,\n        ui: true,\n        tool: this.cid\n      });\n    } else {\n      relatedModel.removeProp([type, 'anchor'], {\n        ui: true,\n        tool: this.cid\n      });\n    }\n  },\n  onPointerMove: function (evt) {\n    var relatedView = this.relatedView;\n    var type = this.type;\n    var view = relatedView.getEndView(type);\n    var model = view.model;\n    var magnet = relatedView.getEndMagnet(type);\n    var normalizedEvent = util.normalizeEvent(evt);\n    var coords = this.paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);\n    var snapFn = this.options.snap;\n\n    if (typeof snapFn === 'function') {\n      coords = snapFn.call(relatedView, coords, view, magnet, type, relatedView, this);\n      coords = new g.Point(coords);\n    }\n\n    if (this.options.restrictArea) {\n      if (view.isNodeConnection(magnet)) {\n        // snap coords to the link's connection\n        var pointAtConnection = view.getClosestPoint(coords);\n        if (pointAtConnection) coords = pointAtConnection;\n      } else {\n        // snap coords within node bbox\n        var bbox = view.getNodeUnrotatedBBox(magnet);\n        var angle = model.angle();\n        var origin = model.getBBox().center();\n        var rotatedCoords = coords.clone().rotate(origin, angle);\n\n        if (!bbox.containsPoint(rotatedCoords)) {\n          coords = bbox.pointNearestToPoint(rotatedCoords).rotate(origin, -angle);\n        }\n      }\n    }\n\n    var anchor;\n    var anchorFn = this.options.anchor;\n\n    if (typeof anchorFn === 'function') {\n      anchor = anchorFn.call(relatedView, coords, view, magnet, type, relatedView);\n    }\n\n    this.resetAnchor(anchor);\n    this.update();\n  },\n  onPointerUp: function (evt) {\n    this.paper.delegateEvents();\n    this.undelegateDocumentEvents();\n    this.blur();\n    this.toggleArea(false);\n    var linkView = this.relatedView;\n    if (this.options.redundancyRemoval) linkView.removeRedundantLinearVertices({\n      ui: true,\n      tool: this.cid\n    });\n    linkView.model.stopBatch('anchor-move', {\n      ui: true,\n      tool: this.cid\n    });\n  },\n  onPointerDblClick: function () {\n    var anchor = this.options.resetAnchor;\n    if (anchor === false) return; // reset anchor disabled\n\n    if (anchor === true) anchor = null; // remove the current anchor\n\n    this.resetAnchor(util.cloneDeep(anchor));\n    this.update();\n  }\n});\nvar SourceAnchor = Anchor.extend({\n  name: 'source-anchor',\n  type: 'source'\n});\nvar TargetAnchor = Anchor.extend({\n  name: 'target-anchor',\n  type: 'target'\n});\nexport { Vertices, Segments, SourceArrowhead, TargetArrowhead, SourceAnchor, TargetAnchor, Button, Remove, Boundary };","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/node_modules/jointjs/src/linkTools/index.mjs"],"names":["g","V","util","connectionStrategies","mvc","ToolView","getAnchor","coords","view","magnet","end","pinRelative","call","paper","model","anchor","snapAnchor","type","relatedView","toolView","snapRadius","options","isSource","refIndex","ref","vertex","getEndAnchor","Math","abs","x","y","getViewBBox","useModelGeometry","getBBox","isLink","getConnection","bbox","getNodeUnrotatedBBox","el","VertexHandle","View","extend","tagName","svgElement","className","events","mousedown","touchstart","dblclick","documentEvents","mousemove","touchmove","mouseup","touchend","touchcancel","attributes","position","vel","attr","cx","cy","onPointerDown","evt","guard","stopPropagation","preventDefault","undelegateEvents","delegateDocumentEvents","data","trigger","onPointerMove","onDoubleClick","onPointerUp","undelegateDocumentEvents","delegateEvents","Vertices","name","handleClass","redundancyRemoval","vertexAdding","children","selector","handles","onRender","renderChildren","updatePath","resetHandles","renderHandles","update","vertices","length","updateHandles","stopListening","Array","isArray","i","n","remove","handle","index","render","simulateRelatedView","appendTo","push","startHandleListening","connection","childNodes","setAttribute","getSerializedConnection","can","listenTo","onHandleWillChange","onHandleChanging","onHandleChanged","onHandleRemove","getNeighborPoints","linkView","prev","sourceAnchor","next","targetAnchor","Point","_handle","focus","startBatch","ui","tool","cid","notifyPointerdown","getPointerArgs","normalizedEvent","snapVertex","notifyPointermove","verticesRemoved","removeRedundantLinearVertices","blur","stopBatch","eventData","vertexAdded","normalizedEvt","notifyPointerup","checkMouseleave","neighbors","removeVertex","normalizeEvent","onPathPointerDown","snapToGrid","clientX","clientY","toJSON","getVertexIndex","insertVertex","onRemove","SegmentHandle","angle","matrix","createSVGMatrix","translate","rotate","matrixToTransformString","viewPoint","getClosestPoint","line","show","style","display","hide","Segments","precision","segmentLengthThreshold","snapHandle","unshift","sourcePoint","targetPoint","nextVertex","renderHandle","updateHandle","onHandleChangeStart","onHandleChangeEnd","shiftHandleIndexes","value","resetAnchor","relatedModel","prop","rewrite","removeProp","link","axis","clone","offset","cloneDeep","anchorFn","sourceView","sourceBBox","changeSourceAnchor","deleteSourceAnchor","containsPoint","shift","sourceAnchorPosition","sourceMagnet","sourceAnchorDef","targetView","targetBBox","changeTargetAnchor","deleteTargetAnchor","pop","targetAnchorPosition","targetMagnet","targetAnchorDef","vertical","horizontal","segmentLine","Line","midpoint","vector","vectorAngle","Arrowhead","xAxisVector","ratio","tangent","getTangentAtRatio","start","getPointAtRatio","transform","absolute","startArrowheadMove","arrowheadType","pointerEvents","pointermove","pointerup","TargetArrowhead","SourceArrowhead","Button","distance","markup","getLinkMatrix","getElementMatrix","offsetX","offsetY","isPercentage","parseFloat","width","height","getTangentAtLength","actionFn","action","Remove","Boundary","padding","normalizeSides","moveAndExpand","left","top","right","bottom","isElement","origin","center","Anchor","snap","customAnchorAttributes","defaultAnchorAttributes","areaPadding","restrictArea","toggleArea","getEndView","updateAnchor","updateArea","anchorNode","customAnchor","anchorAttributes","attrName","areaNode","area","getEndMagnet","isFinite","isNodeConnection","inflate","visible","clientToLocalPoint","snapFn","pointAtConnection","rotatedCoords","pointNearestToPoint","onPointerDblClick","SourceAnchor","TargetAnchor"],"mappings":"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","sourcesContent":["import * as g from '../g/index.mjs';\nimport V from '../V/index.mjs';\nimport * as util from '../util/index.mjs';\nimport * as connectionStrategies from '../connectionStrategies/index.mjs';\nimport * as mvc from '../mvc/index.mjs';\nimport { ToolView } from '../dia/ToolView.mjs';\n\nfunction getAnchor(coords, view, magnet) {\n    // take advantage of an existing logic inside of the\n    // pin relative connection strategy\n    var end = connectionStrategies.pinRelative.call(\n        this.paper,\n        {},\n        view,\n        magnet,\n        coords,\n        this.model\n    );\n    return end.anchor;\n}\n\nfunction snapAnchor(coords, view, magnet, type, relatedView, toolView) {\n    var snapRadius = toolView.options.snapRadius;\n    var isSource = (type === 'source');\n    var refIndex = (isSource ? 0 : -1);\n    var ref = this.model.vertex(refIndex) || this.getEndAnchor(isSource ? 'target' : 'source');\n    if (ref) {\n        if (Math.abs(ref.x - coords.x) < snapRadius) coords.x = ref.x;\n        if (Math.abs(ref.y - coords.y) < snapRadius) coords.y = ref.y;\n    }\n    return coords;\n}\n\nfunction getViewBBox(view, useModelGeometry) {\n    const { model } = view;\n    if (useModelGeometry) return model.getBBox();\n    return (model.isLink()) ? view.getConnection().bbox() : view.getNodeUnrotatedBBox(view.el);\n}\n\n// Vertex Handles\nvar VertexHandle = mvc.View.extend({\n    tagName: 'circle',\n    svgElement: true,\n    className: 'marker-vertex',\n    events: {\n        mousedown: 'onPointerDown',\n        touchstart: 'onPointerDown',\n        dblclick: 'onDoubleClick'\n    },\n    documentEvents: {\n        mousemove: 'onPointerMove',\n        touchmove: 'onPointerMove',\n        mouseup: 'onPointerUp',\n        touchend: 'onPointerUp',\n        touchcancel: 'onPointerUp'\n    },\n    attributes: {\n        'r': 6,\n        'fill': '#33334F',\n        'stroke': '#FFFFFF',\n        'stroke-width': 2,\n        'cursor': 'move'\n    },\n    position: function(x, y) {\n        this.vel.attr({ cx: x, cy: y });\n    },\n    onPointerDown: function(evt) {\n        if (this.options.guard(evt)) return;\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.options.paper.undelegateEvents();\n        this.delegateDocumentEvents(null, evt.data);\n        this.trigger('will-change', this, evt);\n    },\n    onPointerMove: function(evt) {\n        this.trigger('changing', this, evt);\n    },\n    onDoubleClick: function(evt) {\n        this.trigger('remove', this, evt);\n    },\n    onPointerUp: function(evt) {\n        this.trigger('changed', this, evt);\n        this.undelegateDocumentEvents();\n        this.options.paper.delegateEvents();\n    }\n});\n\nvar Vertices = ToolView.extend({\n    name: 'vertices',\n    options: {\n        handleClass: VertexHandle,\n        snapRadius: 20,\n        redundancyRemoval: true,\n        vertexAdding: true,\n        stopPropagation: true\n    },\n    children: [{\n        tagName: 'path',\n        selector: 'connection',\n        className: 'joint-vertices-path',\n        attributes: {\n            'fill': 'none',\n            'stroke': 'transparent',\n            'stroke-width': 10,\n            'cursor': 'cell'\n        }\n    }],\n    handles: null,\n    events: {\n        'mousedown .joint-vertices-path': 'onPathPointerDown',\n        'touchstart .joint-vertices-path': 'onPathPointerDown'\n    },\n    onRender: function() {\n        if (this.options.vertexAdding) {\n            this.renderChildren();\n            this.updatePath();\n        }\n        this.resetHandles();\n        this.renderHandles();\n        return this;\n    },\n    update: function() {\n        var relatedView = this.relatedView;\n        var vertices = relatedView.model.vertices();\n        if (vertices.length === this.handles.length) {\n            this.updateHandles();\n        } else {\n            this.resetHandles();\n            this.renderHandles();\n        }\n        if (this.options.vertexAdding) {\n            this.updatePath();\n        }\n        return this;\n    },\n    resetHandles: function() {\n        var handles = this.handles;\n        this.handles = [];\n        this.stopListening();\n        if (!Array.isArray(handles)) return;\n        for (var i = 0, n = handles.length; i < n; i++) {\n            handles[i].remove();\n        }\n    },\n    renderHandles: function() {\n        var relatedView = this.relatedView;\n        var vertices = relatedView.model.vertices();\n        for (var i = 0, n = vertices.length; i < n; i++) {\n            var vertex = vertices[i];\n            var handle = new (this.options.handleClass)({\n                index: i,\n                paper: this.paper,\n                guard: evt => this.guard(evt)\n            });\n            handle.render();\n            handle.position(vertex.x, vertex.y);\n            this.simulateRelatedView(handle.el);\n            handle.vel.appendTo(this.el);\n            this.handles.push(handle);\n            this.startHandleListening(handle);\n        }\n    },\n    updateHandles: function() {\n        var relatedView = this.relatedView;\n        var vertices = relatedView.model.vertices();\n        for (var i = 0, n = vertices.length; i < n; i++) {\n            var vertex = vertices[i];\n            var handle = this.handles[i];\n            if (!handle) return;\n            handle.position(vertex.x, vertex.y);\n        }\n    },\n    updatePath: function() {\n        var connection = this.childNodes.connection;\n        if (connection) connection.setAttribute('d', this.relatedView.getSerializedConnection());\n    },\n    startHandleListening: function(handle) {\n        var relatedView = this.relatedView;\n        if (relatedView.can('vertexMove')) {\n            this.listenTo(handle, 'will-change', this.onHandleWillChange);\n            this.listenTo(handle, 'changing', this.onHandleChanging);\n            this.listenTo(handle, 'changed', this.onHandleChanged);\n        }\n        if (relatedView.can('vertexRemove')) {\n            this.listenTo(handle, 'remove', this.onHandleRemove);\n        }\n    },\n    getNeighborPoints: function(index) {\n        var linkView = this.relatedView;\n        var vertices = linkView.model.vertices();\n        var prev = (index > 0) ? vertices[index - 1] : linkView.sourceAnchor;\n        var next = (index < vertices.length - 1) ? vertices[index + 1] : linkView.targetAnchor;\n        return {\n            prev: new g.Point(prev),\n            next: new g.Point(next)\n        };\n    },\n    onHandleWillChange: function(_handle, evt) {\n        this.focus();\n        const { relatedView, options } = this;\n        relatedView.model.startBatch('vertex-move', { ui: true, tool: this.cid });\n        if (!options.stopPropagation) relatedView.notifyPointerdown(...relatedView.paper.getPointerArgs(evt));\n    },\n    onHandleChanging: function(handle, evt) {\n        const { options, relatedView: linkView } = this;\n        var index = handle.options.index;\n        var [normalizedEvent, x, y] = linkView.paper.getPointerArgs(evt);\n        var vertex = { x, y };\n        this.snapVertex(vertex, index);\n        linkView.model.vertex(index, vertex, { ui: true, tool: this.cid });\n        handle.position(vertex.x, vertex.y);\n        if (!options.stopPropagation) linkView.notifyPointermove(normalizedEvent, x, y);\n    },\n    onHandleChanged: function(_handle, evt) {\n        const { options, relatedView: linkView } = this;\n        if (options.vertexAdding) this.updatePath();\n        if (!options.redundancyRemoval) return;\n        var verticesRemoved = linkView.removeRedundantLinearVertices({ ui: true, tool: this.cid });\n        if (verticesRemoved) this.render();\n        this.blur();\n        linkView.model.stopBatch('vertex-move', { ui: true, tool: this.cid });\n        if (this.eventData(evt).vertexAdded) {\n            linkView.model.stopBatch('vertex-add', { ui: true, tool: this.cid });\n        }\n        var [normalizedEvt, x, y] = linkView.paper.getPointerArgs(evt);\n        if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvt, x, y);\n        linkView.checkMouseleave(normalizedEvt);\n    },\n    snapVertex: function(vertex, index) {\n        var snapRadius = this.options.snapRadius;\n        if (snapRadius > 0) {\n            var neighbors = this.getNeighborPoints(index);\n            var prev = neighbors.prev;\n            var next = neighbors.next;\n            if (Math.abs(vertex.x - prev.x) < snapRadius) {\n                vertex.x = prev.x;\n            } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n                vertex.x = next.x;\n            }\n            if (Math.abs(vertex.y - prev.y) < snapRadius) {\n                vertex.y = neighbors.prev.y;\n            } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n                vertex.y = next.y;\n            }\n        }\n    },\n    onHandleRemove: function(handle, evt) {\n        var index = handle.options.index;\n        var linkView = this.relatedView;\n        linkView.model.removeVertex(index, { ui: true });\n        if (this.options.vertexAdding) this.updatePath();\n        linkView.checkMouseleave(util.normalizeEvent(evt));\n    },\n    onPathPointerDown: function(evt) {\n        if (this.guard(evt)) return;\n        evt.stopPropagation();\n        evt.preventDefault();\n        var normalizedEvent = util.normalizeEvent(evt);\n        var vertex = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY).toJSON();\n        var relatedView = this.relatedView;\n        relatedView.model.startBatch('vertex-add', { ui: true, tool: this.cid });\n        var index = relatedView.getVertexIndex(vertex.x, vertex.y);\n        this.snapVertex(vertex, index);\n        relatedView.model.insertVertex(index, vertex, { ui: true, tool: this.cid });\n        this.render();\n        var handle = this.handles[index];\n        this.eventData(normalizedEvent, { vertexAdded: true });\n        handle.onPointerDown(normalizedEvent);\n    },\n    onRemove: function() {\n        this.resetHandles();\n    }\n}, {\n    VertexHandle: VertexHandle // keep as class property\n});\n\nvar SegmentHandle = mvc.View.extend({\n    tagName: 'g',\n    svgElement: true,\n    className: 'marker-segment',\n    events: {\n        mousedown: 'onPointerDown',\n        touchstart: 'onPointerDown'\n    },\n    documentEvents: {\n        mousemove: 'onPointerMove',\n        touchmove: 'onPointerMove',\n        mouseup: 'onPointerUp',\n        touchend: 'onPointerUp',\n        touchcancel: 'onPointerUp'\n    },\n    children: [{\n        tagName: 'line',\n        selector: 'line',\n        attributes: {\n            'stroke': '#33334F',\n            'stroke-width': 2,\n            'fill': 'none',\n            'pointer-events': 'none'\n        }\n    }, {\n        tagName: 'rect',\n        selector: 'handle',\n        attributes: {\n            'width': 20,\n            'height': 8,\n            'x': -10,\n            'y': -4,\n            'rx': 4,\n            'ry': 4,\n            'fill': '#33334F',\n            'stroke': '#FFFFFF',\n            'stroke-width': 2\n        }\n    }],\n    onRender: function() {\n        this.renderChildren();\n    },\n    position: function(x, y, angle, view) {\n\n        var matrix = V.createSVGMatrix().translate(x, y).rotate(angle);\n        var handle = this.childNodes.handle;\n        handle.setAttribute('transform', V.matrixToTransformString(matrix));\n        handle.setAttribute('cursor', (angle % 180 === 0) ? 'row-resize' : 'col-resize');\n\n        var viewPoint = view.getClosestPoint(new g.Point(x, y));\n        var line = this.childNodes.line;\n        line.setAttribute('x1', x);\n        line.setAttribute('y1', y);\n        line.setAttribute('x2', viewPoint.x);\n        line.setAttribute('y2', viewPoint.y);\n    },\n    onPointerDown: function(evt) {\n        if (this.options.guard(evt)) return;\n        this.trigger('change:start', this, evt);\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.options.paper.undelegateEvents();\n        this.delegateDocumentEvents(null, evt.data);\n    },\n    onPointerMove: function(evt) {\n        this.trigger('changing', this, evt);\n    },\n    onPointerUp: function(evt) {\n        this.undelegateDocumentEvents();\n        this.options.paper.delegateEvents();\n        this.trigger('change:end', this, evt);\n    },\n    show: function() {\n        this.el.style.display = '';\n    },\n    hide: function() {\n        this.el.style.display = 'none';\n    }\n});\n\nvar Segments = ToolView.extend({\n    name: 'segments',\n    precision: .5,\n    options: {\n        handleClass: SegmentHandle,\n        segmentLengthThreshold: 40,\n        redundancyRemoval: true,\n        anchor: getAnchor,\n        snapRadius: 10,\n        snapHandle: true,\n        stopPropagation: true\n    },\n    handles: null,\n    onRender: function() {\n        this.resetHandles();\n        var relatedView = this.relatedView;\n        var vertices = relatedView.model.vertices();\n        vertices.unshift(relatedView.sourcePoint);\n        vertices.push(relatedView.targetPoint);\n        for (var i = 0, n = vertices.length; i < n - 1; i++) {\n            var vertex = vertices[i];\n            var nextVertex = vertices[i + 1];\n            var handle = this.renderHandle(vertex, nextVertex);\n            this.simulateRelatedView(handle.el);\n            this.handles.push(handle);\n            handle.options.index = i;\n        }\n        return this;\n    },\n    renderHandle: function(vertex, nextVertex) {\n        var handle = new (this.options.handleClass)({\n            paper: this.paper,\n            guard: evt => this.guard(evt)\n        });\n        handle.render();\n        this.updateHandle(handle, vertex, nextVertex);\n        handle.vel.appendTo(this.el);\n        this.startHandleListening(handle);\n        return handle;\n    },\n    update: function() {\n        this.render();\n        return this;\n    },\n    startHandleListening: function(handle) {\n        this.listenTo(handle, 'change:start', this.onHandleChangeStart);\n        this.listenTo(handle, 'changing', this.onHandleChanging);\n        this.listenTo(handle, 'change:end', this.onHandleChangeEnd);\n    },\n    resetHandles: function() {\n        var handles = this.handles;\n        this.handles = [];\n        this.stopListening();\n        if (!Array.isArray(handles)) return;\n        for (var i = 0, n = handles.length; i < n; i++) {\n            handles[i].remove();\n        }\n    },\n    shiftHandleIndexes: function(value) {\n        var handles = this.handles;\n        for (var i = 0, n = handles.length; i < n; i++) handles[i].options.index += value;\n    },\n    resetAnchor: function(type, anchor) {\n        var relatedModel = this.relatedView.model;\n        if (anchor) {\n            relatedModel.prop([type, 'anchor'], anchor, {\n                rewrite: true,\n                ui: true,\n                tool: this.cid\n            });\n        } else {\n            relatedModel.removeProp([type, 'anchor'], {\n                ui: true,\n                tool: this.cid\n            });\n        }\n    },\n    snapHandle: function(handle, position, data) {\n\n        var index = handle.options.index;\n        var linkView = this.relatedView;\n        var link = linkView.model;\n        var vertices = link.vertices();\n        var axis = handle.options.axis;\n        var prev = vertices[index - 2] || data.sourceAnchor;\n        var next = vertices[index + 1] || data.targetAnchor;\n        var snapRadius = this.options.snapRadius;\n        if (Math.abs(position[axis] - prev[axis]) < snapRadius) {\n            position[axis] = prev[axis];\n        } else if (Math.abs(position[axis] - next[axis]) < snapRadius) {\n            position[axis] = next[axis];\n        }\n        return position;\n    },\n\n    onHandleChanging: function(handle, evt) {\n\n        const { options } = this;\n        var data = this.eventData(evt);\n        var relatedView = this.relatedView;\n        var paper = relatedView.paper;\n        var index = handle.options.index - 1;\n        var normalizedEvent = util.normalizeEvent(evt);\n        var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        var position = this.snapHandle(handle, coords.clone(), data);\n        var axis = handle.options.axis;\n        var offset = (this.options.snapHandle) ? 0 : (coords[axis] - position[axis]);\n        var link = relatedView.model;\n        var vertices = util.cloneDeep(link.vertices());\n        var vertex = vertices[index];\n        var nextVertex = vertices[index + 1];\n        var anchorFn = this.options.anchor;\n        if (typeof anchorFn !== 'function') anchorFn = null;\n\n        // First Segment\n        var sourceView = relatedView.sourceView;\n        var sourceBBox = relatedView.sourceBBox;\n        var changeSourceAnchor = false;\n        var deleteSourceAnchor = false;\n        if (!vertex) {\n            vertex = relatedView.sourceAnchor.toJSON();\n            vertex[axis] = position[axis];\n            if (sourceBBox.containsPoint(vertex)) {\n                vertex[axis] = position[axis];\n                changeSourceAnchor = true;\n            } else {\n                // we left the area of the source magnet for the first time\n                vertices.unshift(vertex);\n                this.shiftHandleIndexes(1);\n                deleteSourceAnchor = true;\n            }\n        } else if (index === 0) {\n            if (sourceBBox.containsPoint(vertex)) {\n                vertices.shift();\n                this.shiftHandleIndexes(-1);\n                changeSourceAnchor = true;\n            } else {\n                vertex[axis] = position[axis];\n                deleteSourceAnchor = true;\n            }\n        } else {\n            vertex[axis] = position[axis];\n        }\n\n        if (anchorFn && sourceView) {\n            if (changeSourceAnchor) {\n                var sourceAnchorPosition = data.sourceAnchor.clone();\n                sourceAnchorPosition[axis] = position[axis];\n                var sourceAnchor = anchorFn.call(relatedView, sourceAnchorPosition, sourceView, relatedView.sourceMagnet || sourceView.el, 'source', relatedView);\n                this.resetAnchor('source', sourceAnchor);\n            }\n            if (deleteSourceAnchor) {\n                this.resetAnchor('source', data.sourceAnchorDef);\n            }\n        }\n\n        // Last segment\n        var targetView = relatedView.targetView;\n        var targetBBox = relatedView.targetBBox;\n        var changeTargetAnchor = false;\n        var deleteTargetAnchor = false;\n        if (!nextVertex) {\n            nextVertex = relatedView.targetAnchor.toJSON();\n            nextVertex[axis] = position[axis];\n            if (targetBBox.containsPoint(nextVertex)) {\n                changeTargetAnchor = true;\n            } else {\n                // we left the area of the target magnet for the first time\n                vertices.push(nextVertex);\n                deleteTargetAnchor = true;\n            }\n        } else if (index === vertices.length - 2) {\n            if (targetBBox.containsPoint(nextVertex)) {\n                vertices.pop();\n                changeTargetAnchor = true;\n            } else {\n                nextVertex[axis] = position[axis];\n                deleteTargetAnchor = true;\n            }\n        } else {\n            nextVertex[axis] = position[axis];\n        }\n\n        if (anchorFn && targetView) {\n            if (changeTargetAnchor) {\n                var targetAnchorPosition = data.targetAnchor.clone();\n                targetAnchorPosition[axis] = position[axis];\n                var targetAnchor = anchorFn.call(relatedView, targetAnchorPosition, targetView, relatedView.targetMagnet || targetView.el, 'target', relatedView);\n                this.resetAnchor('target', targetAnchor);\n            }\n            if (deleteTargetAnchor) {\n                this.resetAnchor('target', data.targetAnchorDef);\n            }\n        }\n\n        link.vertices(vertices, { ui: true, tool: this.cid });\n        this.updateHandle(handle, vertex, nextVertex, offset);\n        if (!options.stopPropagation) relatedView.notifyPointermove(normalizedEvent, coords.x, coords.y);\n    },\n    onHandleChangeStart: function(handle, evt) {\n        const { options, handles, relatedView: linkView } = this;\n        const { model, paper } = linkView;\n        var index = handle.options.index;\n        if (!Array.isArray(handles)) return;\n        for (var i = 0, n = handles.length; i < n; i++) {\n            if (i !== index) handles[i].hide();\n        }\n        this.focus();\n        this.eventData(evt, {\n            sourceAnchor: linkView.sourceAnchor.clone(),\n            targetAnchor: linkView.targetAnchor.clone(),\n            sourceAnchorDef: util.clone(model.prop(['source', 'anchor'])),\n            targetAnchorDef: util.clone(model.prop(['target', 'anchor']))\n        });\n        model.startBatch('segment-move', { ui: true, tool: this.cid });\n        if (!options.stopPropagation) linkView.notifyPointerdown(...paper.getPointerArgs(evt));\n    },\n    onHandleChangeEnd: function(_handle, evt) {\n        const { options, relatedView: linkView }= this;\n        const { paper, model } = linkView;\n        if (options.redundancyRemoval) {\n            linkView.removeRedundantLinearVertices({ ui: true, tool: this.cid });\n        }\n        const normalizedEvent = util.normalizeEvent(evt);\n        const coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        this.render();\n        this.blur();\n        model.stopBatch('segment-move', { ui: true, tool: this.cid });\n        if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvent, coords.x, coords.y);\n        linkView.checkMouseleave(normalizedEvent);\n    },\n    updateHandle: function(handle, vertex, nextVertex, offset) {\n        var vertical = Math.abs(vertex.x - nextVertex.x) < this.precision;\n        var horizontal = Math.abs(vertex.y - nextVertex.y) < this.precision;\n        if (vertical || horizontal) {\n            var segmentLine = new g.Line(vertex, nextVertex);\n            var length = segmentLine.length();\n            if (length < this.options.segmentLengthThreshold) {\n                handle.hide();\n            } else {\n                var position = segmentLine.midpoint();\n                var axis = (vertical) ? 'x' : 'y';\n                position[axis] += offset || 0;\n                var angle = segmentLine.vector().vectorAngle(new g.Point(1, 0));\n                handle.position(position.x, position.y, angle, this.relatedView);\n                handle.show();\n                handle.options.axis = axis;\n            }\n        } else {\n            handle.hide();\n        }\n    },\n    onRemove: function() {\n        this.resetHandles();\n    }\n}, {\n    SegmentHandle: SegmentHandle // keep as class property\n});\n\n// End Markers\nvar Arrowhead = ToolView.extend({\n    tagName: 'path',\n    xAxisVector: new g.Point(1, 0),\n    events: {\n        mousedown: 'onPointerDown',\n        touchstart: 'onPointerDown'\n    },\n    documentEvents: {\n        mousemove: 'onPointerMove',\n        touchmove: 'onPointerMove',\n        mouseup: 'onPointerUp',\n        touchend: 'onPointerUp',\n        touchcancel: 'onPointerUp'\n    },\n    onRender: function() {\n        this.update();\n    },\n    update: function() {\n        var ratio = this.ratio;\n        var view = this.relatedView;\n        var tangent = view.getTangentAtRatio(ratio);\n        var position, angle;\n        if (tangent) {\n            position = tangent.start;\n            angle = tangent.vector().vectorAngle(this.xAxisVector) || 0;\n        } else {\n            position = view.getPointAtRatio(ratio);\n            angle = 0;\n        }\n        if (!position) return this;\n        var matrix = V.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n        this.vel.transform(matrix, { absolute: true });\n        return this;\n    },\n    onPointerDown: function(evt) {\n        if (this.guard(evt)) return;\n        evt.stopPropagation();\n        evt.preventDefault();\n        var relatedView = this.relatedView;\n        relatedView.model.startBatch('arrowhead-move', { ui: true, tool: this.cid });\n        if (relatedView.can('arrowheadMove')) {\n            relatedView.startArrowheadMove(this.arrowheadType);\n            this.delegateDocumentEvents();\n            relatedView.paper.undelegateEvents();\n        }\n        this.focus();\n        this.el.style.pointerEvents = 'none';\n    },\n    onPointerMove: function(evt) {\n        var normalizedEvent = util.normalizeEvent(evt);\n        var coords = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        this.relatedView.pointermove(normalizedEvent, coords.x, coords.y);\n    },\n    onPointerUp: function(evt) {\n        this.undelegateDocumentEvents();\n        var relatedView = this.relatedView;\n        var paper = relatedView.paper;\n        var normalizedEvent = util.normalizeEvent(evt);\n        var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        relatedView.pointerup(normalizedEvent, coords.x, coords.y);\n        paper.delegateEvents();\n        this.blur();\n        this.el.style.pointerEvents = '';\n        relatedView.model.stopBatch('arrowhead-move', { ui: true, tool: this.cid });\n    }\n});\n\nvar TargetArrowhead = Arrowhead.extend({\n    name: 'target-arrowhead',\n    ratio: 1,\n    arrowheadType: 'target',\n    attributes: {\n        'd': 'M -10 -8 10 0 -10 8 Z',\n        'fill': '#33334F',\n        'stroke': '#FFFFFF',\n        'stroke-width': 2,\n        'cursor': 'move',\n        'class': 'target-arrowhead'\n    }\n});\n\nvar SourceArrowhead = Arrowhead.extend({\n    name: 'source-arrowhead',\n    ratio: 0,\n    arrowheadType: 'source',\n    attributes: {\n        'd': 'M 10 -8 -10 0 10 8 Z',\n        'fill': '#33334F',\n        'stroke': '#FFFFFF',\n        'stroke-width': 2,\n        'cursor': 'move',\n        'class': 'source-arrowhead'\n    }\n});\n\nvar Button = ToolView.extend({\n    name: 'button',\n    events: {\n        'mousedown': 'onPointerDown',\n        'touchstart': 'onPointerDown'\n    },\n    options: {\n        distance: 0,\n        offset: 0,\n        rotate: false\n    },\n    onRender: function() {\n        this.renderChildren(this.options.markup);\n        this.update();\n    },\n    update: function() {\n        this.position();\n        return this;\n    },\n    position: function() {\n        const { relatedView: view, vel } = this;\n        const matrix = view.model.isLink() ? this.getLinkMatrix() : this.getElementMatrix();\n        vel.transform(matrix, { absolute: true });\n    },\n    getElementMatrix() {\n        const { relatedView: view, options } = this;\n        let { x = 0, y = 0, offset = {}, useModelGeometry, rotate } = options;\n        let bbox = getViewBBox(view, useModelGeometry);\n        const angle = view.model.angle();\n        if (!rotate) bbox = bbox.bbox(angle);\n        const { x: offsetX = 0, y: offsetY = 0 } = offset;\n        if (util.isPercentage(x)) {\n            x = parseFloat(x) / 100 * bbox.width;\n        }\n        if (util.isPercentage(y)) {\n            y = parseFloat(y) / 100 * bbox.height;\n        }\n        let matrix = V.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n        if (rotate) matrix = matrix.rotate(angle);\n        matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n        return matrix;\n    },\n    getLinkMatrix() {\n        const { relatedView: view, options } = this;\n        const { offset = 0, distance = 0, rotate } = options;\n        let tangent, position, angle;\n        if (util.isPercentage(distance)) {\n            tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n        } else {\n            tangent = view.getTangentAtLength(distance);\n        }\n        if (tangent) {\n            position = tangent.start;\n            angle = tangent.vector().vectorAngle(new g.Point(1, 0)) || 0;\n        } else {\n            position = view.getConnection().start;\n            angle = 0;\n        }\n        let matrix = V.createSVGMatrix()\n            .translate(position.x, position.y)\n            .rotate(angle)\n            .translate(0, offset);\n        if (!rotate) matrix = matrix.rotate(-angle);\n        return matrix;\n    },\n    onPointerDown: function(evt) {\n        if (this.guard(evt)) return;\n        evt.stopPropagation();\n        evt.preventDefault();\n        var actionFn = this.options.action;\n        if (typeof actionFn === 'function') {\n            actionFn.call(this.relatedView, evt, this.relatedView, this);\n        }\n    }\n});\n\n\nvar Remove = Button.extend({\n    children: [{\n        tagName: 'circle',\n        selector: 'button',\n        attributes: {\n            'r': 7,\n            'fill': '#FF1D00',\n            'cursor': 'pointer'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'icon',\n        attributes: {\n            'd': 'M -3 -3 3 3 M -3 3 3 -3',\n            'fill': 'none',\n            'stroke': '#FFFFFF',\n            'stroke-width': 2,\n            'pointer-events': 'none'\n        }\n    }],\n    options: {\n        distance: 60,\n        offset: 0,\n        action: function(evt, view, tool) {\n            view.model.remove({ ui: true, tool: tool.cid });\n        }\n    }\n});\n\nvar Boundary = ToolView.extend({\n    name: 'boundary',\n    tagName: 'rect',\n    options: {\n        padding: 10,\n        useModelGeometry: false,\n    },\n    attributes: {\n        'fill': 'none',\n        'stroke': '#33334F',\n        'stroke-width': .5,\n        'stroke-dasharray': '5, 5',\n        'pointer-events': 'none'\n    },\n    onRender: function() {\n        this.update();\n    },\n    update: function() {\n        const { relatedView: view, options, vel } = this;\n        const { useModelGeometry, rotate } = options;\n        const padding = util.normalizeSides(options.padding);\n        let bbox = getViewBBox(view, useModelGeometry).moveAndExpand({\n            x: -padding.left,\n            y: -padding.top,\n            width: padding.left + padding.right,\n            height: padding.top + padding.bottom\n        });\n        var model = view.model;\n        if (model.isElement()) {\n            var angle = model.angle();\n            if (angle) {\n                if (rotate) {\n                    var origin = model.getBBox().center();\n                    vel.rotate(angle, origin.x, origin.y, { absolute: true });\n                } else {\n                    bbox = bbox.bbox(angle);\n                }\n            }\n        }\n        vel.attr(bbox.toJSON());\n        return this;\n    }\n});\n\nvar Anchor = ToolView.extend({\n    tagName: 'g',\n    type: null,\n    children: [{\n        tagName: 'circle',\n        selector: 'anchor',\n        attributes: {\n            'cursor': 'pointer'\n        }\n    }, {\n        tagName: 'rect',\n        selector: 'area',\n        attributes: {\n            'pointer-events': 'none',\n            'fill': 'none',\n            'stroke': '#33334F',\n            'stroke-dasharray': '2,4',\n            'rx': 5,\n            'ry': 5\n        }\n    }],\n    events: {\n        mousedown: 'onPointerDown',\n        touchstart: 'onPointerDown',\n        dblclick: 'onPointerDblClick'\n    },\n    documentEvents: {\n        mousemove: 'onPointerMove',\n        touchmove: 'onPointerMove',\n        mouseup: 'onPointerUp',\n        touchend: 'onPointerUp',\n        touchcancel: 'onPointerUp'\n    },\n    options: {\n        snap: snapAnchor,\n        anchor: getAnchor,\n        resetAnchor: true,\n        customAnchorAttributes: {\n            'stroke-width': 4,\n            'stroke': '#33334F',\n            'fill': '#FFFFFF',\n            'r': 5\n        },\n        defaultAnchorAttributes: {\n            'stroke-width': 2,\n            'stroke': '#FFFFFF',\n            'fill': '#33334F',\n            'r': 6\n        },\n        areaPadding: 6,\n        snapRadius: 10,\n        restrictArea: true,\n        redundancyRemoval: true\n    },\n    onRender: function() {\n        this.renderChildren();\n        this.toggleArea(false);\n        this.update();\n    },\n    update: function() {\n        var type = this.type;\n        var relatedView = this.relatedView;\n        var view = relatedView.getEndView(type);\n        if (view) {\n            this.updateAnchor();\n            this.updateArea();\n            this.el.style.display = '';\n        } else {\n            this.el.style.display = 'none';\n        }\n        return this;\n    },\n    updateAnchor: function() {\n        var childNodes = this.childNodes;\n        if (!childNodes) return;\n        var anchorNode = childNodes.anchor;\n        if (!anchorNode) return;\n        var relatedView = this.relatedView;\n        var type = this.type;\n        var position = relatedView.getEndAnchor(type);\n        var options = this.options;\n        var customAnchor = relatedView.model.prop([type, 'anchor']);\n        anchorNode.setAttribute('transform', 'translate(' + position.x + ',' + position.y + ')');\n        var anchorAttributes = (customAnchor) ? options.customAnchorAttributes : options.defaultAnchorAttributes;\n        for (var attrName in anchorAttributes) {\n            anchorNode.setAttribute(attrName, anchorAttributes[attrName]);\n        }\n    },\n    updateArea: function() {\n        var childNodes = this.childNodes;\n        if (!childNodes) return;\n        var areaNode = childNodes.area;\n        if (!areaNode) return;\n        var relatedView = this.relatedView;\n        var type = this.type;\n        var view = relatedView.getEndView(type);\n        var model = view.model;\n        var magnet = relatedView.getEndMagnet(type);\n        var padding = this.options.areaPadding;\n        if (!isFinite(padding)) padding = 0;\n        var bbox, angle, center;\n        if (view.isNodeConnection(magnet)) {\n            bbox = view.getBBox();\n            angle = 0;\n            center = bbox.center();\n        } else {\n            bbox = view.getNodeUnrotatedBBox(magnet);\n            angle = model.angle();\n            center = bbox.center();\n            if (angle) center.rotate(model.getBBox().center(), -angle);\n            // TODO: get the link's magnet rotation into account\n        }\n        bbox.inflate(padding);\n        areaNode.setAttribute('x', -bbox.width / 2);\n        areaNode.setAttribute('y', -bbox.height / 2);\n        areaNode.setAttribute('width', bbox.width);\n        areaNode.setAttribute('height', bbox.height);\n        areaNode.setAttribute('transform', 'translate(' + center.x + ',' + center.y + ') rotate(' + angle + ')');\n    },\n    toggleArea: function(visible) {\n        this.childNodes.area.style.display = (visible) ? '' : 'none';\n    },\n    onPointerDown: function(evt) {\n        if (this.guard(evt)) return;\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.paper.undelegateEvents();\n        this.delegateDocumentEvents();\n        this.focus();\n        this.toggleArea(this.options.restrictArea);\n        this.relatedView.model.startBatch('anchor-move', { ui: true, tool: this.cid });\n    },\n    resetAnchor: function(anchor) {\n        var type = this.type;\n        var relatedModel = this.relatedView.model;\n        if (anchor) {\n            relatedModel.prop([type, 'anchor'], anchor, {\n                rewrite: true,\n                ui: true,\n                tool: this.cid\n            });\n        } else {\n            relatedModel.removeProp([type, 'anchor'], {\n                ui: true,\n                tool: this.cid\n            });\n        }\n    },\n    onPointerMove: function(evt) {\n\n        var relatedView = this.relatedView;\n        var type = this.type;\n        var view = relatedView.getEndView(type);\n        var model = view.model;\n        var magnet = relatedView.getEndMagnet(type);\n        var normalizedEvent = util.normalizeEvent(evt);\n        var coords = this.paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);\n        var snapFn = this.options.snap;\n        if (typeof snapFn === 'function') {\n            coords = snapFn.call(relatedView, coords, view, magnet, type, relatedView, this);\n            coords = new g.Point(coords);\n        }\n\n        if (this.options.restrictArea) {\n            if (view.isNodeConnection(magnet)) {\n                // snap coords to the link's connection\n                var pointAtConnection = view.getClosestPoint(coords);\n                if (pointAtConnection) coords = pointAtConnection;\n            } else {\n                // snap coords within node bbox\n                var bbox = view.getNodeUnrotatedBBox(magnet);\n                var angle = model.angle();\n                var origin = model.getBBox().center();\n                var rotatedCoords = coords.clone().rotate(origin, angle);\n                if (!bbox.containsPoint(rotatedCoords)) {\n                    coords = bbox.pointNearestToPoint(rotatedCoords).rotate(origin, -angle);\n                }\n            }\n        }\n\n        var anchor;\n        var anchorFn = this.options.anchor;\n        if (typeof anchorFn === 'function') {\n            anchor = anchorFn.call(relatedView, coords, view, magnet, type, relatedView);\n        }\n\n        this.resetAnchor(anchor);\n        this.update();\n    },\n\n    onPointerUp: function(evt) {\n        this.paper.delegateEvents();\n        this.undelegateDocumentEvents();\n        this.blur();\n        this.toggleArea(false);\n        var linkView = this.relatedView;\n        if (this.options.redundancyRemoval) linkView.removeRedundantLinearVertices({ ui: true, tool: this.cid });\n        linkView.model.stopBatch('anchor-move', { ui: true, tool: this.cid });\n    },\n\n    onPointerDblClick: function() {\n        var anchor = this.options.resetAnchor;\n        if (anchor === false) return; // reset anchor disabled\n        if (anchor === true) anchor = null; // remove the current anchor\n        this.resetAnchor(util.cloneDeep(anchor));\n        this.update();\n    }\n});\n\nvar SourceAnchor = Anchor.extend({\n    name: 'source-anchor',\n    type: 'source'\n});\n\nvar TargetAnchor = Anchor.extend({\n    name: 'target-anchor',\n    type: 'target'\n});\n\nexport { Vertices, Segments, SourceArrowhead, TargetArrowhead, SourceAnchor, TargetAnchor, Button, Remove, Boundary };\n"]},"metadata":{},"sourceType":"module"}