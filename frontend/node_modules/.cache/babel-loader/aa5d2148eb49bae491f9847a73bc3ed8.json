{"ast":null,"code":"import * as mvc from '../mvc/index.mjs';\nexport const ToolView = mvc.View.extend({\n  name: null,\n  tagName: 'g',\n  className: 'tool',\n  svgElement: true,\n  _visible: true,\n  init: function () {\n    var name = this.name;\n    if (name) this.vel.attr('data-tool-name', name);\n  },\n  configure: function (view, toolsView) {\n    this.relatedView = view;\n    this.paper = view.paper;\n    this.parentView = toolsView;\n    this.simulateRelatedView(this.el); // Delegate events in case the ToolView was removed from the DOM and reused.\n\n    this.delegateEvents();\n    return this;\n  },\n  simulateRelatedView: function (el) {\n    if (el) el.setAttribute('model-id', this.relatedView.model.id);\n  },\n  getName: function () {\n    return this.name;\n  },\n  show: function () {\n    this.el.style.display = '';\n    this._visible = true;\n  },\n  hide: function () {\n    this.el.style.display = 'none';\n    this._visible = false;\n  },\n  isVisible: function () {\n    return !!this._visible;\n  },\n  focus: function () {\n    var opacity = this.options.focusOpacity;\n    if (isFinite(opacity)) this.el.style.opacity = opacity;\n    this.parentView.focusTool(this);\n  },\n  blur: function () {\n    this.el.style.opacity = '';\n    this.parentView.blurTool(this);\n  },\n  update: function () {// to be overridden\n  },\n  guard: function (evt) {\n    // Let the context-menu event bubble up to the relatedView\n    const {\n      paper,\n      relatedView\n    } = this;\n    if (!paper || !relatedView) return true;\n    return paper.guard(evt, relatedView);\n  }\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/node_modules/jointjs/src/dia/ToolView.mjs"],"names":["mvc","ToolView","View","extend","name","tagName","className","svgElement","_visible","init","vel","attr","configure","view","toolsView","relatedView","paper","parentView","simulateRelatedView","el","delegateEvents","setAttribute","model","id","getName","show","style","display","hide","isVisible","focus","opacity","options","focusOpacity","isFinite","focusTool","blur","blurTool","update","guard","evt"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,kBAArB;AAEA,OAAO,MAAMC,QAAQ,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB;AACpCC,EAAAA,IAAI,EAAE,IAD8B;AAEpCC,EAAAA,OAAO,EAAE,GAF2B;AAGpCC,EAAAA,SAAS,EAAE,MAHyB;AAIpCC,EAAAA,UAAU,EAAE,IAJwB;AAKpCC,EAAAA,QAAQ,EAAE,IAL0B;AAOpCC,EAAAA,IAAI,EAAE,YAAW;AACb,QAAIL,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIA,IAAJ,EAAU,KAAKM,GAAL,CAASC,IAAT,CAAc,gBAAd,EAAgCP,IAAhC;AACb,GAVmC;AAYpCQ,EAAAA,SAAS,EAAE,UAASC,IAAT,EAAeC,SAAf,EAA0B;AACjC,SAAKC,WAAL,GAAmBF,IAAnB;AACA,SAAKG,KAAL,GAAaH,IAAI,CAACG,KAAlB;AACA,SAAKC,UAAL,GAAkBH,SAAlB;AACA,SAAKI,mBAAL,CAAyB,KAAKC,EAA9B,EAJiC,CAKjC;;AACA,SAAKC,cAAL;AACA,WAAO,IAAP;AACH,GApBmC;AAsBpCF,EAAAA,mBAAmB,EAAE,UAASC,EAAT,EAAa;AAC9B,QAAIA,EAAJ,EAAQA,EAAE,CAACE,YAAH,CAAgB,UAAhB,EAA4B,KAAKN,WAAL,CAAiBO,KAAjB,CAAuBC,EAAnD;AACX,GAxBmC;AA0BpCC,EAAAA,OAAO,EAAE,YAAW;AAChB,WAAO,KAAKpB,IAAZ;AACH,GA5BmC;AA8BpCqB,EAAAA,IAAI,EAAE,YAAW;AACb,SAAKN,EAAL,CAAQO,KAAR,CAAcC,OAAd,GAAwB,EAAxB;AACA,SAAKnB,QAAL,GAAgB,IAAhB;AACH,GAjCmC;AAmCpCoB,EAAAA,IAAI,EAAE,YAAW;AACb,SAAKT,EAAL,CAAQO,KAAR,CAAcC,OAAd,GAAwB,MAAxB;AACA,SAAKnB,QAAL,GAAgB,KAAhB;AACH,GAtCmC;AAwCpCqB,EAAAA,SAAS,EAAE,YAAW;AAClB,WAAO,CAAC,CAAC,KAAKrB,QAAd;AACH,GA1CmC;AA4CpCsB,EAAAA,KAAK,EAAE,YAAW;AACd,QAAIC,OAAO,GAAG,KAAKC,OAAL,CAAaC,YAA3B;AACA,QAAIC,QAAQ,CAACH,OAAD,CAAZ,EAAuB,KAAKZ,EAAL,CAAQO,KAAR,CAAcK,OAAd,GAAwBA,OAAxB;AACvB,SAAKd,UAAL,CAAgBkB,SAAhB,CAA0B,IAA1B;AACH,GAhDmC;AAkDpCC,EAAAA,IAAI,EAAE,YAAW;AACb,SAAKjB,EAAL,CAAQO,KAAR,CAAcK,OAAd,GAAwB,EAAxB;AACA,SAAKd,UAAL,CAAgBoB,QAAhB,CAAyB,IAAzB;AACH,GArDmC;AAuDpCC,EAAAA,MAAM,EAAE,YAAW,CACf;AACH,GAzDmC;AA2DpCC,EAAAA,KAAK,EAAE,UAASC,GAAT,EAAc;AACjB;AACA,UAAM;AAAExB,MAAAA,KAAF;AAASD,MAAAA;AAAT,QAAyB,IAA/B;AACA,QAAI,CAACC,KAAD,IAAU,CAACD,WAAf,EAA4B,OAAO,IAAP;AAC5B,WAAOC,KAAK,CAACuB,KAAN,CAAYC,GAAZ,EAAiBzB,WAAjB,CAAP;AACH;AAhEmC,CAAhB,CAAjB","sourcesContent":["import * as mvc from '../mvc/index.mjs';\n\nexport const ToolView = mvc.View.extend({\n    name: null,\n    tagName: 'g',\n    className: 'tool',\n    svgElement: true,\n    _visible: true,\n\n    init: function() {\n        var name = this.name;\n        if (name) this.vel.attr('data-tool-name', name);\n    },\n\n    configure: function(view, toolsView) {\n        this.relatedView = view;\n        this.paper = view.paper;\n        this.parentView = toolsView;\n        this.simulateRelatedView(this.el);\n        // Delegate events in case the ToolView was removed from the DOM and reused.\n        this.delegateEvents();\n        return this;\n    },\n\n    simulateRelatedView: function(el) {\n        if (el) el.setAttribute('model-id', this.relatedView.model.id);\n    },\n\n    getName: function() {\n        return this.name;\n    },\n\n    show: function() {\n        this.el.style.display = '';\n        this._visible = true;\n    },\n\n    hide: function() {\n        this.el.style.display = 'none';\n        this._visible = false;\n    },\n\n    isVisible: function() {\n        return !!this._visible;\n    },\n\n    focus: function() {\n        var opacity = this.options.focusOpacity;\n        if (isFinite(opacity)) this.el.style.opacity = opacity;\n        this.parentView.focusTool(this);\n    },\n\n    blur: function() {\n        this.el.style.opacity = '';\n        this.parentView.blurTool(this);\n    },\n\n    update: function() {\n        // to be overridden\n    },\n\n    guard: function(evt) {\n        // Let the context-menu event bubble up to the relatedView\n        const { paper, relatedView } = this;\n        if (!paper || !relatedView) return true;\n        return paper.guard(evt, relatedView);\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}