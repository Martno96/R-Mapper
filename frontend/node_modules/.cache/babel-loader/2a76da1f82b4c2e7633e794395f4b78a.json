{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { bondCategories } from '../constants';\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: {},\n  characters: [{\n    id: \"bhjabsdjbdjas\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"sakbkabkdbksb\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"vqweqwcxsadas\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: [{\n    source: \"bhjabsdjbdjas\",\n    target: \"sakbkabkdbksb\",\n    summary: \"is the daughter of\",\n    details: \"when the cow became the sole distrubutor of pain, no one complained, at first. But when the full moon shed its last tear, the bongolongos came running, much like how the geese had told.\",\n    category: bondCategories[0].name\n  }, {\n    source: \"vqweqwcxsadas\",\n    target: \"sakbkabkdbksb\",\n    summary: \"wishes to punish\",\n    details: \"Gregory will never see the light, and that is why we must kill him ._.\",\n    category: bondCategories[2].name\n  }]\n};\nexport const cast = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    addCharacter: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      store.characters = [...store.characters, action.payload];\n    },\n    addBond: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      store.bonds = [...store.bonds, action.payload];\n    }\n  }\n});\nexport const saveChanges = input => {// let isStart = input.type ? false : true\n  // let endpoint = \"\"\n  // let postBody = {}\n  // return (dispatch, getState) => {\n  //   const state = getState()\n  //   if (isStart) {\n  //     endpoint = \"start\"\n  //     postBody = JSON.stringify({\n  //       username: input\n  //     })\n  //   } else {\n  //     endpoint = \"action\"\n  //     postBody = JSON.stringify({\n  //       username: state.game.username,\n  //       type: input.type,\n  //       direction: input.direction\n  //     })\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\n  //   }\n  //   dispatch(game.actions.setLoadProgress(33))\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       'Content-Type': 'application/json;charset=utf-8'\n  //     },\n  //     body: postBody\n  //   })\n  //     .then(res => {\n  //       dispatch(game.actions.setLoadProgress(55))\n  //       return res.json()\n  //     })\n  //     .then(update => {\n  //       dispatch(game.actions.setLoadProgress(77))\n  //       return dispatch(game.actions.setGameState(update))\n  //     })\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \n  //   }\n};\nexport default cast;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/src/reducers/cast.js"],"names":["createSlice","bondCategories","initialItems","localStorage","getItem","JSON","parse","graph","characters","id","name","bio","bonds","source","target","summary","details","category","cast","initialState","reducers","addCharacter","store","action","payload","addBond","saveChanges","input"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AAEA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACnBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADmB,GAEnB;AACAG,EAAAA,KAAK,EAAE,EADP;AAEAC,EAAAA,UAAU,EAAE,CACV;AACEC,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,GAAG,EAAE;AAHP,GADU,EAMV;AACEF,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,GAAG,EAAE;AAHP,GANU,EAWV;AACEF,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,GAAG,EAAE;AAHP,GAXU,CAFZ;AAmBAC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,MAAM,EAAE,eADV;AAEEC,IAAAA,MAAM,EAAE,eAFV;AAGEC,IAAAA,OAAO,EAAE,oBAHX;AAIEC,IAAAA,OAAO,EAAE,2LAJX;AAKEC,IAAAA,QAAQ,EAAEhB,cAAc,CAAC,CAAD,CAAd,CAAkBS;AAL9B,GADK,EAQL;AACEG,IAAAA,MAAM,EAAE,eADV;AAEEC,IAAAA,MAAM,EAAE,eAFV;AAGEC,IAAAA,OAAO,EAAE,kBAHX;AAIEC,IAAAA,OAAO,EAAE,wEAJX;AAKEC,IAAAA,QAAQ,EAAEhB,cAAc,CAAC,CAAD,CAAd,CAAkBS;AAL9B,GARK;AAnBP,CAFF;AAuCA,OAAO,MAAMQ,IAAI,GAAGlB,WAAW,CAAE;AAC/BU,EAAAA,IAAI,EAAE,MADyB;AAE/BS,EAAAA,YAAY,EAAEjB,YAFiB;AAG/BkB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B;AACAD,MAAAA,KAAK,CAACd,UAAN,GAAmB,CAAC,GAAGc,KAAK,CAACd,UAAV,EAAsBe,MAAM,CAACC,OAA7B,CAAnB;AACD,KAJO;AAKRC,IAAAA,OAAO,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC1B;AACAD,MAAAA,KAAK,CAACV,KAAN,GAAc,CAAC,GAAGU,KAAK,CAACV,KAAV,EAAiBW,MAAM,CAACC,OAAxB,CAAd;AACD;AARO;AAHqB,CAAF,CAAxB;AAeP,OAAO,MAAME,WAAW,GAAIC,KAAD,IAAW,CACpC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAxCM;AA0CP,eAAeT,IAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nimport { bondCategories } from '../constants'\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: {},\r\n  characters: [\r\n    {\r\n      id: \"bhjabsdjbdjas\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"sakbkabkdbksb\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"vqweqwcxsadas\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n    {\r\n      source: \"bhjabsdjbdjas\",\r\n      target: \"sakbkabkdbksb\",\r\n      summary: \"is the daughter of\",\r\n      details: \"when the cow became the sole distrubutor of pain, no one complained, at first. But when the full moon shed its last tear, the bongolongos came running, much like how the geese had told.\",\r\n      category: bondCategories[0].name\r\n    },\r\n    {\r\n      source: \"vqweqwcxsadas\",\r\n      target: \"sakbkabkdbksb\",\r\n      summary: \"wishes to punish\",\r\n      details: \"Gregory will never see the light, and that is why we must kill him ._.\",\r\n      category: bondCategories[2].name\r\n    }\r\n  ]\r\n}\r\n\r\nexport const cast = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    addCharacter: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.characters = [...store.characters, action.payload]\r\n    },\r\n    addBond: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.bonds = [...store.bonds, action.payload]\r\n    }\r\n  }\r\n})\r\n\r\nexport const saveChanges = (input) => {\r\n  // let isStart = input.type ? false : true\r\n  // let endpoint = \"\"\r\n  // let postBody = {}\r\n\r\n  // return (dispatch, getState) => {\r\n  //   const state = getState()\r\n  //   if (isStart) {\r\n  //     endpoint = \"start\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: input\r\n  //     })\r\n  //   } else {\r\n  //     endpoint = \"action\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: state.game.username,\r\n  //       type: input.type,\r\n  //       direction: input.direction\r\n  //     })\r\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\r\n  //   }\r\n  //   dispatch(game.actions.setLoadProgress(33))\r\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: postBody\r\n  //   })\r\n  //     .then(res => {\r\n  //       dispatch(game.actions.setLoadProgress(55))\r\n  //       return res.json()\r\n  //     })\r\n  //     .then(update => {\r\n  //       dispatch(game.actions.setLoadProgress(77))\r\n  //       return dispatch(game.actions.setGameState(update))\r\n  //     })\r\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\r\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \r\n  //   }\r\n}\r\n\r\nexport default cast"]},"metadata":{},"sourceType":"module"}