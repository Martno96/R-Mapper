{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport * as joint from 'jointjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shapes, dia } from 'jointjs';\nimport * as standard from 'jointjs/src/shapes/standard.mjs';\nimport Button from './Button';\nimport DrawCharacters from './DrawCharacters';\nimport DrawBonds from './DrawBonds';\nimport Test from './Test';\nimport cast from '../reducers/cast';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet updatedGraph = new joint.dia.Graph({}, {\n  cellNamespace: joint.shapes\n});\n\nconst Container = () => {\n  _s();\n\n  let graph = useSelector(store => store.cast.graph);\n  const characters = useSelector(store => store.cast.characters);\n  const bonds = useSelector(store => store.cast.bonds);\n  const first = useSelector(store => store.cast.first);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(cast.actions.drawMap({\n      model: updatedGraph\n    }));\n  }, [characters, bonds]); //only create new paper on first and second mount (quick-fix since the component mounts twice before the drawMap reducer has managed to be dispatched to, otherwise causing an empty graph)\n\n  if (first < 2) {\n    let paper = new joint.dia.Paper({\n      el: document.getElementById('myholder'),\n      model: updatedGraph,\n      cellViewNamespace: joint.shapes,\n      width: 800,\n      height: 500,\n      gridSize: 1\n    });\n    updatedGraph.fromJSON(JSON.parse(graph));\n    dispatch(cast.actions.clearFirst());\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Container, \"w9OEwPVv7EVE4cGUYO2EZIBWOsI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/components/Container.js"],"names":["React","useState","useEffect","joint","useSelector","useDispatch","shapes","dia","standard","Button","DrawCharacters","DrawBonds","Test","cast","updatedGraph","Graph","cellNamespace","Container","graph","store","characters","bonds","first","dispatch","actions","drawMap","model","paper","Paper","el","document","getElementById","cellViewNamespace","width","height","gridSize","fromJSON","JSON","parse","clearFirst"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,SAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,iCAA1B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;;AAEA,IAAIC,YAAY,GAAG,IAAIX,KAAK,CAACI,GAAN,CAAUQ,KAAd,CAAoB,EAApB,EAAwB;AAAEC,EAAAA,aAAa,EAAEb,KAAK,CAACG;AAAvB,CAAxB,CAAnB;;AAEA,MAAMW,SAAS,GAAG,MAAM;AAAA;;AAEtB,MAAIC,KAAK,GAAGd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACN,IAAN,CAAWK,KAArB,CAAvB;AACA,QAAME,UAAU,GAAGhB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACN,IAAN,CAAWO,UAArB,CAA9B;AACA,QAAMC,KAAK,GAAGjB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACN,IAAN,CAAWQ,KAArB,CAAzB;AACA,QAAMC,KAAK,GAAGlB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACN,IAAN,CAAWS,KAArB,CAAzB;AACA,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAE,MAAM;AACfqB,IAAAA,QAAQ,CAACV,IAAI,CAACW,OAAL,CAAaC,OAAb,CAAqB;AAAEC,MAAAA,KAAK,EAAEZ;AAAT,KAArB,CAAD,CAAR;AACD,GAFQ,EAEN,CAACM,UAAD,EAAaC,KAAb,CAFM,CAAT,CARsB,CAYtB;;AACA,MAAIC,KAAK,GAAG,CAAZ,EAAe;AACb,QAAIK,KAAK,GAAG,IAAIxB,KAAK,CAACI,GAAN,CAAUqB,KAAd,CAAoB;AAC9BC,MAAAA,EAAE,EAAEC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAD0B;AAE9BL,MAAAA,KAAK,EAAEZ,YAFuB;AAG9BkB,MAAAA,iBAAiB,EAAE7B,KAAK,CAACG,MAHK;AAI9B2B,MAAAA,KAAK,EAAE,GAJuB;AAK9BC,MAAAA,MAAM,EAAE,GALsB;AAM9BC,MAAAA,QAAQ,EAAE;AANoB,KAApB,CAAZ;AAQArB,IAAAA,YAAY,CAACsB,QAAb,CAAsBC,IAAI,CAACC,KAAL,CAAWpB,KAAX,CAAtB;AACAK,IAAAA,QAAQ,CAACV,IAAI,CAACW,OAAL,CAAae,UAAb,EAAD,CAAR;AACD;;AAED,sBACE,qCADF;AAID,CA9BD;;GAAMtB,S;UAEQb,W,EACOA,W,EACLA,W,EACAA,W,EACGC,W;;;KANbY,S;AAgCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport * as joint from 'jointjs'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { shapes, dia } from 'jointjs'\r\nimport * as standard from 'jointjs/src/shapes/standard.mjs'\r\n\r\nimport Button from './Button'\r\nimport DrawCharacters from './DrawCharacters'\r\nimport DrawBonds from './DrawBonds'\r\nimport Test from './Test'\r\n\r\nimport cast from '../reducers/cast'\r\n\r\nlet updatedGraph = new joint.dia.Graph({}, { cellNamespace: joint.shapes })\r\n\r\nconst Container = () => {\r\n\r\n  let graph = useSelector(store => store.cast.graph)\r\n  const characters = useSelector(store => store.cast.characters)\r\n  const bonds = useSelector(store => store.cast.bonds)\r\n  const first = useSelector(store => store.cast.first)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect (() => {\r\n    dispatch(cast.actions.drawMap({ model: updatedGraph }))\r\n  }, [characters, bonds])\r\n\r\n  //only create new paper on first and second mount (quick-fix since the component mounts twice before the drawMap reducer has managed to be dispatched to, otherwise causing an empty graph)\r\n  if (first < 2) {\r\n    let paper = new joint.dia.Paper({\r\n      el: document.getElementById('myholder'),\r\n      model: updatedGraph,\r\n      cellViewNamespace: joint.shapes,\r\n      width: 800,\r\n      height: 500, \r\n      gridSize: 1\r\n    })\r\n    updatedGraph.fromJSON(JSON.parse(graph))\r\n    dispatch(cast.actions.clearFirst())\r\n  }\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Container"]},"metadata":{},"sourceType":"module"}