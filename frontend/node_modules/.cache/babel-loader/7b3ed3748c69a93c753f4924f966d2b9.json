{"ast":null,"code":"import * as g from '../g/index.mjs';\nexport const rounded = function (sourcePoint, targetPoint, route, opt) {\n  opt || (opt = {});\n  var offset = opt.radius || 10;\n  var raw = opt.raw;\n  var path = new g.Path();\n  var segment;\n  segment = g.Path.createSegment('M', sourcePoint);\n  path.appendSegment(segment);\n\n  var _13 = 1 / 3;\n\n  var _23 = 2 / 3;\n\n  var curr;\n  var prev, next;\n  var prevDistance, nextDistance;\n  var startMove, endMove;\n  var roundedStart, roundedEnd;\n  var control1, control2;\n\n  for (var index = 0, n = route.length; index < n; index++) {\n    curr = new g.Point(route[index]);\n    prev = route[index - 1] || sourcePoint;\n    next = route[index + 1] || targetPoint;\n    prevDistance = nextDistance || curr.distance(prev) / 2;\n    nextDistance = curr.distance(next) / 2;\n    startMove = -Math.min(offset, prevDistance);\n    endMove = -Math.min(offset, nextDistance);\n    roundedStart = curr.clone().move(prev, startMove).round();\n    roundedEnd = curr.clone().move(next, endMove).round();\n    control1 = new g.Point(_13 * roundedStart.x + _23 * curr.x, _23 * curr.y + _13 * roundedStart.y);\n    control2 = new g.Point(_13 * roundedEnd.x + _23 * curr.x, _23 * curr.y + _13 * roundedEnd.y);\n    segment = g.Path.createSegment('L', roundedStart);\n    path.appendSegment(segment);\n    segment = g.Path.createSegment('C', control1, control2, roundedEnd);\n    path.appendSegment(segment);\n  }\n\n  segment = g.Path.createSegment('L', targetPoint);\n  path.appendSegment(segment);\n  return raw ? path : path.serialize();\n};","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/node_modules/jointjs/src/connectors/rounded.mjs"],"names":["g","rounded","sourcePoint","targetPoint","route","opt","offset","radius","raw","path","Path","segment","createSegment","appendSegment","_13","_23","curr","prev","next","prevDistance","nextDistance","startMove","endMove","roundedStart","roundedEnd","control1","control2","index","n","length","Point","distance","Math","min","clone","move","round","x","y","serialize"],"mappings":"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","sourcesContent":["import * as g from '../g/index.mjs';\n\nexport const rounded = function(sourcePoint, targetPoint, route, opt) {\n\n    opt || (opt = {});\n\n    var offset = opt.radius || 10;\n    var raw = opt.raw;\n    var path = new g.Path();\n    var segment;\n\n    segment = g.Path.createSegment('M', sourcePoint);\n    path.appendSegment(segment);\n\n    var _13 = 1 / 3;\n    var _23 = 2 / 3;\n\n    var curr;\n    var prev, next;\n    var prevDistance, nextDistance;\n    var startMove, endMove;\n    var roundedStart, roundedEnd;\n    var control1, control2;\n\n    for (var index = 0, n = route.length; index < n; index++) {\n\n        curr = new g.Point(route[index]);\n\n        prev = route[index - 1] || sourcePoint;\n        next = route[index + 1] || targetPoint;\n\n        prevDistance = nextDistance || (curr.distance(prev) / 2);\n        nextDistance = curr.distance(next) / 2;\n\n        startMove = -Math.min(offset, prevDistance);\n        endMove = -Math.min(offset, nextDistance);\n\n        roundedStart = curr.clone().move(prev, startMove).round();\n        roundedEnd = curr.clone().move(next, endMove).round();\n\n        control1 = new g.Point((_13 * roundedStart.x) + (_23 * curr.x), (_23 * curr.y) + (_13 * roundedStart.y));\n        control2 = new g.Point((_13 * roundedEnd.x) + (_23 * curr.x), (_23 * curr.y) + (_13 * roundedEnd.y));\n\n        segment = g.Path.createSegment('L', roundedStart);\n        path.appendSegment(segment);\n\n        segment = g.Path.createSegment('C', control1, control2, roundedEnd);\n        path.appendSegment(segment);\n    }\n\n    segment = g.Path.createSegment('L', targetPoint);\n    path.appendSegment(segment);\n\n    return (raw) ? path : path.serialize();\n};\n"]},"metadata":{},"sourceType":"module"}