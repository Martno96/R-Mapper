{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\martn\\\\Documents\\\\New Documents 2019\\\\Technigo codin\\\\r-mapper v.2\\\\r-mapper\\\\src\\\\components\\\\BondSubtypeSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { Add } from '@material-ui/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CharacterNameAutoComplete from './CharacterNameAutoComplete';\nimport cast from '../reducers/cast';\nimport { bondCategories } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nexport const BondSubtypeSelect = ({\n  selectedCategory,\n  value,\n  onChange\n}) => {\n  _s();\n\n  const characters = useSelector(store => store.cast.characters);\n  const characterNames = useSelector(store => store.cast.characters).map(character => character.name);\n  const classes = useStyles();\n  const dispatch = useDispatch(); // if (selectedCategory === \"\" ) {\n  //   return (\n  //     <div>\n  //     </div>\n  //   )\n  // } else {\n\n  let subtypes;\n\n  if (selectedCategory !== \"\") {\n    subtypes = bondCategories.find(category => category.name === selectedCategory).subtypes;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    className: classes.formControl,\n    children: /*#__PURE__*/_jsxDEV(NativeSelect, {\n      required: true,\n      disabled: selectedCategory === \"\",\n      value: value,\n      onChange: onChange,\n      inputProps: {\n        name: 'subtype',\n        id: 'subtype'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        \"aria-label\": \"None\",\n        value: \"\",\n        children: \"select sub-type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), selectedCategory !== \"\" && subtypes.map(subtype => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: subtype,\n          children: subtype\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 22\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this); // }  \n};\n\n_s(BondSubtypeSelect, \"5hK5lDlHv/8/6fqT/X+ex/ScdRg=\", false, function () {\n  return [useSelector, useSelector, useStyles, useDispatch];\n});\n\n_c = BondSubtypeSelect;\nexport default BondSubtypeSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"BondSubtypeSelect\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/components/BondSubtypeSelect.js"],"names":["React","useState","makeStyles","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","InputLabel","FormHelperText","FormControl","Select","NativeSelect","Add","useSelector","useDispatch","CharacterNameAutoComplete","cast","bondCategories","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","BondSubtypeSelect","selectedCategory","value","onChange","characters","store","characterNames","map","character","name","classes","dispatch","subtypes","find","category","id","subtype"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport { Add } from '@material-ui/icons'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport CharacterNameAutoComplete from './CharacterNameAutoComplete'\r\nimport cast from '../reducers/cast'\r\nimport { bondCategories } from '../constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}))\r\n\r\nexport const BondSubtypeSelect = ({ selectedCategory, value, onChange }) => {\r\n\r\n  const characters = useSelector(store => store.cast.characters)\r\n  const characterNames = useSelector(store => store.cast.characters).map(character => character.name)\r\n\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n\r\n  // if (selectedCategory === \"\" ) {\r\n  //   return (\r\n  //     <div>\r\n  //     </div>\r\n  //   )\r\n  // } else {\r\n    let subtypes\r\n\r\n    if (selectedCategory !== \"\") {\r\n      subtypes = bondCategories.find(category => category.name === selectedCategory).subtypes\r\n    }\r\n    \r\n    return (\r\n        <FormControl className={classes.formControl}>\r\n          {/* <InputLabel htmlFor=\"subtype\">{'--->'} Bond {'--->'}</InputLabel> */}\r\n          <NativeSelect\r\n            required\r\n            disabled={selectedCategory === \"\"}\r\n            value={value}\r\n            onChange={onChange}\r\n            inputProps={{\r\n              name: 'subtype',\r\n              id: 'subtype',\r\n            }}\r\n          >\r\n            <option aria-label=\"None\" value=\"\">select sub-type</option>\r\n            {selectedCategory !== \"\" && subtypes.map((subtype) => {\r\n              return <option value={subtype}>{subtype}</option>\r\n            })}\r\n  \r\n          </NativeSelect>\r\n          {/* <FormHelperText>Subtype</FormHelperText> */}\r\n        </FormControl>\r\n    )\r\n  // }  \r\n}\r\n\r\nexport default BondSubtypeSelect"]},"metadata":{},"sourceType":"module"}