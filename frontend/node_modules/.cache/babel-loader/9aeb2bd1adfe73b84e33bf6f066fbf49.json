{"ast":null,"code":"import { Generic } from './basic.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { uniq, difference, assign, toArray, without, isObject } from '../util/index.mjs';\n/**\n * @deprecated use the port api instead\n */\n\nexport const Model = Generic.define('devs.Model', {\n  inPorts: [],\n  outPorts: [],\n  size: {\n    width: 80,\n    height: 80\n  },\n  attrs: {\n    '.': {\n      magnet: false\n    },\n    '.label': {\n      text: 'Model',\n      'ref-x': .5,\n      'ref-y': 10,\n      'font-size': 18,\n      'text-anchor': 'middle',\n      fill: '#000'\n    },\n    '.body': {\n      'ref-width': '100%',\n      'ref-height': '100%',\n      stroke: '#000'\n    }\n  },\n  ports: {\n    groups: {\n      'in': {\n        position: {\n          name: 'left'\n        },\n        attrs: {\n          '.port-label': {\n            fill: '#000'\n          },\n          '.port-body': {\n            fill: '#fff',\n            stroke: '#000',\n            r: 10,\n            magnet: true\n          }\n        },\n        label: {\n          position: {\n            name: 'left',\n            args: {\n              y: 10\n            }\n          }\n        }\n      },\n      'out': {\n        position: {\n          name: 'right'\n        },\n        attrs: {\n          '.port-label': {\n            fill: '#000'\n          },\n          '.port-body': {\n            fill: '#fff',\n            stroke: '#000',\n            r: 10,\n            magnet: true\n          }\n        },\n        label: {\n          position: {\n            name: 'right',\n            args: {\n              y: 10\n            }\n          }\n        }\n      }\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><rect class=\"body\"/><text class=\"label\"/></g>',\n  portMarkup: '<circle class=\"port-body\"/>',\n  portLabelMarkup: '<text class=\"port-label\"/>',\n  initialize: function () {\n    Generic.prototype.initialize.apply(this, arguments);\n    this.on('change:inPorts change:outPorts', this.updatePortItems, this);\n    this.updatePortItems();\n  },\n  updatePortItems: function (model, changed, opt) {\n    // Make sure all ports are unique.\n    var inPorts = uniq(this.get('inPorts'));\n    var outPorts = difference(uniq(this.get('outPorts')), inPorts);\n    var inPortItems = this.createPortItems('in', inPorts);\n    var outPortItems = this.createPortItems('out', outPorts);\n    this.prop('ports/items', inPortItems.concat(outPortItems), assign({\n      rewrite: true\n    }, opt));\n  },\n  createPortItem: function (group, port) {\n    return {\n      id: port,\n      group: group,\n      attrs: {\n        '.port-label': {\n          text: port\n        }\n      }\n    };\n  },\n  createPortItems: function (group, ports) {\n    return toArray(ports).map(this.createPortItem.bind(this, group));\n  },\n  _addGroupPort: function (port, group, opt) {\n    var ports = this.get(group);\n    return this.set(group, Array.isArray(ports) ? ports.concat(port) : [port], opt);\n  },\n  addOutPort: function (port, opt) {\n    return this._addGroupPort(port, 'outPorts', opt);\n  },\n  addInPort: function (port, opt) {\n    return this._addGroupPort(port, 'inPorts', opt);\n  },\n  _removeGroupPort: function (port, group, opt) {\n    return this.set(group, without(this.get(group), port), opt);\n  },\n  removeOutPort: function (port, opt) {\n    return this._removeGroupPort(port, 'outPorts', opt);\n  },\n  removeInPort: function (port, opt) {\n    return this._removeGroupPort(port, 'inPorts', opt);\n  },\n  _changeGroup: function (group, properties, opt) {\n    return this.prop('ports/groups/' + group, isObject(properties) ? properties : {}, opt);\n  },\n  changeInGroup: function (properties, opt) {\n    return this._changeGroup('in', properties, opt);\n  },\n  changeOutGroup: function (properties, opt) {\n    return this._changeGroup('out', properties, opt);\n  }\n});\nexport const Atomic = Model.define('devs.Atomic', {\n  size: {\n    width: 80,\n    height: 80\n  },\n  attrs: {\n    '.label': {\n      text: 'Atomic'\n    }\n  }\n});\nexport const Coupled = Model.define('devs.Coupled', {\n  size: {\n    width: 200,\n    height: 300\n  },\n  attrs: {\n    '.label': {\n      text: 'Coupled'\n    }\n  }\n});\nexport const Link = LinkBase.define('devs.Link', {\n  attrs: {\n    '.connection': {\n      'stroke-width': 2\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/node_modules/jointjs/src/shapes/devs.mjs"],"names":["Generic","Link","LinkBase","uniq","difference","assign","toArray","without","isObject","Model","define","inPorts","outPorts","size","width","height","attrs","magnet","text","fill","stroke","ports","groups","position","name","r","label","args","y","markup","portMarkup","portLabelMarkup","initialize","prototype","apply","arguments","on","updatePortItems","model","changed","opt","get","inPortItems","createPortItems","outPortItems","prop","concat","rewrite","createPortItem","group","port","id","map","bind","_addGroupPort","set","Array","isArray","addOutPort","addInPort","_removeGroupPort","removeOutPort","removeInPort","_changeGroup","properties","changeInGroup","changeOutGroup","Atomic","Coupled"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAI,IAAIC,QAAjB,QAAiC,iBAAjC;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,QAArD,QAAqE,mBAArE;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAGT,OAAO,CAACU,MAAR,CAAe,YAAf,EAA6B;AAC9CC,EAAAA,OAAO,EAAE,EADqC;AAE9CC,EAAAA,QAAQ,EAAE,EAFoC;AAG9CC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,MAAM,EAAE;AAFN,GAHwC;AAO9CC,EAAAA,KAAK,EAAE;AACH,SAAK;AACDC,MAAAA,MAAM,EAAE;AADP,KADF;AAIH,cAAU;AACNC,MAAAA,IAAI,EAAE,OADA;AAEN,eAAS,EAFH;AAGN,eAAS,EAHH;AAIN,mBAAa,EAJP;AAKN,qBAAe,QALT;AAMNC,MAAAA,IAAI,EAAE;AANA,KAJP;AAYH,aAAS;AACL,mBAAa,MADR;AAEL,oBAAc,MAFT;AAGLC,MAAAA,MAAM,EAAE;AAHH;AAZN,GAPuC;AAyB9CC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE;AACJ,YAAM;AACFC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,IAAI,EAAE;AADA,SADR;AAIFR,QAAAA,KAAK,EAAE;AACH,yBAAe;AACXG,YAAAA,IAAI,EAAE;AADK,WADZ;AAIH,wBAAc;AACVA,YAAAA,IAAI,EAAE,MADI;AAEVC,YAAAA,MAAM,EAAE,MAFE;AAGVK,YAAAA,CAAC,EAAE,EAHO;AAIVR,YAAAA,MAAM,EAAE;AAJE;AAJX,SAJL;AAeFS,QAAAA,KAAK,EAAE;AACHH,UAAAA,QAAQ,EAAE;AACNC,YAAAA,IAAI,EAAE,MADA;AAENG,YAAAA,IAAI,EAAE;AACFC,cAAAA,CAAC,EAAE;AADD;AAFA;AADP;AAfL,OADF;AAyBJ,aAAO;AACHL,QAAAA,QAAQ,EAAE;AACNC,UAAAA,IAAI,EAAE;AADA,SADP;AAIHR,QAAAA,KAAK,EAAE;AACH,yBAAe;AACXG,YAAAA,IAAI,EAAE;AADK,WADZ;AAIH,wBAAc;AACVA,YAAAA,IAAI,EAAE,MADI;AAEVC,YAAAA,MAAM,EAAE,MAFE;AAGVK,YAAAA,CAAC,EAAE,EAHO;AAIVR,YAAAA,MAAM,EAAE;AAJE;AAJX,SAJJ;AAeHS,QAAAA,KAAK,EAAE;AACHH,UAAAA,QAAQ,EAAE;AACNC,YAAAA,IAAI,EAAE,OADA;AAENG,YAAAA,IAAI,EAAE;AACFC,cAAAA,CAAC,EAAE;AADD;AAFA;AADP;AAfJ;AAzBH;AADL;AAzBuC,CAA7B,EA6ElB;AACCC,EAAAA,MAAM,EAAE,oEADT;AAECC,EAAAA,UAAU,EAAE,6BAFb;AAGCC,EAAAA,eAAe,EAAE,4BAHlB;AAKCC,EAAAA,UAAU,EAAE,YAAW;AAEnBhC,IAAAA,OAAO,CAACiC,SAAR,CAAkBD,UAAlB,CAA6BE,KAA7B,CAAmC,IAAnC,EAAyCC,SAAzC;AAEA,SAAKC,EAAL,CAAQ,gCAAR,EAA0C,KAAKC,eAA/C,EAAgE,IAAhE;AACA,SAAKA,eAAL;AACH,GAXF;AAaCA,EAAAA,eAAe,EAAE,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,GAAzB,EAA8B;AAE3C;AACA,QAAI7B,OAAO,GAAGR,IAAI,CAAC,KAAKsC,GAAL,CAAS,SAAT,CAAD,CAAlB;AACA,QAAI7B,QAAQ,GAAGR,UAAU,CAACD,IAAI,CAAC,KAAKsC,GAAL,CAAS,UAAT,CAAD,CAAL,EAA6B9B,OAA7B,CAAzB;AAEA,QAAI+B,WAAW,GAAG,KAAKC,eAAL,CAAqB,IAArB,EAA2BhC,OAA3B,CAAlB;AACA,QAAIiC,YAAY,GAAG,KAAKD,eAAL,CAAqB,KAArB,EAA4B/B,QAA5B,CAAnB;AAEA,SAAKiC,IAAL,CAAU,aAAV,EAAyBH,WAAW,CAACI,MAAZ,CAAmBF,YAAnB,CAAzB,EAA2DvC,MAAM,CAAC;AAAE0C,MAAAA,OAAO,EAAE;AAAX,KAAD,EAAoBP,GAApB,CAAjE;AACH,GAvBF;AAyBCQ,EAAAA,cAAc,EAAE,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;AAElC,WAAO;AACHC,MAAAA,EAAE,EAAED,IADD;AAEHD,MAAAA,KAAK,EAAEA,KAFJ;AAGHjC,MAAAA,KAAK,EAAE;AACH,uBAAe;AACXE,UAAAA,IAAI,EAAEgC;AADK;AADZ;AAHJ,KAAP;AASH,GApCF;AAsCCP,EAAAA,eAAe,EAAE,UAASM,KAAT,EAAgB5B,KAAhB,EAAuB;AAEpC,WAAOf,OAAO,CAACe,KAAD,CAAP,CAAe+B,GAAf,CAAmB,KAAKJ,cAAL,CAAoBK,IAApB,CAAyB,IAAzB,EAA+BJ,KAA/B,CAAnB,CAAP;AACH,GAzCF;AA2CCK,EAAAA,aAAa,EAAE,UAASJ,IAAT,EAAeD,KAAf,EAAsBT,GAAtB,EAA2B;AAEtC,QAAInB,KAAK,GAAG,KAAKoB,GAAL,CAASQ,KAAT,CAAZ;AACA,WAAO,KAAKM,GAAL,CAASN,KAAT,EAAgBO,KAAK,CAACC,OAAN,CAAcpC,KAAd,IAAuBA,KAAK,CAACyB,MAAN,CAAaI,IAAb,CAAvB,GAA4C,CAACA,IAAD,CAA5D,EAAoEV,GAApE,CAAP;AACH,GA/CF;AAiDCkB,EAAAA,UAAU,EAAE,UAASR,IAAT,EAAeV,GAAf,EAAoB;AAE5B,WAAO,KAAKc,aAAL,CAAmBJ,IAAnB,EAAyB,UAAzB,EAAqCV,GAArC,CAAP;AACH,GApDF;AAsDCmB,EAAAA,SAAS,EAAE,UAAST,IAAT,EAAeV,GAAf,EAAoB;AAE3B,WAAO,KAAKc,aAAL,CAAmBJ,IAAnB,EAAyB,SAAzB,EAAoCV,GAApC,CAAP;AACH,GAzDF;AA2DCoB,EAAAA,gBAAgB,EAAE,UAASV,IAAT,EAAeD,KAAf,EAAsBT,GAAtB,EAA2B;AAEzC,WAAO,KAAKe,GAAL,CAASN,KAAT,EAAgB1C,OAAO,CAAC,KAAKkC,GAAL,CAASQ,KAAT,CAAD,EAAkBC,IAAlB,CAAvB,EAAgDV,GAAhD,CAAP;AACH,GA9DF;AAgECqB,EAAAA,aAAa,EAAE,UAASX,IAAT,EAAeV,GAAf,EAAoB;AAE/B,WAAO,KAAKoB,gBAAL,CAAsBV,IAAtB,EAA4B,UAA5B,EAAwCV,GAAxC,CAAP;AACH,GAnEF;AAqECsB,EAAAA,YAAY,EAAE,UAASZ,IAAT,EAAeV,GAAf,EAAoB;AAE9B,WAAO,KAAKoB,gBAAL,CAAsBV,IAAtB,EAA4B,SAA5B,EAAuCV,GAAvC,CAAP;AACH,GAxEF;AA0ECuB,EAAAA,YAAY,EAAE,UAASd,KAAT,EAAgBe,UAAhB,EAA4BxB,GAA5B,EAAiC;AAE3C,WAAO,KAAKK,IAAL,CAAU,kBAAkBI,KAA5B,EAAmCzC,QAAQ,CAACwD,UAAD,CAAR,GAAuBA,UAAvB,GAAoC,EAAvE,EAA2ExB,GAA3E,CAAP;AACH,GA7EF;AA+ECyB,EAAAA,aAAa,EAAE,UAASD,UAAT,EAAqBxB,GAArB,EAA0B;AAErC,WAAO,KAAKuB,YAAL,CAAkB,IAAlB,EAAwBC,UAAxB,EAAoCxB,GAApC,CAAP;AACH,GAlFF;AAoFC0B,EAAAA,cAAc,EAAE,UAASF,UAAT,EAAqBxB,GAArB,EAA0B;AAEtC,WAAO,KAAKuB,YAAL,CAAkB,KAAlB,EAAyBC,UAAzB,EAAqCxB,GAArC,CAAP;AACH;AAvFF,CA7EkB,CAAd;AAuKP,OAAO,MAAM2B,MAAM,GAAG1D,KAAK,CAACC,MAAN,CAAa,aAAb,EAA4B;AAC9CG,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,MAAM,EAAE;AAFN,GADwC;AAK9CC,EAAAA,KAAK,EAAE;AACH,cAAU;AACNE,MAAAA,IAAI,EAAE;AADA;AADP;AALuC,CAA5B,CAAf;AAYP,OAAO,MAAMkD,OAAO,GAAG3D,KAAK,CAACC,MAAN,CAAa,cAAb,EAA6B;AAChDG,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,GADL;AAEFC,IAAAA,MAAM,EAAE;AAFN,GAD0C;AAKhDC,EAAAA,KAAK,EAAE;AACH,cAAU;AACNE,MAAAA,IAAI,EAAE;AADA;AADP;AALyC,CAA7B,CAAhB;AAYP,OAAO,MAAMjB,IAAI,GAAGC,QAAQ,CAACQ,MAAT,CAAgB,WAAhB,EAA6B;AAC7CM,EAAAA,KAAK,EAAE;AACH,mBAAe;AACX,sBAAgB;AADL;AADZ;AADsC,CAA7B,CAAb","sourcesContent":["import { Generic } from './basic.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { uniq, difference, assign, toArray, without, isObject } from '../util/index.mjs';\n\n/**\n * @deprecated use the port api instead\n */\nexport const Model = Generic.define('devs.Model', {\n    inPorts: [],\n    outPorts: [],\n    size: {\n        width: 80,\n        height: 80\n    },\n    attrs: {\n        '.': {\n            magnet: false\n        },\n        '.label': {\n            text: 'Model',\n            'ref-x': .5,\n            'ref-y': 10,\n            'font-size': 18,\n            'text-anchor': 'middle',\n            fill: '#000'\n        },\n        '.body': {\n            'ref-width': '100%',\n            'ref-height': '100%',\n            stroke: '#000'\n        }\n    },\n    ports: {\n        groups: {\n            'in': {\n                position: {\n                    name: 'left'\n                },\n                attrs: {\n                    '.port-label': {\n                        fill: '#000'\n                    },\n                    '.port-body': {\n                        fill: '#fff',\n                        stroke: '#000',\n                        r: 10,\n                        magnet: true\n                    }\n                },\n                label: {\n                    position: {\n                        name: 'left',\n                        args: {\n                            y: 10\n                        }\n                    }\n                }\n            },\n            'out': {\n                position: {\n                    name: 'right'\n                },\n                attrs: {\n                    '.port-label': {\n                        fill: '#000'\n                    },\n                    '.port-body': {\n                        fill: '#fff',\n                        stroke: '#000',\n                        r: 10,\n                        magnet: true\n                    }\n                },\n                label: {\n                    position: {\n                        name: 'right',\n                        args: {\n                            y: 10\n                        }\n                    }\n                }\n            }\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><rect class=\"body\"/><text class=\"label\"/></g>',\n    portMarkup: '<circle class=\"port-body\"/>',\n    portLabelMarkup: '<text class=\"port-label\"/>',\n\n    initialize: function() {\n\n        Generic.prototype.initialize.apply(this, arguments);\n\n        this.on('change:inPorts change:outPorts', this.updatePortItems, this);\n        this.updatePortItems();\n    },\n\n    updatePortItems: function(model, changed, opt) {\n\n        // Make sure all ports are unique.\n        var inPorts = uniq(this.get('inPorts'));\n        var outPorts = difference(uniq(this.get('outPorts')), inPorts);\n\n        var inPortItems = this.createPortItems('in', inPorts);\n        var outPortItems = this.createPortItems('out', outPorts);\n\n        this.prop('ports/items', inPortItems.concat(outPortItems), assign({ rewrite: true }, opt));\n    },\n\n    createPortItem: function(group, port) {\n\n        return {\n            id: port,\n            group: group,\n            attrs: {\n                '.port-label': {\n                    text: port\n                }\n            }\n        };\n    },\n\n    createPortItems: function(group, ports) {\n\n        return toArray(ports).map(this.createPortItem.bind(this, group));\n    },\n\n    _addGroupPort: function(port, group, opt) {\n\n        var ports = this.get(group);\n        return this.set(group, Array.isArray(ports) ? ports.concat(port) : [port], opt);\n    },\n\n    addOutPort: function(port, opt) {\n\n        return this._addGroupPort(port, 'outPorts', opt);\n    },\n\n    addInPort: function(port, opt) {\n\n        return this._addGroupPort(port, 'inPorts', opt);\n    },\n\n    _removeGroupPort: function(port, group, opt) {\n\n        return this.set(group, without(this.get(group), port), opt);\n    },\n\n    removeOutPort: function(port, opt) {\n\n        return this._removeGroupPort(port, 'outPorts', opt);\n    },\n\n    removeInPort: function(port, opt) {\n\n        return this._removeGroupPort(port, 'inPorts', opt);\n    },\n\n    _changeGroup: function(group, properties, opt) {\n\n        return this.prop('ports/groups/' + group, isObject(properties) ? properties : {}, opt);\n    },\n\n    changeInGroup: function(properties, opt) {\n\n        return this._changeGroup('in', properties, opt);\n    },\n\n    changeOutGroup: function(properties, opt) {\n\n        return this._changeGroup('out', properties, opt);\n    }\n});\n\nexport const Atomic = Model.define('devs.Atomic', {\n    size: {\n        width: 80,\n        height: 80\n    },\n    attrs: {\n        '.label': {\n            text: 'Atomic'\n        }\n    }\n});\n\nexport const Coupled = Model.define('devs.Coupled', {\n    size: {\n        width: 200,\n        height: 300\n    },\n    attrs: {\n        '.label': {\n            text: 'Coupled'\n        }\n    }\n});\n\nexport const Link = LinkBase.define('devs.Link', {\n    attrs: {\n        '.connection': {\n            'stroke-width': 2\n        }\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}