{"ast":null,"code":"import React, { useState } from 'react';\nimport * as joint from 'jointjs';\nimport { useSelector } from 'react-redux';\nimport { shapes, dia } from 'jointjs';\nimport * as standard from 'jointjs/src/shapes/standard.mjs';\nimport Button from './Button';\nimport DrawCharacters from './DrawCharacters';\nimport DrawBonds from './DrawBonds';\nimport Test from './Test'; // window.joint = joint\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  var graph1 = new joint.dia.Graph();\n  graph1.set('graphCustomProperty', true);\n  graph1.set('graphExportTime', Date.now());\n  var jsonObject = graph1.toJSON(); // transmission of `jsonObject` across network etc.\n\n  var graph2 = new joint.dia.Graph(); // new empty graph\n\n  graph2.fromJSON(jsonObject);\n  graph2.get('graphCustomProperty'); // true\n\n  graph2.get('graphExportTime'); // e.g. 627247800000\n\n  var graph1 = new joint.dia.Graph();\n  let rectio = new joint.shapes.standard.Rectangle();\n  rectio.position(150, 50);\n  rectio.resize(100, 40);\n  rectio.attr({\n    body: {\n      fill: 'green'\n    },\n    label: {\n      text: 'Richard Feynman',\n      fill: 'white'\n    }\n  });\n  console.log(rectio);\n  rectio.addTo(graph1);\n  var jsonObject = graph1.toJSON();\n  var jsonString = JSON.stringify(jsonObject); // transmission of `jsonString` across network etc.\n\n  var graph2 = new joint.dia.Graph(); // new empty graph\n\n  graph2.fromJSON(JSON.parse(jsonString));\n  let paper = new joint.dia.Paper({\n    el: document.getElementById('myholder'),\n    model: graph2,\n    cellViewNamespace: joint.shapes,\n    width: 800,\n    height: 500,\n    gridSize: 1\n  }); // let smog = new joint.dia.Graph({}, { cellNameSpace: shapes })\n  // const cells = JSON.stringify(smog.toJSON());\n  // smog.clear();\n  // console.log(JSON.parse(cells))\n  // smog.fromJSON(JSON.parse(cells));\n  // console.log(joint.shapes)\n  //   let graph = useSelector(store => store.cast.graph)\n  //   let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes.standard.Rectangle.})\n  //   let rectio = new joint.shapes.standard.Rectangle()\n  //   rectio.position(150, 50)\n  //   rectio.resize(100, 40)\n  //   rectio.attr({\n  //     body: {\n  //       fill: 'green'\n  //     },\n  //     label: {\n  //       text: 'Richard Feynman',\n  //       fill: 'white'\n  //     }\n  //   })\n  //   console.log(rectio)\n  //   rectio.addTo(updatedGraph)\n  //   let superUpdatedGraph = new joint.dia.Graph({}, { cellNameSpace: shapes })\n  //   console.log(updatedGraph.toJSON())\n  //   superUpdatedGraph.clear()\n  //   superUpdatedGraph.fromJSON(JSON.stringify(updatedGraph.toJSON()))\n  //superUpdatedGraph.fromJSON(updatedGraph.toJSON()) //this is where it GO WRONG: ERROR: dia.ElementView: markup required\n  // console.log(JSON.parse(graph))\n  // updatedGraph.fromJSON(JSON.parse(graph))\n  // let graph = new joint.dia.Graph\n  //creating a new paper should only happen when a new one is needed. But where is a currently running paper stored?\n  //in the 'myholder' html element?? papers cannot be serialized, so they need to be kept somewhere which isn't redux store.\n  //But where? Where is it currently???\n  //How I think it has worked so far:\n  //> The Paper has been recreated from scratch on each render using the new graph as model. HOWEVER, this stops working\n  //with serialized graphs. SO, I need to start freezing a PERSISTING paper instead. This Paper needs to be stored somewhere.\n  //where does Priyansh store his Paper?\n  // let paper = new joint.dia.Paper({\n  //   el: document.getElementById('myholder'),\n  //   model: superUpdatedGraph,\n  //   cellViewNamespace: shapes,\n  //   width: 800,\n  //   height: 500, \n  //   gridSize: 1\n  // })\n  // const [value, setValue] = useState('')\n  // const onValueChange = (event) => {\n  //   setValue(event.target.value)\n  // }\n  // const onClick = (event) => {\n  //   event.preventDefault()\n  //   let rect = new joint.shapes.standard.Rectangle();\n  //   rect.position(150, 50);\n  //   rect.resize(100, 40);\n  //   rect.attr({\n  //     body: {\n  //       fill: 'green'\n  //     },\n  //     label: {\n  //       text: value,\n  //       fill: 'white'\n  //     }\n  //   });\n  //   rect.addTo(graph);\n  //   setValue('')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/components/Container.js"],"names":["React","useState","joint","useSelector","shapes","dia","standard","Button","DrawCharacters","DrawBonds","Test","Container","graph1","Graph","set","Date","now","jsonObject","toJSON","graph2","fromJSON","get","rectio","Rectangle","position","resize","attr","body","fill","label","text","console","log","addTo","jsonString","JSON","stringify","parse","paper","Paper","el","document","getElementById","model","cellViewNamespace","width","height","gridSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport * as joint from 'jointjs'\r\nimport { useSelector } from 'react-redux'\r\nimport { shapes, dia } from 'jointjs'\r\nimport * as standard from 'jointjs/src/shapes/standard.mjs';\r\n\r\n\r\nimport Button from './Button'\r\nimport DrawCharacters from './DrawCharacters'\r\nimport DrawBonds from './DrawBonds'\r\nimport Test from './Test'\r\n\r\n// window.joint = joint\r\n\r\nconst Container = () => {\r\n\r\n  var graph1 = new joint.dia.Graph();\r\n  graph1.set('graphCustomProperty', true);\r\n  graph1.set('graphExportTime', Date.now());\r\n  var jsonObject = graph1.toJSON();\r\n  \r\n  // transmission of `jsonObject` across network etc.\r\n  \r\n  var graph2 = new joint.dia.Graph(); // new empty graph\r\n  graph2.fromJSON(jsonObject);\r\n  graph2.get('graphCustomProperty'); // true\r\n  graph2.get('graphExportTime'); // e.g. 627247800000\r\n\r\n  var graph1 = new joint.dia.Graph();\r\n\r\n  let rectio = new joint.shapes.standard.Rectangle()\r\n  rectio.position(150, 50)\r\n  rectio.resize(100, 40)\r\n  rectio.attr({\r\n    body: {\r\n      fill: 'green'\r\n    },\r\n    label: {\r\n      text: 'Richard Feynman',\r\n      fill: 'white'\r\n    }\r\n  })\r\n  console.log(rectio)\r\n  rectio.addTo(graph1)\r\n\r\n  var jsonObject = graph1.toJSON();\r\n  var jsonString = JSON.stringify(jsonObject);\r\n\r\n  // transmission of `jsonString` across network etc.\r\n\r\n  var graph2 = new joint.dia.Graph(); // new empty graph\r\n  graph2.fromJSON(JSON.parse(jsonString));\r\n\r\n  let paper = new joint.dia.Paper({\r\n    el: document.getElementById('myholder'),\r\n    model: graph2,\r\n    cellViewNamespace: joint.shapes,\r\n    width: 800,\r\n    height: 500, \r\n    gridSize: 1\r\n  })\r\n\r\n\r\n// let smog = new joint.dia.Graph({}, { cellNameSpace: shapes })\r\n// const cells = JSON.stringify(smog.toJSON());\r\n// smog.clear();\r\n// console.log(JSON.parse(cells))\r\n// smog.fromJSON(JSON.parse(cells));\r\n\r\n\r\n\r\n\r\n// console.log(joint.shapes)\r\n\r\n//   let graph = useSelector(store => store.cast.graph)\r\n//   let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes.standard.Rectangle.})\r\n//   let rectio = new joint.shapes.standard.Rectangle()\r\n//   rectio.position(150, 50)\r\n//   rectio.resize(100, 40)\r\n//   rectio.attr({\r\n//     body: {\r\n//       fill: 'green'\r\n//     },\r\n//     label: {\r\n//       text: 'Richard Feynman',\r\n//       fill: 'white'\r\n//     }\r\n//   })\r\n//   console.log(rectio)\r\n//   rectio.addTo(updatedGraph)\r\n  \r\n//   let superUpdatedGraph = new joint.dia.Graph({}, { cellNameSpace: shapes })\r\n//   console.log(updatedGraph.toJSON())\r\n//   superUpdatedGraph.clear()\r\n//   superUpdatedGraph.fromJSON(JSON.stringify(updatedGraph.toJSON()))\r\n\r\n\r\n\r\n\r\n  //superUpdatedGraph.fromJSON(updatedGraph.toJSON()) //this is where it GO WRONG: ERROR: dia.ElementView: markup required\r\n  // console.log(JSON.parse(graph))\r\n  \r\n  // updatedGraph.fromJSON(JSON.parse(graph))\r\n\r\n\r\n  // let graph = new joint.dia.Graph\r\n\r\n  //creating a new paper should only happen when a new one is needed. But where is a currently running paper stored?\r\n  //in the 'myholder' html element?? papers cannot be serialized, so they need to be kept somewhere which isn't redux store.\r\n  //But where? Where is it currently???\r\n  //How I think it has worked so far:\r\n  //> The Paper has been recreated from scratch on each render using the new graph as model. HOWEVER, this stops working\r\n  //with serialized graphs. SO, I need to start freezing a PERSISTING paper instead. This Paper needs to be stored somewhere.\r\n  //where does Priyansh store his Paper?\r\n\r\n  // let paper = new joint.dia.Paper({\r\n  //   el: document.getElementById('myholder'),\r\n  //   model: superUpdatedGraph,\r\n  //   cellViewNamespace: shapes,\r\n  //   width: 800,\r\n  //   height: 500, \r\n  //   gridSize: 1\r\n  // })\r\n\r\n  // const [value, setValue] = useState('')\r\n\r\n  // const onValueChange = (event) => {\r\n  //   setValue(event.target.value)\r\n  // }\r\n\r\n  // const onClick = (event) => {\r\n  //   event.preventDefault()\r\n  //   let rect = new joint.shapes.standard.Rectangle();\r\n  //   rect.position(150, 50);\r\n  //   rect.resize(100, 40);\r\n  //   rect.attr({\r\n  //     body: {\r\n  //       fill: 'green'\r\n  //     },\r\n  //     label: {\r\n  //       text: value,\r\n  //       fill: 'white'\r\n  //     }\r\n  //   });\r\n  //   rect.addTo(graph);\r\n  //   setValue('')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {/* <DrawCharacters />\r\n      <DrawBonds /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Container"]},"metadata":{},"sourceType":"module"}