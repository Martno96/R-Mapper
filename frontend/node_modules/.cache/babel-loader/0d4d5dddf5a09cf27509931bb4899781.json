{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport * as joint from 'jointjs';\nimport { shapes, dia } from 'jointjs';\nimport { bondCategories } from '../constants'; // window.joint = joint\n// graph: () => {\n//   let graph = new joint.dia.Graph\n//   graph.toJSON()\n//   return graph\n// },\n\nconsole.log(joint.shapes);\nlet initGraph = new joint.dia.Graph({}, {\n  cellNameSpace: shapes\n});\nlet jsonGraph = initGraph.toJSON(initGraph);\nconsole.log(jsonGraph);\nconsole.log(JSON.stringify(jsonGraph));\nconst parsy = JSON.stringify(jsonGraph);\nconsole.log(JSON.parse(parsy));\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: JSON.stringify(jsonGraph),\n  characters: [{\n    id: \"T2StgXR6_r4jdHI9B-myV\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"TXstMXY5_B4DDhI9B-myV\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"7NstgcR6_81jd1I0x-c0m\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: [{\n    category: \"Familial Bonds\",\n    source: \"Plonky\",\n    subtype: \"has kids with\",\n    target: \"Smirgus\",\n    summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\n  }],\n  bunny: {\n    \"bobec\": \"I am a bunny\"\n  }\n};\nexport const cast = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    addCharacter: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      store.characters = [...store.characters, {\n        id: nanoid(),\n        name: action.payload.name,\n        bio: action.payload.bio\n      }];\n    },\n    addBond: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      //validate that values are okay\n      if (typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.source === 'string' && action.payload.source !== '' && typeof action.payload.subtype === 'string' && action.payload.subtype !== '' && typeof action.payload.target === 'string' && action.payload.target !== '' && typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.details === 'string' && action.payload.details !== '') {\n        store.bonds = [...store.bonds, {\n          category: action.payload.category,\n          source: action.payload.source,\n          subtype: action.payload.subtype,\n          target: action.payload.target,\n          summary: action.payload.details\n        }];\n      } else {\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\");\n        console.log(action.payload.category);\n        console.log(action.payload.source);\n        console.log(action.payload.subtype);\n        console.log(action.payload.target);\n        console.log(action.payload.details);\n      }\n    },\n    drawCharacters: (store, action) => {\n      const bunny2 = JSON.stringify(store.bunny);\n      console.log(bunny2);\n      console.log(JSON.parse(bunny2)); // console.log(JSON.parse(store.bunny))\n\n      let updatedGraph = new joint.dia.Graph({}, {\n        cellNameSpace: joint.shapes\n      }); //init new graph instance\n\n      console.log(store.graph); //okay store.graph becomes a Proxy when JSON.parse is used in the line below, but NOT when it isnt....\n\n      updatedGraph.fromJSON(JSON.parse(store.graph)); //get existing graph from store\n\n      store.characters.forEach((character, index) => {\n        let rect = new joint.shapes.standard.Rectangle();\n        rect.position(150 + index * 10, 50 + index * 10);\n        rect.resize(100, 40);\n        rect.attr({\n          body: {\n            fill: 'green'\n          },\n          label: {\n            text: character.name,\n            fill: 'white'\n          }\n        });\n        console.log(rect);\n        rect.addTo(updatedGraph);\n        console.log(`added ${character.name} to graph!`);\n        store.graph = updatedGraph.toJSON(); //update store\n      });\n    },\n    drawBonds: (store, action) => {\n      let updatedGraph = new joint.dia.Graph({}, {\n        cellNameSpace: joint.shapes\n      }); //init new graph instance\n\n      updatedGraph.fromJSON(store.graph); //get existing graph from store\n\n      const characterElements = updatedGraph.getElements();\n      store.bonds.forEach((bond, index) => {\n        const sourceElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.source);\n        const targetElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.target);\n        console.log(sourceElement);\n        console.log(targetElement); //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\n        // const sourceElement = store.characters.find(character => character.id === bond.source)\n        // const targetElement = store.characters.find(character => character.id === bond.target)\n        //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\n        //search among character Elements in graph using the label name of bond.source etc.\n\n        let link = new joint.shapes.standard.Link();\n        link.source(sourceElement);\n        link.target(targetElement);\n        link.addTo(updatedGraph);\n        store.graph = updatedGraph.toJSON(); //update store\n      });\n    }\n  }\n});\nexport const saveChanges = input => {// let isStart = input.type ? false : true\n  // let endpoint = \"\"\n  // let postBody = {}\n  // return (dispatch, getState) => {\n  //   const state = getState()\n  //   if (isStart) {\n  //     endpoint = \"start\"\n  //     postBody = JSON.stringify({\n  //       username: input\n  //     })\n  //   } else {\n  //     endpoint = \"action\"\n  //     postBody = JSON.stringify({\n  //       username: state.game.username,\n  //       type: input.type,\n  //       direction: input.direction\n  //     })\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\n  //   }\n  //   dispatch(game.actions.setLoadProgress(33))\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       'Content-Type': 'application/json;charset=utf-8'\n  //     },\n  //     body: postBody\n  //   })\n  //     .then(res => {\n  //       dispatch(game.actions.setLoadProgress(55))\n  //       return res.json()\n  //     })\n  //     .then(update => {\n  //       dispatch(game.actions.setLoadProgress(77))\n  //       return dispatch(game.actions.setGameState(update))\n  //     })\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \n  //   }\n};\nexport default cast;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/reducers/cast.js"],"names":["createSlice","nanoid","joint","shapes","dia","bondCategories","console","log","initGraph","Graph","cellNameSpace","jsonGraph","toJSON","JSON","stringify","parsy","parse","initialItems","localStorage","getItem","graph","characters","id","name","bio","bonds","category","source","subtype","target","summary","bunny","cast","initialState","reducers","addCharacter","store","action","payload","addBond","details","error","drawCharacters","bunny2","updatedGraph","fromJSON","forEach","character","index","rect","standard","Rectangle","position","resize","attr","body","fill","label","text","addTo","drawBonds","characterElements","getElements","bond","sourceElement","find","element","targetElement","link","Link","saveChanges","input"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { nanoid } from 'nanoid'\r\nimport * as joint from 'jointjs'\r\nimport { shapes, dia } from 'jointjs'\r\n\r\n\r\nimport { bondCategories } from '../constants'\r\n\r\n// window.joint = joint\r\n// graph: () => {\r\n//   let graph = new joint.dia.Graph\r\n//   graph.toJSON()\r\n//   return graph\r\n// },\r\nconsole.log(joint.shapes)\r\nlet initGraph = new joint.dia.Graph({}, { cellNameSpace: shapes })\r\nlet jsonGraph = initGraph.toJSON(initGraph)\r\nconsole.log(jsonGraph)\r\nconsole.log(JSON.stringify(jsonGraph))\r\nconst parsy = JSON.stringify(jsonGraph)\r\nconsole.log(JSON.parse(parsy))\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: JSON.stringify(jsonGraph),\r\n  characters: [\r\n    {\r\n      id: \"T2StgXR6_r4jdHI9B-myV\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"TXstMXY5_B4DDhI9B-myV\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"7NstgcR6_81jd1I0x-c0m\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n    {\r\n      category: \"Familial Bonds\",\r\n      source: \"Plonky\",\r\n      subtype: \"has kids with\",\r\n      target: \"Smirgus\",\r\n      summary: \"sabka sabkdbka dbkasbjkdb kdbajsbd\"\r\n    }\r\n  ],\r\n  bunny: {\r\n    \"bobec\": \"I am a bunny\"\r\n  }\r\n}\r\n\r\nexport const cast = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    addCharacter: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.characters = [...store.characters, {\r\n        id: nanoid(),\r\n        name: action.payload.name,\r\n        bio: action.payload.bio\r\n      }]\r\n    },\r\n    addBond: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      \r\n      //validate that values are okay\r\n      if (\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.source === 'string' && action.payload.source !== '' &&\r\n        typeof action.payload.subtype === 'string' && action.payload.subtype !== '' &&\r\n        typeof action.payload.target === 'string' && action.payload.target !== '' &&\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.details === 'string' && action.payload.details !== ''\r\n      ) {\r\n        store.bonds = [...store.bonds, {\r\n          category: action.payload.category,\r\n          source: action.payload.source,\r\n          subtype: action.payload.subtype,\r\n          target: action.payload.target,\r\n          summary: action.payload.details\r\n        }]\r\n      } else {\r\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\")\r\n        console.log(action.payload.category)\r\n        console.log(action.payload.source)\r\n        console.log(action.payload.subtype)\r\n        console.log(action.payload.target)\r\n        console.log(action.payload.details)\r\n      }\r\n    },\r\n    drawCharacters: (store, action) => {\r\n      const bunny2 = JSON.stringify(store.bunny)\r\n      console.log(bunny2)\r\n      console.log(JSON.parse(bunny2))\r\n      // console.log(JSON.parse(store.bunny))\r\n      let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes }) //init new graph instance\r\n      console.log(store.graph) //okay store.graph becomes a Proxy when JSON.parse is used in the line below, but NOT when it isnt....\r\n      updatedGraph.fromJSON(JSON.parse(store.graph)) //get existing graph from store\r\n      store.characters.forEach((character, index) => {\r\n        let rect = new joint.shapes.standard.Rectangle();\r\n        rect.position(150+index*10, 50+index*10);\r\n        rect.resize(100, 40);\r\n        rect.attr({\r\n          body: {\r\n            fill: 'green'\r\n          },\r\n          label: {\r\n            text: character.name,\r\n            fill: 'white'\r\n          }\r\n        });\r\n        console.log(rect)\r\n        rect.addTo(updatedGraph)\r\n        console.log(`added ${character.name} to graph!`)\r\n        store.graph = updatedGraph.toJSON() //update store\r\n      })\r\n    },\r\n    drawBonds: (store, action) => {\r\n      let updatedGraph = new joint.dia.Graph({}, { cellNameSpace: joint.shapes }) //init new graph instance\r\n      updatedGraph.fromJSON(store.graph) //get existing graph from store\r\n      const characterElements = updatedGraph.getElements()\r\n\r\n      store.bonds.forEach((bond, index) => {\r\n        const sourceElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.source)\r\n        const targetElement = updatedGraph.getElements().find(element => element.attr.label.text === bond.target)\r\n        console.log(sourceElement)\r\n        console.log(targetElement)\r\n        //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\r\n        // const sourceElement = store.characters.find(character => character.id === bond.source)\r\n        // const targetElement = store.characters.find(character => character.id === bond.target)\r\n\r\n        //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\r\n        //search among character Elements in graph using the label name of bond.source etc.\r\n\r\n\r\n        let link = new joint.shapes.standard.Link();\r\n        link.source(sourceElement);\r\n        link.target(targetElement);\r\n        link.addTo(updatedGraph)\r\n        store.graph = updatedGraph.toJSON() //update store\r\n      })\r\n    }\r\n  }\r\n})\r\n\r\nexport const saveChanges = (input) => {\r\n  // let isStart = input.type ? false : true\r\n  // let endpoint = \"\"\r\n  // let postBody = {}\r\n\r\n  // return (dispatch, getState) => {\r\n  //   const state = getState()\r\n  //   if (isStart) {\r\n  //     endpoint = \"start\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: input\r\n  //     })\r\n  //   } else {\r\n  //     endpoint = \"action\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: state.game.username,\r\n  //       type: input.type,\r\n  //       direction: input.direction\r\n  //     })\r\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\r\n  //   }\r\n  //   dispatch(game.actions.setLoadProgress(33))\r\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: postBody\r\n  //   })\r\n  //     .then(res => {\r\n  //       dispatch(game.actions.setLoadProgress(55))\r\n  //       return res.json()\r\n  //     })\r\n  //     .then(update => {\r\n  //       dispatch(game.actions.setLoadProgress(77))\r\n  //       return dispatch(game.actions.setGameState(update))\r\n  //     })\r\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\r\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \r\n  //   }\r\n}\r\n\r\nexport default cast"]},"metadata":{},"sourceType":"module"}