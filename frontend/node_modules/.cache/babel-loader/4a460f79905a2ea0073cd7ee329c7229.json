{"ast":null,"code":"import * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject } from '../util/util.mjs';\n\nfunction toArray(obj) {\n  if (!obj) return [];\n  if (Array.isArray(obj)) return obj;\n  return [obj];\n}\n\nexport const HighlighterView = mvc.View.extend({\n  tagName: 'g',\n  svgElement: true,\n  className: 'highlight',\n  HIGHLIGHT_FLAG: 1,\n  UPDATE_PRIORITY: 3,\n  DETACHABLE: false,\n  UPDATABLE: true,\n  MOUNTABLE: true,\n  cellView: null,\n  nodeSelector: null,\n  node: null,\n  updateRequested: false,\n  transformGroup: null,\n\n  requestUpdate(cellView, nodeSelector) {\n    const {\n      paper\n    } = cellView;\n    this.cellView = cellView;\n    this.nodeSelector = nodeSelector;\n\n    if (paper) {\n      this.updateRequested = true;\n      paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n    }\n  },\n\n  confirmUpdate() {\n    // The cellView is now rendered/updated since it has a higher update priority.\n    this.updateRequested = false;\n    const {\n      cellView,\n      nodeSelector\n    } = this;\n    this.update(cellView, nodeSelector);\n    this.mount();\n    this.transform();\n    return 0;\n  },\n\n  findNode(cellView, nodeSelector = null) {\n    let el;\n\n    if (typeof nodeSelector === 'string') {\n      [el] = cellView.findBySelector(nodeSelector);\n    } else if (isPlainObject(nodeSelector)) {\n      const isLink = cellView.model.isLink();\n      const {\n        label = null,\n        port,\n        selector\n      } = nodeSelector;\n\n      if (isLink && label !== null) {\n        // Link Label Selector\n        el = cellView.findLabelNode(label, selector);\n      } else if (!isLink && port) {\n        // Element Port Selector\n        el = cellView.findPortNode(port, selector);\n      } else {\n        // Cell Selector\n        [el] = cellView.findBySelector(selector);\n      }\n    } else if (nodeSelector) {\n      el = V.toNode(nodeSelector);\n      if (!(el instanceof SVGElement)) el = null;\n    }\n\n    return el ? el : null;\n  },\n\n  mount() {\n    const {\n      MOUNTABLE,\n      cellView,\n      el,\n      options,\n      transformGroup\n    } = this;\n    if (!MOUNTABLE || transformGroup) return;\n    const {\n      vel: cellViewRoot,\n      paper\n    } = cellView;\n    const {\n      layer: layerName\n    } = options;\n\n    if (layerName) {\n      this.transformGroup = V('g').addClass('highlight-transform').append(el).appendTo(paper.getLayerNode(layerName));\n    } else {\n      // TODO: prepend vs append\n      if (!el.parentNode || el.nextSibling) {\n        // Not appended yet or not the last child\n        cellViewRoot.append(el);\n      }\n    }\n  },\n\n  unmount() {\n    const {\n      MOUNTABLE,\n      transformGroup,\n      vel\n    } = this;\n    if (!MOUNTABLE) return;\n\n    if (transformGroup) {\n      this.transformGroup = null;\n      transformGroup.remove();\n    } else {\n      vel.remove();\n    }\n  },\n\n  transform() {\n    const {\n      transformGroup,\n      cellView,\n      updateRequested\n    } = this;\n    if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n    const translateMatrix = cellView.getRootTranslateMatrix();\n    const rotateMatrix = cellView.getRootRotateMatrix();\n    const transformMatrix = translateMatrix.multiply(rotateMatrix);\n    transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n  },\n\n  update() {\n    const {\n      node: prevNode,\n      cellView,\n      nodeSelector,\n      updateRequested,\n      id\n    } = this;\n    if (updateRequested) return;\n    const node = this.node = this.findNode(cellView, nodeSelector);\n\n    if (prevNode) {\n      this.unhighlight(cellView, prevNode);\n    }\n\n    if (node) {\n      this.highlight(cellView, node);\n      this.mount();\n    } else {\n      this.unmount();\n      cellView.notify('cell:highlight:invalid', id, this);\n    }\n  },\n\n  onRemove() {\n    const {\n      node,\n      cellView,\n      id,\n      constructor\n    } = this;\n\n    if (node) {\n      this.unhighlight(cellView, node);\n    }\n\n    this.unmount();\n\n    constructor._removeRef(cellView, id);\n  },\n\n  highlight(_cellView, _node) {// to be overridden\n  },\n\n  unhighlight(_cellView, _node) {// to be overridden\n  }\n\n}, {\n  _views: {},\n  // Used internally by CellView highlight()\n  highlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.add(cellView, node, id, opt);\n  },\n  // Used internally by CellView unhighlight()\n  unhighlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.remove(cellView, id);\n  },\n\n  get(cellView, id = null) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n\n    if (id === null) {\n      // all highlighters\n      const views = [];\n      if (!refs) return views;\n\n      for (let hid in refs) {\n        const ref = refs[hid];\n\n        if (ref instanceof this) {\n          views.push(ref);\n        }\n      }\n\n      return views;\n    } else {\n      // single highlighter\n      if (!refs) return null;\n\n      if (id in refs) {\n        const ref = refs[id];\n        if (ref instanceof this) return ref;\n      }\n\n      return null;\n    }\n  },\n\n  add(cellView, nodeSelector, id, opt = {}) {\n    if (!id) throw new Error('dia.HighlighterView: An ID required.'); // Search the existing view amongst all the highlighters\n\n    const previousView = HighlighterView.get(cellView, id);\n    if (previousView) previousView.remove();\n    const view = new this(opt);\n    view.id = id;\n\n    this._addRef(cellView, id, view);\n\n    view.requestUpdate(cellView, nodeSelector);\n    return view;\n  },\n\n  _addRef(cellView, id, view) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    let refs = _views[cid];\n    if (!refs) refs = _views[cid] = {};\n    refs[id] = view;\n  },\n\n  _removeRef(cellView, id) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n    if (!refs) return;\n    if (id) delete refs[id];\n\n    for (let _ in refs) return;\n\n    delete _views[cid];\n  },\n\n  remove(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      view.remove();\n    });\n  },\n\n  update(cellView, id = null, dirty = false) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (dirty || view.UPDATABLE) view.update();\n    });\n  },\n\n  transform(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (view.UPDATABLE) view.transform();\n    });\n  },\n\n  uniqueId(node, opt = '') {\n    return V.ensureId(node) + JSON.stringify(opt);\n  }\n\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/node_modules/jointjs/src/dia/HighlighterView.mjs"],"names":["mvc","V","isPlainObject","toArray","obj","Array","isArray","HighlighterView","View","extend","tagName","svgElement","className","HIGHLIGHT_FLAG","UPDATE_PRIORITY","DETACHABLE","UPDATABLE","MOUNTABLE","cellView","nodeSelector","node","updateRequested","transformGroup","requestUpdate","paper","requestViewUpdate","confirmUpdate","update","mount","transform","findNode","el","findBySelector","isLink","model","label","port","selector","findLabelNode","findPortNode","toNode","SVGElement","options","vel","cellViewRoot","layer","layerName","addClass","append","appendTo","getLayerNode","parentNode","nextSibling","unmount","remove","translateMatrix","getRootTranslateMatrix","rotateMatrix","getRootRotateMatrix","transformMatrix","multiply","attr","matrixToTransformString","prevNode","id","unhighlight","highlight","notify","onRemove","constructor","_removeRef","_cellView","_node","_views","opt","uniqueId","add","get","cid","refs","views","hid","ref","push","Error","previousView","view","_addRef","_","forEach","dirty","ensureId","JSON","stringify"],"mappings":"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","sourcesContent":["import * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject } from '../util/util.mjs';\n\nfunction toArray(obj) {\n    if (!obj) return [];\n    if (Array.isArray(obj)) return obj;\n    return [obj];\n}\n\nexport const HighlighterView = mvc.View.extend({\n\n    tagName: 'g',\n    svgElement: true,\n    className: 'highlight',\n\n    HIGHLIGHT_FLAG: 1,\n    UPDATE_PRIORITY: 3,\n    DETACHABLE: false,\n    UPDATABLE: true,\n    MOUNTABLE: true,\n\n    cellView: null,\n    nodeSelector: null,\n    node: null,\n    updateRequested: false,\n    transformGroup: null,\n\n    requestUpdate(cellView, nodeSelector) {\n        const { paper } = cellView;\n        this.cellView = cellView;\n        this.nodeSelector = nodeSelector;\n        if (paper) {\n            this.updateRequested = true;\n            paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n        }\n    },\n\n    confirmUpdate() {\n        // The cellView is now rendered/updated since it has a higher update priority.\n        this.updateRequested = false;\n        const { cellView, nodeSelector } = this;\n        this.update(cellView, nodeSelector);\n        this.mount();\n        this.transform();\n        return 0;\n    },\n\n    findNode(cellView, nodeSelector = null) {\n        let el;\n        if (typeof nodeSelector === 'string') {\n            [el] = cellView.findBySelector(nodeSelector);\n        } else if (isPlainObject(nodeSelector)) {\n            const isLink = cellView.model.isLink();\n            const { label = null, port, selector } = nodeSelector;\n            if (isLink && label !== null) {\n                // Link Label Selector\n                el = cellView.findLabelNode(label, selector);\n            } else if (!isLink && port) {\n                // Element Port Selector\n                el = cellView.findPortNode(port, selector);\n            } else {\n                // Cell Selector\n                [el] = cellView.findBySelector(selector);\n            }\n        } else if (nodeSelector) {\n            el = V.toNode(nodeSelector);\n            if (!(el instanceof SVGElement)) el = null;\n        }\n        return el ? el : null;\n    },\n\n    mount() {\n        const { MOUNTABLE, cellView, el, options, transformGroup } = this;\n        if (!MOUNTABLE || transformGroup) return;\n        const { vel: cellViewRoot, paper } = cellView;\n        const { layer: layerName } = options;\n        if (layerName) {\n            this.transformGroup = V('g')\n                .addClass('highlight-transform')\n                .append(el)\n                .appendTo(paper.getLayerNode(layerName));\n        } else {\n            // TODO: prepend vs append\n            if (!el.parentNode || el.nextSibling) {\n                // Not appended yet or not the last child\n                cellViewRoot.append(el);\n            }\n        }\n    },\n\n    unmount() {\n        const { MOUNTABLE, transformGroup, vel } = this;\n        if (!MOUNTABLE) return;\n        if (transformGroup) {\n            this.transformGroup = null;\n            transformGroup.remove();\n        } else {\n            vel.remove();\n        }\n    },\n\n    transform() {\n        const { transformGroup, cellView, updateRequested } = this;\n        if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n        const translateMatrix = cellView.getRootTranslateMatrix();\n        const rotateMatrix = cellView.getRootRotateMatrix();\n        const transformMatrix = translateMatrix.multiply(rotateMatrix);\n        transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n    },\n\n    update() {\n        const { node: prevNode, cellView, nodeSelector, updateRequested, id } = this;\n        if (updateRequested) return;\n        const node = this.node = this.findNode(cellView, nodeSelector);\n        if (prevNode) {\n            this.unhighlight(cellView, prevNode);\n        }\n        if (node) {\n            this.highlight(cellView, node);\n            this.mount();\n        } else {\n            this.unmount();\n            cellView.notify('cell:highlight:invalid', id, this);\n        }\n    },\n\n    onRemove() {\n        const { node, cellView, id, constructor } = this;\n        if (node) {\n            this.unhighlight(cellView, node);\n        }\n        this.unmount();\n        constructor._removeRef(cellView, id);\n    },\n\n    highlight(_cellView, _node) {\n        // to be overridden\n    },\n\n    unhighlight(_cellView, _node) {\n        // to be overridden\n    }\n\n}, {\n\n    _views: {},\n\n    // Used internally by CellView highlight()\n    highlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.add(cellView, node, id, opt);\n    },\n\n    // Used internally by CellView unhighlight()\n    unhighlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.remove(cellView, id);\n    },\n\n    get(cellView, id = null) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (id === null) {\n            // all highlighters\n            const views = [];\n            if (!refs) return views;\n            for (let hid in refs) {\n                const ref = refs[hid];\n                if (ref instanceof this) {\n                    views.push(ref);\n                }\n            }\n            return views;\n        } else {\n            // single highlighter\n            if (!refs) return null;\n            if (id in refs) {\n                const ref = refs[id];\n                if (ref instanceof this) return ref;\n            }\n            return null;\n        }\n    },\n\n    add(cellView, nodeSelector, id, opt = {}) {\n        if (!id) throw new Error('dia.HighlighterView: An ID required.');\n        // Search the existing view amongst all the highlighters\n        const previousView = HighlighterView.get(cellView, id);\n        if (previousView) previousView.remove();\n        const view = new this(opt);\n        view.id = id;\n        this._addRef(cellView, id, view);\n        view.requestUpdate(cellView, nodeSelector);\n        return view;\n    },\n\n    _addRef(cellView, id, view) {\n        const { cid } = cellView;\n        const { _views } = this;\n        let refs = _views[cid];\n        if (!refs) refs = _views[cid] = {};\n        refs[id] = view;\n    },\n\n    _removeRef(cellView, id) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (!refs) return;\n        if (id) delete refs[id];\n        for (let _ in refs) return;\n        delete _views[cid];\n    },\n\n    remove(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            view.remove();\n        });\n    },\n\n    update(cellView, id = null, dirty = false) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (dirty || view.UPDATABLE) view.update();\n        });\n    },\n\n    transform(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (view.UPDATABLE) view.transform();\n        });\n    },\n\n    uniqueId(node, opt = '') {\n        return V.ensureId(node) + JSON.stringify(opt);\n    }\n\n});\n"]},"metadata":{},"sourceType":"module"}