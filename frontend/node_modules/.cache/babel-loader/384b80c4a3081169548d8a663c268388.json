{"ast":null,"code":"import { ElementView } from '../dia/ElementView.mjs';\nimport { Link } from '../dia/Link.mjs';\nimport { Generic, Circle } from './basic.mjs';\nexport const Class = Generic.define('uml.Class', {\n  attrs: {\n    rect: {\n      'width': 200\n    },\n    '.uml-class-name-rect': {\n      'stroke': 'black',\n      'stroke-width': 2,\n      'fill': '#3498db'\n    },\n    '.uml-class-attrs-rect': {\n      'stroke': 'black',\n      'stroke-width': 2,\n      'fill': '#2980b9'\n    },\n    '.uml-class-methods-rect': {\n      'stroke': 'black',\n      'stroke-width': 2,\n      'fill': '#2980b9'\n    },\n    '.uml-class-name-text': {\n      'ref': '.uml-class-name-rect',\n      'ref-y': .5,\n      'ref-x': .5,\n      'text-anchor': 'middle',\n      'y-alignment': 'middle',\n      'font-weight': 'bold',\n      'fill': 'black',\n      'font-size': 12,\n      'font-family': 'Times New Roman'\n    },\n    '.uml-class-attrs-text': {\n      'ref': '.uml-class-attrs-rect',\n      'ref-y': 5,\n      'ref-x': 5,\n      'fill': 'black',\n      'font-size': 12,\n      'font-family': 'Times New Roman'\n    },\n    '.uml-class-methods-text': {\n      'ref': '.uml-class-methods-rect',\n      'ref-y': 5,\n      'ref-x': 5,\n      'fill': 'black',\n      'font-size': 12,\n      'font-family': 'Times New Roman'\n    }\n  },\n  name: [],\n  attributes: [],\n  methods: []\n}, {\n  markup: ['<g class=\"rotatable\">', '<g class=\"scalable\">', '<rect class=\"uml-class-name-rect\"/><rect class=\"uml-class-attrs-rect\"/><rect class=\"uml-class-methods-rect\"/>', '</g>', '<text class=\"uml-class-name-text\"/><text class=\"uml-class-attrs-text\"/><text class=\"uml-class-methods-text\"/>', '</g>'].join(''),\n  initialize: function () {\n    this.on('change:name change:attributes change:methods', function () {\n      this.updateRectangles();\n      this.trigger('uml-update');\n    }, this);\n    this.updateRectangles();\n    Generic.prototype.initialize.apply(this, arguments);\n  },\n  getClassName: function () {\n    return this.get('name');\n  },\n  updateRectangles: function () {\n    var attrs = this.get('attrs');\n    var rects = [{\n      type: 'name',\n      text: this.getClassName()\n    }, {\n      type: 'attrs',\n      text: this.get('attributes')\n    }, {\n      type: 'methods',\n      text: this.get('methods')\n    }];\n    var offsetY = 0;\n    rects.forEach(function (rect) {\n      var lines = Array.isArray(rect.text) ? rect.text : [rect.text];\n      var rectHeight = lines.length * 20 + 20;\n      attrs['.uml-class-' + rect.type + '-text'].text = lines.join('\\n');\n      attrs['.uml-class-' + rect.type + '-rect'].height = rectHeight;\n      attrs['.uml-class-' + rect.type + '-rect'].transform = 'translate(0,' + offsetY + ')';\n      offsetY += rectHeight;\n    });\n  }\n});\nexport const ClassView = ElementView.extend({\n  initialize: function () {\n    ElementView.prototype.initialize.apply(this, arguments);\n    this.listenTo(this.model, 'uml-update', function () {\n      this.update();\n      this.resize();\n    });\n  }\n});\nexport const Abstract = Class.define('uml.Abstract', {\n  attrs: {\n    '.uml-class-name-rect': {\n      fill: '#e74c3c'\n    },\n    '.uml-class-attrs-rect': {\n      fill: '#c0392b'\n    },\n    '.uml-class-methods-rect': {\n      fill: '#c0392b'\n    }\n  }\n}, {\n  getClassName: function () {\n    return ['<<Abstract>>', this.get('name')];\n  }\n});\nexport const AbstractView = ClassView;\nexport const Interface = Class.define('uml.Interface', {\n  attrs: {\n    '.uml-class-name-rect': {\n      fill: '#f1c40f'\n    },\n    '.uml-class-attrs-rect': {\n      fill: '#f39c12'\n    },\n    '.uml-class-methods-rect': {\n      fill: '#f39c12'\n    }\n  }\n}, {\n  getClassName: function () {\n    return ['<<Interface>>', this.get('name')];\n  }\n});\nexport const InterfaceView = ClassView;\nexport const Generalization = Link.define('uml.Generalization', {\n  attrs: {\n    '.marker-target': {\n      d: 'M 20 0 L 0 10 L 20 20 z',\n      fill: 'white'\n    }\n  }\n});\nexport const Implementation = Link.define('uml.Implementation', {\n  attrs: {\n    '.marker-target': {\n      d: 'M 20 0 L 0 10 L 20 20 z',\n      fill: 'white'\n    },\n    '.connection': {\n      'stroke-dasharray': '3,3'\n    }\n  }\n});\nexport const Aggregation = Link.define('uml.Aggregation', {\n  attrs: {\n    '.marker-target': {\n      d: 'M 40 10 L 20 20 L 0 10 L 20 0 z',\n      fill: 'white'\n    }\n  }\n});\nexport const Composition = Link.define('uml.Composition', {\n  attrs: {\n    '.marker-target': {\n      d: 'M 40 10 L 20 20 L 0 10 L 20 0 z',\n      fill: 'black'\n    }\n  }\n});\nexport const Association = Link.define('uml.Association'); // Statechart\n\nexport const State = Generic.define('uml.State', {\n  attrs: {\n    '.uml-state-body': {\n      'width': 200,\n      'height': 200,\n      'rx': 10,\n      'ry': 10,\n      'fill': '#ecf0f1',\n      'stroke': '#bdc3c7',\n      'stroke-width': 3\n    },\n    '.uml-state-separator': {\n      'stroke': '#bdc3c7',\n      'stroke-width': 2\n    },\n    '.uml-state-name': {\n      'ref': '.uml-state-body',\n      'ref-x': .5,\n      'ref-y': 5,\n      'text-anchor': 'middle',\n      'fill': '#000000',\n      'font-family': 'Courier New',\n      'font-size': 14\n    },\n    '.uml-state-events': {\n      'ref': '.uml-state-separator',\n      'ref-x': 5,\n      'ref-y': 5,\n      'fill': '#000000',\n      'font-family': 'Courier New',\n      'font-size': 14\n    }\n  },\n  name: 'State',\n  events: []\n}, {\n  markup: ['<g class=\"rotatable\">', '<g class=\"scalable\">', '<rect class=\"uml-state-body\"/>', '</g>', '<path class=\"uml-state-separator\"/>', '<text class=\"uml-state-name\"/>', '<text class=\"uml-state-events\"/>', '</g>'].join(''),\n  initialize: function () {\n    this.on({\n      'change:name': this.updateName,\n      'change:events': this.updateEvents,\n      'change:size': this.updatePath\n    }, this);\n    this.updateName();\n    this.updateEvents();\n    this.updatePath();\n    Generic.prototype.initialize.apply(this, arguments);\n  },\n  updateName: function () {\n    this.attr('.uml-state-name/text', this.get('name'));\n  },\n  updateEvents: function () {\n    this.attr('.uml-state-events/text', this.get('events').join('\\n'));\n  },\n  updatePath: function () {\n    var d = 'M 0 20 L ' + this.get('size').width + ' 20'; // We are using `silent: true` here because updatePath() is meant to be called\n    // on resize and there's no need to to update the element twice (`change:size`\n    // triggers also an update).\n\n    this.attr('.uml-state-separator/d', d, {\n      silent: true\n    });\n  }\n});\nexport const StartState = Circle.define('uml.StartState', {\n  type: 'uml.StartState',\n  attrs: {\n    circle: {\n      'fill': '#34495e',\n      'stroke': '#2c3e50',\n      'stroke-width': 2,\n      'rx': 1\n    }\n  }\n});\nexport const EndState = Generic.define('uml.EndState', {\n  size: {\n    width: 20,\n    height: 20\n  },\n  attrs: {\n    'circle.outer': {\n      transform: 'translate(10, 10)',\n      r: 10,\n      fill: '#ffffff',\n      stroke: '#2c3e50'\n    },\n    'circle.inner': {\n      transform: 'translate(10, 10)',\n      r: 6,\n      fill: '#34495e'\n    }\n  }\n}, {\n  markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle class=\"outer\"/><circle class=\"inner\"/></g></g>'\n});\nexport const Transition = Link.define('uml.Transition', {\n  attrs: {\n    '.marker-target': {\n      d: 'M 10 0 L 0 5 L 10 10 z',\n      fill: '#34495e',\n      stroke: '#2c3e50'\n    },\n    '.connection': {\n      stroke: '#2c3e50'\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/node_modules/jointjs/src/shapes/uml.mjs"],"names":["ElementView","Link","Generic","Circle","Class","define","attrs","rect","name","attributes","methods","markup","join","initialize","on","updateRectangles","trigger","prototype","apply","arguments","getClassName","get","rects","type","text","offsetY","forEach","lines","Array","isArray","rectHeight","length","height","transform","ClassView","extend","listenTo","model","update","resize","Abstract","fill","AbstractView","Interface","InterfaceView","Generalization","d","Implementation","Aggregation","Composition","Association","State","events","updateName","updateEvents","updatePath","attr","width","silent","StartState","circle","EndState","size","r","stroke","Transition"],"mappings":"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","sourcesContent":["import { ElementView } from '../dia/ElementView.mjs';\nimport { Link } from '../dia/Link.mjs';\nimport { Generic, Circle } from './basic.mjs';\n\nexport const Class = Generic.define('uml.Class', {\n    attrs: {\n        rect: { 'width': 200 },\n\n        '.uml-class-name-rect': { 'stroke': 'black', 'stroke-width': 2, 'fill': '#3498db' },\n        '.uml-class-attrs-rect': { 'stroke': 'black', 'stroke-width': 2, 'fill': '#2980b9' },\n        '.uml-class-methods-rect': { 'stroke': 'black', 'stroke-width': 2, 'fill': '#2980b9' },\n\n        '.uml-class-name-text': {\n            'ref': '.uml-class-name-rect',\n            'ref-y': .5,\n            'ref-x': .5,\n            'text-anchor': 'middle',\n            'y-alignment': 'middle',\n            'font-weight': 'bold',\n            'fill': 'black',\n            'font-size': 12,\n            'font-family': 'Times New Roman'\n        },\n        '.uml-class-attrs-text': {\n            'ref': '.uml-class-attrs-rect', 'ref-y': 5, 'ref-x': 5,\n            'fill': 'black', 'font-size': 12, 'font-family': 'Times New Roman'\n        },\n        '.uml-class-methods-text': {\n            'ref': '.uml-class-methods-rect', 'ref-y': 5, 'ref-x': 5,\n            'fill': 'black', 'font-size': 12, 'font-family': 'Times New Roman'\n        }\n    },\n\n    name: [],\n    attributes: [],\n    methods: []\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\">',\n        '<rect class=\"uml-class-name-rect\"/><rect class=\"uml-class-attrs-rect\"/><rect class=\"uml-class-methods-rect\"/>',\n        '</g>',\n        '<text class=\"uml-class-name-text\"/><text class=\"uml-class-attrs-text\"/><text class=\"uml-class-methods-text\"/>',\n        '</g>'\n    ].join(''),\n\n    initialize: function() {\n\n        this.on('change:name change:attributes change:methods', function() {\n            this.updateRectangles();\n            this.trigger('uml-update');\n        }, this);\n\n        this.updateRectangles();\n\n        Generic.prototype.initialize.apply(this, arguments);\n    },\n\n    getClassName: function() {\n        return this.get('name');\n    },\n\n    updateRectangles: function() {\n\n        var attrs = this.get('attrs');\n\n        var rects = [\n            { type: 'name', text: this.getClassName() },\n            { type: 'attrs', text: this.get('attributes') },\n            { type: 'methods', text: this.get('methods') }\n        ];\n\n        var offsetY = 0;\n\n        rects.forEach(function(rect) {\n\n            var lines = Array.isArray(rect.text) ? rect.text : [rect.text];\n            var rectHeight = lines.length * 20 + 20;\n\n            attrs['.uml-class-' + rect.type + '-text'].text = lines.join('\\n');\n            attrs['.uml-class-' + rect.type + '-rect'].height = rectHeight;\n            attrs['.uml-class-' + rect.type + '-rect'].transform = 'translate(0,' + offsetY + ')';\n\n            offsetY += rectHeight;\n        });\n    }\n\n});\n\nexport const ClassView = ElementView.extend({\n\n    initialize: function() {\n\n        ElementView.prototype.initialize.apply(this, arguments);\n\n        this.listenTo(this.model, 'uml-update', function() {\n            this.update();\n            this.resize();\n        });\n    }\n});\n\nexport const Abstract = Class.define('uml.Abstract', {\n    attrs: {\n        '.uml-class-name-rect': { fill: '#e74c3c' },\n        '.uml-class-attrs-rect': { fill: '#c0392b' },\n        '.uml-class-methods-rect': { fill: '#c0392b' }\n    }\n}, {\n\n    getClassName: function() {\n        return ['<<Abstract>>', this.get('name')];\n    }\n\n});\nexport const AbstractView = ClassView;\n\nexport const Interface = Class.define('uml.Interface', {\n    attrs: {\n        '.uml-class-name-rect': { fill: '#f1c40f' },\n        '.uml-class-attrs-rect': { fill: '#f39c12' },\n        '.uml-class-methods-rect': { fill: '#f39c12' }\n    }\n}, {\n    getClassName: function() {\n        return ['<<Interface>>', this.get('name')];\n    }\n});\nexport const InterfaceView = ClassView;\n\nexport const Generalization = Link.define('uml.Generalization', {\n    attrs: { '.marker-target': { d: 'M 20 0 L 0 10 L 20 20 z', fill: 'white' }}\n});\n\nexport const Implementation = Link.define('uml.Implementation', {\n    attrs: {\n        '.marker-target': { d: 'M 20 0 L 0 10 L 20 20 z', fill: 'white' },\n        '.connection': { 'stroke-dasharray': '3,3' }\n    }\n});\n\nexport const Aggregation = Link.define('uml.Aggregation', {\n    attrs: { '.marker-target': { d: 'M 40 10 L 20 20 L 0 10 L 20 0 z', fill: 'white' }}\n});\n\nexport const Composition = Link.define('uml.Composition', {\n    attrs: { '.marker-target': { d: 'M 40 10 L 20 20 L 0 10 L 20 0 z', fill: 'black' }}\n});\n\nexport const Association = Link.define('uml.Association');\n\n// Statechart\n\nexport const State = Generic.define('uml.State', {\n    attrs: {\n        '.uml-state-body': {\n            'width': 200, 'height': 200, 'rx': 10, 'ry': 10,\n            'fill': '#ecf0f1', 'stroke': '#bdc3c7', 'stroke-width': 3\n        },\n        '.uml-state-separator': {\n            'stroke': '#bdc3c7', 'stroke-width': 2\n        },\n        '.uml-state-name': {\n            'ref': '.uml-state-body', 'ref-x': .5, 'ref-y': 5, 'text-anchor': 'middle',\n            'fill': '#000000', 'font-family': 'Courier New', 'font-size': 14\n        },\n        '.uml-state-events': {\n            'ref': '.uml-state-separator', 'ref-x': 5, 'ref-y': 5,\n            'fill': '#000000', 'font-family': 'Courier New', 'font-size': 14\n        }\n    },\n\n    name: 'State',\n    events: []\n\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\">',\n        '<rect class=\"uml-state-body\"/>',\n        '</g>',\n        '<path class=\"uml-state-separator\"/>',\n        '<text class=\"uml-state-name\"/>',\n        '<text class=\"uml-state-events\"/>',\n        '</g>'\n    ].join(''),\n\n    initialize: function() {\n\n        this.on({\n            'change:name': this.updateName,\n            'change:events': this.updateEvents,\n            'change:size': this.updatePath\n        }, this);\n\n        this.updateName();\n        this.updateEvents();\n        this.updatePath();\n\n        Generic.prototype.initialize.apply(this, arguments);\n    },\n\n    updateName: function() {\n\n        this.attr('.uml-state-name/text', this.get('name'));\n    },\n\n    updateEvents: function() {\n\n        this.attr('.uml-state-events/text', this.get('events').join('\\n'));\n    },\n\n    updatePath: function() {\n\n        var d = 'M 0 20 L ' + this.get('size').width + ' 20';\n\n        // We are using `silent: true` here because updatePath() is meant to be called\n        // on resize and there's no need to to update the element twice (`change:size`\n        // triggers also an update).\n        this.attr('.uml-state-separator/d', d, { silent: true });\n    }\n});\n\nexport const StartState = Circle.define('uml.StartState', {\n    type: 'uml.StartState',\n    attrs: { circle: { 'fill': '#34495e', 'stroke': '#2c3e50', 'stroke-width': 2, 'rx': 1 }}\n});\n\nexport const EndState = Generic.define('uml.EndState', {\n    size: { width: 20, height: 20 },\n    attrs: {\n        'circle.outer': {\n            transform: 'translate(10, 10)',\n            r: 10,\n            fill: '#ffffff',\n            stroke: '#2c3e50'\n        },\n\n        'circle.inner': {\n            transform: 'translate(10, 10)',\n            r: 6,\n            fill: '#34495e'\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle class=\"outer\"/><circle class=\"inner\"/></g></g>',\n});\n\nexport const Transition = Link.define('uml.Transition', {\n    attrs: {\n        '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z', fill: '#34495e', stroke: '#2c3e50' },\n        '.connection': { stroke: '#2c3e50' }\n    }\n});\n"]},"metadata":{},"sourceType":"module"}