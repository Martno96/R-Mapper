{"ast":null,"code":"import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes.mjs';\nimport { env } from '../env/index.mjs'; // ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Circle = Element.define('standard.Circle', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refR: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'circle',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Ellipse = Element.define('standard.Ellipse', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refRx: '50%',\n      refRy: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Path = Element.define('standard.Path', {\n  attrs: {\n    body: {\n      refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polygon = Element.define('standard.Polygon', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polygon',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polyline = Element.define('standard.Polyline', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10 0 0',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polyline',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Image = Element.define('standard.Image', {\n  attrs: {\n    image: {\n      refWidth: '100%',\n      refHeight: '100%' // xlinkHref: '[URL]'\n\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n  attrs: {\n    border: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5,\n      fill: '#FFFFFF'\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'background',\n    attributes: {\n      'stroke': 'none'\n    }\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'rect',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#FFFFFF',\n      strokeWidth: 2\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: '30%',\n      refHeight: -20,\n      x: 10,\n      y: 10,\n      preserveAspectRatio: 'xMidYMin'\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'left',\n      refX: '30%',\n      refX2: 20,\n      // 10 + 10\n      refY: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n  attrs: {\n    border: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      fill: '#FFFFFF'\n    },\n    image: {\n      // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n      refWidth: '68%',\n      refHeight: '68%',\n      // The image offset is calculated as (100% - 68%) / 2\n      refX: '16%',\n      refY: '16%',\n      preserveAspectRatio: 'xMidYMid' // xlinkHref: '[URL]'\n\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'background'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'ellipse',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    header: {\n      refWidth: '100%',\n      height: 30,\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    headerText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: 15,\n      fontSize: 16,\n      fill: '#333333'\n    },\n    bodyText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'rect',\n    selector: 'header'\n  }, {\n    tagName: 'text',\n    selector: 'headerText'\n  }, {\n    tagName: 'text',\n    selector: 'bodyText'\n  }]\n});\nvar CYLINDER_TILT = 10;\nexport const Cylinder = Element.define('standard.Cylinder', {\n  attrs: {\n    body: {\n      lateralArea: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    top: {\n      refCx: '50%',\n      cy: CYLINDER_TILT,\n      refRx: '50%',\n      ry: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'ellipse',\n    selector: 'top'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  topRy: function (t, opt) {\n    // getter\n    if (t === undefined) return this.attr('body/lateralArea'); // setter\n\n    var isPercentageSetter = isPercentage(t);\n    var bodyAttrs = {\n      lateralArea: t\n    };\n    var topAttrs = isPercentageSetter ? {\n      refCy: t,\n      refRy: t,\n      cy: null,\n      ry: null\n    } : {\n      refCy: null,\n      refRy: null,\n      cy: t,\n      ry: t\n    };\n    return this.attr({\n      body: bodyAttrs,\n      top: topAttrs\n    }, opt);\n  }\n}, {\n  attributes: {\n    lateralArea: {\n      set: function (t, refBBox) {\n        var isPercentageSetter = isPercentage(t);\n        if (isPercentageSetter) t = parseFloat(t) / 100;\n        var x = refBBox.x;\n        var y = refBBox.y;\n        var w = refBBox.width;\n        var h = refBBox.height; // curve control point variables\n\n        var rx = w / 2;\n        var ry = isPercentageSetter ? h * t : t;\n        var kappa = V.KAPPA;\n        var cx = kappa * rx;\n        var cy = kappa * (isPercentageSetter ? h * t : t); // shape variables\n\n        var xLeft = x;\n        var xCenter = x + w / 2;\n        var xRight = x + w;\n        var ySideTop = y + ry;\n        var yCurveTop = ySideTop - ry;\n        var ySideBottom = y + h - ry;\n        var yCurveBottom = y + h; // return calculated shape\n\n        var data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];\n        return {\n          d: data.join(' ')\n        };\n      }\n    }\n  }\n});\nvar foLabelMarkup = {\n  tagName: 'foreignObject',\n  selector: 'foreignObject',\n  attributes: {\n    'overflow': 'hidden'\n  },\n  children: [{\n    tagName: 'div',\n    namespaceURI: 'http://www.w3.org/1999/xhtml',\n    selector: 'label',\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'static',\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      margin: 0,\n      padding: '0px 5px',\n      boxSizing: 'border-box',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }]\n};\nvar svgLabelMarkup = {\n  tagName: 'text',\n  selector: 'label',\n  attributes: {\n    'text-anchor': 'middle'\n  }\n};\nvar labelMarkup = env.test('svgforeignobject') ? foLabelMarkup : svgLabelMarkup;\nexport const TextBlock = Element.define('standard.TextBlock', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#ffffff',\n      strokeWidth: 2\n    },\n    foreignObject: {\n      refWidth: '100%',\n      refHeight: '100%'\n    },\n    label: {\n      style: {\n        fontSize: 14\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, labelMarkup]\n}, {\n  attributes: {\n    text: {\n      set: function (text, refBBox, node, attrs) {\n        if (node instanceof HTMLElement) {\n          node.textContent = text;\n        } else {\n          // No foreign object\n          var style = attrs.style || {};\n          var wrapValue = {\n            text: text,\n            width: -5,\n            height: '100%'\n          };\n          var wrapAttrs = assign({\n            textVerticalAnchor: 'middle'\n          }, style);\n          attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n          return {\n            fill: style.color || null\n          };\n        }\n      },\n      position: function (text, refBBox, node) {\n        // No foreign object\n        if (node instanceof SVGElement) return refBBox.center();\n      }\n    }\n  }\n}); // LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#333333',\n      strokeWidth: 2,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 10 -5 0 0 10 5 z'\n      }\n    },\n    wrapper: {\n      connection: true,\n      strokeWidth: 10,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'wrapper',\n    attributes: {\n      'fill': 'none',\n      'cursor': 'pointer',\n      'stroke': 'transparent',\n      'stroke-linecap': 'round'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none',\n      'pointer-events': 'none'\n    }\n  }]\n});\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#DDDDDD',\n      strokeWidth: 4,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        type: 'path',\n        stroke: '#000000',\n        d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n      }\n    },\n    outline: {\n      connection: true,\n      stroke: '#000000',\n      strokeWidth: 6,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'outline',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#FF0000',\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M 0 -10 -10 0 0 10 z'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    },\n    shadow: {\n      connection: true,\n      refX: 3,\n      refY: 6,\n      stroke: '#000000',\n      strokeOpacity: 0.2,\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 0 -10 -10 0 0 10 z',\n        'stroke': 'none'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'shadow',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/storymapper spreadsheet/my-app/node_modules/jointjs/src/shapes/standard.mjs"],"names":["V","Element","Link","LinkBase","isPercentage","assign","attributes","env","Rectangle","define","attrs","body","refWidth","refHeight","strokeWidth","stroke","fill","label","textVerticalAnchor","textAnchor","refX","refY","fontSize","markup","tagName","selector","Circle","refCx","refCy","refR","Ellipse","refRx","refRy","Path","refD","Polygon","refPoints","Polyline","Image","image","refY2","BorderedImage","border","background","x","y","EmbeddedImage","preserveAspectRatio","refX2","InscribedImage","HeaderedRectangle","header","height","headerText","bodyText","CYLINDER_TILT","Cylinder","lateralArea","top","cy","ry","topRy","t","opt","undefined","attr","isPercentageSetter","bodyAttrs","topAttrs","set","refBBox","parseFloat","w","width","h","rx","kappa","KAPPA","cx","xLeft","xCenter","xRight","ySideTop","yCurveTop","ySideBottom","yCurveBottom","data","d","join","foLabelMarkup","children","namespaceURI","style","position","backgroundColor","textAlign","margin","padding","boxSizing","display","alignItems","justifyContent","svgLabelMarkup","labelMarkup","test","TextBlock","foreignObject","text","node","HTMLElement","textContent","wrapValue","wrapAttrs","textWrap","call","color","SVGElement","center","line","connection","strokeLinejoin","targetMarker","wrapper","DoubleLink","type","outline","ShadowLink","sourceMarker","shadow","strokeOpacity"],"mappings":"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","sourcesContent":["import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes.mjs';\nimport { env } from '../env/index.mjs';\n\n\n// ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body',\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Circle = Element.define('standard.Circle', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refR: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'circle',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Ellipse = Element.define('standard.Ellipse', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refRx: '50%',\n            refRy: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Path = Element.define('standard.Path', {\n    attrs: {\n        body: {\n            refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polygon = Element.define('standard.Polygon', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polygon',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polyline = Element.define('standard.Polyline', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10 0 0',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polyline',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Image = Element.define('standard.Image', {\n    attrs: {\n        image: {\n            refWidth: '100%',\n            refHeight: '100%',\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n    attrs: {\n        border: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5,\n            fill: '#FFFFFF'\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'background',\n        attributes: {\n            'stroke': 'none'\n        }\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'rect',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#FFFFFF',\n            strokeWidth: 2\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: '30%',\n            refHeight: -20,\n            x: 10,\n            y: 10,\n            preserveAspectRatio: 'xMidYMin'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'left',\n            refX: '30%',\n            refX2: 20, // 10 + 10\n            refY: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n    attrs: {\n        border: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            fill: '#FFFFFF'\n        },\n        image: {\n            // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n            refWidth: '68%',\n            refHeight: '68%',\n            // The image offset is calculated as (100% - 68%) / 2\n            refX: '16%',\n            refY: '16%',\n            preserveAspectRatio: 'xMidYMid'\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'background'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'ellipse',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        header: {\n            refWidth: '100%',\n            height: 30,\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        headerText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: 15,\n            fontSize: 16,\n            fill: '#333333'\n        },\n        bodyText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'rect',\n        selector: 'header'\n    }, {\n        tagName: 'text',\n        selector: 'headerText'\n    }, {\n        tagName: 'text',\n        selector: 'bodyText'\n    }]\n});\n\nvar CYLINDER_TILT = 10;\n\nexport const Cylinder = Element.define('standard.Cylinder', {\n    attrs: {\n        body: {\n            lateralArea: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        top: {\n            refCx: '50%',\n            cy: CYLINDER_TILT,\n            refRx: '50%',\n            ry: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'ellipse',\n        selector: 'top'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }],\n\n    topRy: function(t, opt) {\n        // getter\n        if (t === undefined) return this.attr('body/lateralArea');\n\n        // setter\n        var isPercentageSetter = isPercentage(t);\n\n        var bodyAttrs = { lateralArea: t };\n        var topAttrs = isPercentageSetter\n            ? { refCy: t, refRy: t, cy: null, ry: null }\n            : { refCy: null, refRy: null, cy: t, ry: t };\n\n        return this.attr({ body: bodyAttrs, top: topAttrs }, opt);\n    }\n\n}, {\n    attributes: {\n        lateralArea: {\n            set: function(t, refBBox) {\n                var isPercentageSetter = isPercentage(t);\n                if (isPercentageSetter) t = parseFloat(t) / 100;\n\n                var x = refBBox.x;\n                var y = refBBox.y;\n                var w = refBBox.width;\n                var h = refBBox.height;\n\n                // curve control point variables\n                var rx = w / 2;\n                var ry = isPercentageSetter ? (h * t) : t;\n\n                var kappa = V.KAPPA;\n                var cx = kappa * rx;\n                var cy = kappa * (isPercentageSetter ? (h * t) : t);\n\n                // shape variables\n                var xLeft = x;\n                var xCenter = x + (w / 2);\n                var xRight = x + w;\n\n                var ySideTop = y + ry;\n                var yCurveTop = ySideTop - ry;\n                var ySideBottom = y + h - ry;\n                var yCurveBottom = y + h;\n\n                // return calculated shape\n                var data = [\n                    'M', xLeft, ySideTop,\n                    'L', xLeft, ySideBottom,\n                    'C', x, (ySideBottom + cy), (xCenter - cx), yCurveBottom, xCenter, yCurveBottom,\n                    'C', (xCenter + cx), yCurveBottom, xRight, (ySideBottom + cy), xRight, ySideBottom,\n                    'L', xRight, ySideTop,\n                    'C', xRight, (ySideTop - cy), (xCenter + cx), yCurveTop, xCenter, yCurveTop,\n                    'C', (xCenter - cx), yCurveTop, xLeft, (ySideTop - cy), xLeft, ySideTop,\n                    'Z'\n                ];\n                return { d: data.join(' ') };\n            }\n        }\n    }\n});\n\nvar foLabelMarkup = {\n    tagName: 'foreignObject',\n    selector: 'foreignObject',\n    attributes: {\n        'overflow': 'hidden'\n    },\n    children: [{\n        tagName: 'div',\n        namespaceURI: 'http://www.w3.org/1999/xhtml',\n        selector: 'label',\n        style: {\n            width: '100%',\n            height: '100%',\n            position: 'static',\n            backgroundColor: 'transparent',\n            textAlign: 'center',\n            margin: 0,\n            padding: '0px 5px',\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }\n    }]\n};\n\nvar svgLabelMarkup = {\n    tagName: 'text',\n    selector: 'label',\n    attributes: {\n        'text-anchor': 'middle'\n    }\n};\n\nvar labelMarkup = (env.test('svgforeignobject')) ? foLabelMarkup : svgLabelMarkup;\n\nexport const TextBlock = Element.define('standard.TextBlock', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#ffffff',\n            strokeWidth: 2\n        },\n        foreignObject: {\n            refWidth: '100%',\n            refHeight: '100%'\n        },\n        label: {\n            style: {\n                fontSize: 14\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, labelMarkup]\n}, {\n    attributes: {\n        text: {\n            set: function(text, refBBox, node, attrs) {\n                if (node instanceof HTMLElement) {\n                    node.textContent = text;\n                } else {\n                    // No foreign object\n                    var style = attrs.style || {};\n                    var wrapValue = { text: text, width: -5, height: '100%' };\n                    var wrapAttrs = assign({ textVerticalAnchor: 'middle' }, style);\n                    attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n                    return { fill: style.color || null };\n                }\n            },\n            position: function(text, refBBox, node) {\n                // No foreign object\n                if (node instanceof SVGElement) return refBBox.center();\n            }\n        }\n    }\n});\n\n// LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 10 -5 0 0 10 5 z'\n            }\n        },\n        wrapper: {\n            connection: true,\n            strokeWidth: 10,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'wrapper',\n        attributes: {\n            'fill': 'none',\n            'cursor': 'pointer',\n            'stroke': 'transparent',\n            'stroke-linecap': 'round'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none',\n            'pointer-events': 'none'\n        }\n    }]\n});\n\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#DDDDDD',\n            strokeWidth: 4,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                type: 'path',\n                stroke: '#000000',\n                d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n            }\n        },\n        outline: {\n            connection: true,\n            stroke: '#000000',\n            strokeWidth: 6,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'outline',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#FF0000',\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M 0 -10 -10 0 0 10 z'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        },\n        shadow: {\n            connection: true,\n            refX: 3,\n            refY: 6,\n            stroke: '#000000',\n            strokeOpacity: 0.2,\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 0 -10 -10 0 0 10 z',\n                'stroke': 'none'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'shadow',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n"]},"metadata":{},"sourceType":"module"}