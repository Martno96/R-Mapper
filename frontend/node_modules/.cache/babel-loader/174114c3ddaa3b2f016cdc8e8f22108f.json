{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport * as joint from 'jointjs';\nimport { bondCategories } from '../constants';\nconst initialItems = localStorage.getItem('cast') ? JSON.parse(localStorage.getItem('cast')) : {\n  graph: new joint.dia.Graph(),\n  characters: [{\n    id: \"T2StgXR6_r4jdHI9B-myV\",\n    name: \"Smirgus\",\n    bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"TXstMXY5_B4DDhI9B-myV\",\n    name: \"Virp\",\n    bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\n  }, {\n    id: \"7NstgcR6_81jd1I0x-c0m\",\n    name: \"Plonky\",\n    bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\n  }],\n  bonds: []\n};\nexport const cast = createSlice({\n  name: \"cast\",\n  initialState: initialItems,\n  reducers: {\n    addCharacter: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      store.characters = [...store.characters, {\n        id: nanoid(),\n        name: action.payload.name,\n        bio: action.payload.bio\n      }];\n    },\n    addBond: (store, action) => {\n      //localStorage.setItem('username', JSON.stringify(action.payload))\n      //validate that values are okay\n      if (typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.source === 'string' && action.payload.source !== '' && typeof action.payload.subtype === 'string' && action.payload.subtype !== '' && typeof action.payload.target === 'string' && action.payload.target !== '' && typeof action.payload.category === 'string' && action.payload.category !== '' && typeof action.payload.details === 'string' && action.payload.details !== '') {\n        store.bonds = [...store.bonds, {\n          category: action.payload.category,\n          source: action.payload.source,\n          subtype: action.payload.subtype,\n          target: action.payload.target,\n          summary: action.payload.details\n        }];\n      } else {\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\");\n        console.log(action.payload.category);\n        console.log(action.payload.source);\n        console.log(action.payload.subtype);\n        console.log(action.payload.target);\n        console.log(action.payload.details);\n      }\n    },\n    drawCharacters: (store, action) => {\n      store.graph.clear();\n      store.characters.forEach((character, index) => {\n        let rect = new joint.shapes.standard.Rectangle();\n        rect.position(150 + index * 10, 50 + index * 10);\n        rect.resize(100, 40);\n        rect.attr({\n          body: {\n            fill: 'green'\n          },\n          label: {\n            text: character.name,\n            fill: 'white'\n          }\n        });\n        rect.addTo(store.graph);\n        console.log(`added ${character.name} to graph!`);\n      });\n    },\n    drawBonds: (store, action) => {\n      const characterElements = store.graph.getElements();\n      store.bonds.forEach((bond, index) => {\n        //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\n        // const sourceElement = store.characters.find(character => character.id === bond.source)\n        // const targetElement = store.characters.find(character => character.id === bond.target)\n        //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\n        let link = new joint.shapes.standard.Link();\n        link.source(sourceElement);\n        link.target(targetElement);\n        link.addTo(store.graph);\n      });\n    }\n  }\n});\nexport const saveChanges = input => {// let isStart = input.type ? false : true\n  // let endpoint = \"\"\n  // let postBody = {}\n  // return (dispatch, getState) => {\n  //   const state = getState()\n  //   if (isStart) {\n  //     endpoint = \"start\"\n  //     postBody = JSON.stringify({\n  //       username: input\n  //     })\n  //   } else {\n  //     endpoint = \"action\"\n  //     postBody = JSON.stringify({\n  //       username: state.game.username,\n  //       type: input.type,\n  //       direction: input.direction\n  //     })\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\n  //   }\n  //   dispatch(game.actions.setLoadProgress(33))\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       'Content-Type': 'application/json;charset=utf-8'\n  //     },\n  //     body: postBody\n  //   })\n  //     .then(res => {\n  //       dispatch(game.actions.setLoadProgress(55))\n  //       return res.json()\n  //     })\n  //     .then(update => {\n  //       dispatch(game.actions.setLoadProgress(77))\n  //       return dispatch(game.actions.setGameState(update))\n  //     })\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \n  //   }\n};\nexport default cast;","map":{"version":3,"sources":["C:/Users/martn/Documents/New Documents 2019/Technigo codin/r-mapper v.2/r-mapper/src/reducers/cast.js"],"names":["createSlice","nanoid","joint","bondCategories","initialItems","localStorage","getItem","JSON","parse","graph","dia","Graph","characters","id","name","bio","bonds","cast","initialState","reducers","addCharacter","store","action","payload","addBond","category","source","subtype","target","details","summary","console","error","log","drawCharacters","clear","forEach","character","index","rect","shapes","standard","Rectangle","position","resize","attr","body","fill","label","text","addTo","drawBonds","characterElements","getElements","bond","link","Link","sourceElement","targetElement","saveChanges","input"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { nanoid } from 'nanoid'\r\nimport * as joint from 'jointjs'\r\n\r\nimport { bondCategories } from '../constants'\r\n\r\nconst initialItems = localStorage.getItem('cast')\r\n? JSON.parse(localStorage.getItem('cast'))\r\n: {\r\n  graph: new joint.dia.Graph,\r\n  characters: [\r\n    {\r\n      id: \"T2StgXR6_r4jdHI9B-myV\",\r\n      name: \"Smirgus\",\r\n      bio: \"sabka jcbskbqkib bdkabsd sabkdbka dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"TXstMXY5_B4DDhI9B-myV\",\r\n      name: \"Virp\",\r\n      bio: \"olbdkabsd sabkdbka sabka jcbskbqkib dbkasbjkdb kdbajsbd\"\r\n    },\r\n    {\r\n      id: \"7NstgcR6_81jd1I0x-c0m\",\r\n      name: \"Plonky\",\r\n      bio: \"sabka dbkasbjkdb jcbskbqkib sabkdbka kdbajsbd bdkabsd \"\r\n    }\r\n  ],\r\n  bonds: [\r\n  ]\r\n}\r\n\r\nexport const cast = createSlice ({\r\n  name: \"cast\",\r\n  initialState: initialItems,\r\n  reducers: {\r\n    addCharacter: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      store.characters = [...store.characters, {\r\n        id: nanoid(),\r\n        name: action.payload.name,\r\n        bio: action.payload.bio\r\n      }]\r\n    },\r\n    addBond: (store, action) => {\r\n      //localStorage.setItem('username', JSON.stringify(action.payload))\r\n      \r\n      //validate that values are okay\r\n      if (\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.source === 'string' && action.payload.source !== '' &&\r\n        typeof action.payload.subtype === 'string' && action.payload.subtype !== '' &&\r\n        typeof action.payload.target === 'string' && action.payload.target !== '' &&\r\n        typeof action.payload.category === 'string' && action.payload.category !== '' &&\r\n        typeof action.payload.details === 'string' && action.payload.details !== ''\r\n      ) {\r\n        store.bonds = [...store.bonds, {\r\n          category: action.payload.category,\r\n          source: action.payload.source,\r\n          subtype: action.payload.subtype,\r\n          target: action.payload.target,\r\n          summary: action.payload.details\r\n        }]\r\n      } else {\r\n        console.error(\"addBond reducer caught payload properties either not being strings AND/OR being empty strings\")\r\n        console.log(action.payload.category)\r\n        console.log(action.payload.source)\r\n        console.log(action.payload.subtype)\r\n        console.log(action.payload.target)\r\n        console.log(action.payload.details)\r\n      }\r\n    },\r\n    drawCharacters: (store, action) => {\r\n      store.graph.clear()\r\n      store.characters.forEach((character, index) => {\r\n        let rect = new joint.shapes.standard.Rectangle();\r\n        rect.position(150+index*10, 50+index*10);\r\n        rect.resize(100, 40);\r\n        rect.attr({\r\n          body: {\r\n            fill: 'green'\r\n          },\r\n          label: {\r\n            text: character.name,\r\n            fill: 'white'\r\n          }\r\n        });\r\n        rect.addTo(store.graph)\r\n        console.log(`added ${character.name} to graph!`)\r\n      })\r\n    },\r\n    drawBonds: (store, action) => {\r\n      const characterElements = store.graph.getElements()\r\n      store.bonds.forEach((bond, index) => {\r\n\r\n        //the issue with this section of code is that I was trying to take a normal object and put it into the graph xD\r\n        // const sourceElement = store.characters.find(character => character.id === bond.source)\r\n        // const targetElement = store.characters.find(character => character.id === bond.target)\r\n\r\n        //I gotta reach into the actual graph Element! Once I am inside this forEach, MOST of the bonds array usage is done\r\n        \r\n\r\n        let link = new joint.shapes.standard.Link();\r\n        link.source(sourceElement);\r\n        link.target(targetElement);\r\n        link.addTo(store.graph);\r\n      })\r\n    }\r\n  }\r\n})\r\n\r\nexport const saveChanges = (input) => {\r\n  // let isStart = input.type ? false : true\r\n  // let endpoint = \"\"\r\n  // let postBody = {}\r\n\r\n  // return (dispatch, getState) => {\r\n  //   const state = getState()\r\n  //   if (isStart) {\r\n  //     endpoint = \"start\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: input\r\n  //     })\r\n  //   } else {\r\n  //     endpoint = \"action\"\r\n  //     postBody = JSON.stringify({\r\n  //       username: state.game.username,\r\n  //       type: input.type,\r\n  //       direction: input.direction\r\n  //     })\r\n  //     dispatch(game.actions.logAction(JSON.parse(postBody)))\r\n  //   }\r\n  //   dispatch(game.actions.setLoadProgress(33))\r\n  //   fetch(`https://wk16-backend.herokuapp.com/${endpoint}`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: postBody\r\n  //   })\r\n  //     .then(res => {\r\n  //       dispatch(game.actions.setLoadProgress(55))\r\n  //       return res.json()\r\n  //     })\r\n  //     .then(update => {\r\n  //       dispatch(game.actions.setLoadProgress(77))\r\n  //       return dispatch(game.actions.setGameState(update))\r\n  //     })\r\n  //     .catch(error => dispatch(game.actions.setError(error.message)))\r\n  //     .finally(() => dispatch(game.actions.setLoadProgress(100))) \r\n  //   }\r\n}\r\n\r\nexport default cast"]},"metadata":{},"sourceType":"module"}